import { ATN } from 'antlr4ts/atn/ATN';
import { Parser } from 'antlr4ts/Parser';
import { ParserRuleContext } from 'antlr4ts/ParserRuleContext';
import { RuleContext } from 'antlr4ts/RuleContext';
import { TerminalNode } from 'antlr4ts/tree/TerminalNode';
import { Token } from 'antlr4ts/Token';
import { TokenStream } from 'antlr4ts/TokenStream';
import { Vocabulary } from 'antlr4ts/Vocabulary';
import { CPP14Visitor } from './CPP14Visitor';
export declare class CPP14Parser extends Parser {
    static readonly Directive = 1;
    static readonly Alignas = 2;
    static readonly Alignof = 3;
    static readonly Asm = 4;
    static readonly Auto = 5;
    static readonly Bool = 6;
    static readonly Break = 7;
    static readonly Case = 8;
    static readonly Catch = 9;
    static readonly Char = 10;
    static readonly Char16 = 11;
    static readonly Char32 = 12;
    static readonly Class = 13;
    static readonly Const = 14;
    static readonly Constexpr = 15;
    static readonly Const_cast = 16;
    static readonly Continue = 17;
    static readonly Decltype = 18;
    static readonly Default = 19;
    static readonly Delete = 20;
    static readonly Do = 21;
    static readonly Double = 22;
    static readonly File = 23;
    static readonly Dynamic_cast = 24;
    static readonly Else = 25;
    static readonly Enum = 26;
    static readonly Explicit = 27;
    static readonly Export = 28;
    static readonly Extern = 29;
    static readonly False = 30;
    static readonly Final = 31;
    static readonly Float = 32;
    static readonly For = 33;
    static readonly Friend = 34;
    static readonly Goto = 35;
    static readonly If = 36;
    static readonly Inline = 37;
    static readonly Int = 38;
    static readonly Long = 39;
    static readonly Mutable = 40;
    static readonly Namespace = 41;
    static readonly New = 42;
    static readonly Noexcept = 43;
    static readonly Nullptr = 44;
    static readonly Operator = 45;
    static readonly Override = 46;
    static readonly Private = 47;
    static readonly Protected = 48;
    static readonly Public = 49;
    static readonly Register = 50;
    static readonly Reinterpret_cast = 51;
    static readonly Return = 52;
    static readonly Short = 53;
    static readonly Signed = 54;
    static readonly Sizeof = 55;
    static readonly Static = 56;
    static readonly Static_assert = 57;
    static readonly Static_cast = 58;
    static readonly Struct = 59;
    static readonly Switch = 60;
    static readonly Template = 61;
    static readonly This = 62;
    static readonly Thread_local = 63;
    static readonly Throw = 64;
    static readonly True = 65;
    static readonly Try = 66;
    static readonly Typedef = 67;
    static readonly Typeid = 68;
    static readonly Typename = 69;
    static readonly Union = 70;
    static readonly Unsigned = 71;
    static readonly Using = 72;
    static readonly Virtual = 73;
    static readonly Void = 74;
    static readonly Volatile = 75;
    static readonly Wchar = 76;
    static readonly While = 77;
    static readonly LeftParen = 78;
    static readonly RightParen = 79;
    static readonly LeftBracket = 80;
    static readonly RightBracket = 81;
    static readonly LeftBrace = 82;
    static readonly RightBrace = 83;
    static readonly Plus = 84;
    static readonly Minus = 85;
    static readonly Star = 86;
    static readonly Div = 87;
    static readonly Mod = 88;
    static readonly Caret = 89;
    static readonly And = 90;
    static readonly Or = 91;
    static readonly Tilde = 92;
    static readonly Not = 93;
    static readonly Assign = 94;
    static readonly Less = 95;
    static readonly Greater = 96;
    static readonly PlusAssign = 97;
    static readonly MinusAssign = 98;
    static readonly StarAssign = 99;
    static readonly DivAssign = 100;
    static readonly ModAssign = 101;
    static readonly XorAssign = 102;
    static readonly AndAssign = 103;
    static readonly OrAssign = 104;
    static readonly LeftShift = 105;
    static readonly LeftShiftAssign = 106;
    static readonly Equal = 107;
    static readonly NotEqual = 108;
    static readonly LessEqual = 109;
    static readonly GreaterEqual = 110;
    static readonly AndAnd = 111;
    static readonly OrOr = 112;
    static readonly PlusPlus = 113;
    static readonly MinusMinus = 114;
    static readonly Comma = 115;
    static readonly ArrowStar = 116;
    static readonly Arrow = 117;
    static readonly Question = 118;
    static readonly Colon = 119;
    static readonly Doublecolon = 120;
    static readonly Semi = 121;
    static readonly Dot = 122;
    static readonly DotStar = 123;
    static readonly Ellipsis = 124;
    static readonly Identifier = 125;
    static readonly Integerliteral = 126;
    static readonly Decimalliteral = 127;
    static readonly Octalliteral = 128;
    static readonly Hexadecimalliteral = 129;
    static readonly Binaryliteral = 130;
    static readonly Integersuffix = 131;
    static readonly Characterliteral = 132;
    static readonly Floatingliteral = 133;
    static readonly Stringliteral = 134;
    static readonly Booleanliteral = 135;
    static readonly Userdefinedintegerliteral = 136;
    static readonly Userdefinedfloatingliteral = 137;
    static readonly Userdefinedstringliteral = 138;
    static readonly Userdefinedcharacterliteral = 139;
    static readonly Whitespace = 140;
    static readonly Newline = 141;
    static readonly BlockComment = 142;
    static readonly LineComment = 143;
    static readonly RULE_translationunit = 0;
    static readonly RULE_primaryexpression = 1;
    static readonly RULE_idexpression = 2;
    static readonly RULE_identexpression = 3;
    static readonly RULE_unqualifiedid = 4;
    static readonly RULE_qualifiedid = 5;
    static readonly RULE_nestednamespecifier = 6;
    static readonly RULE_lambdaexpression = 7;
    static readonly RULE_lambdaintroducer = 8;
    static readonly RULE_lambdacapture = 9;
    static readonly RULE_capturedefault = 10;
    static readonly RULE_capturelist = 11;
    static readonly RULE_capture = 12;
    static readonly RULE_simplecapture = 13;
    static readonly RULE_initcapture = 14;
    static readonly RULE_lambdadeclarator = 15;
    static readonly RULE_idexpressionlapper = 16;
    static readonly RULE_functioncallexpression = 17;
    static readonly RULE_postfixexpression = 18;
    static readonly RULE_expressionlist = 19;
    static readonly RULE_pseudodestructorname = 20;
    static readonly RULE_binaryexpression = 21;
    static readonly RULE_unaryexpression = 22;
    static readonly RULE_typeidlapper = 23;
    static readonly RULE_unaryoperator = 24;
    static readonly RULE_newexpression = 25;
    static readonly RULE_newplacement = 26;
    static readonly RULE_newtypeid = 27;
    static readonly RULE_newdeclarator = 28;
    static readonly RULE_noptrnewdeclarator = 29;
    static readonly RULE_newinitializer = 30;
    static readonly RULE_deleteexpression = 31;
    static readonly RULE_noexceptexpression = 32;
    static readonly RULE_castexpression = 33;
    static readonly RULE_pmexpression = 34;
    static readonly RULE_multiplicativeexpression = 35;
    static readonly RULE_additiveexpression = 36;
    static readonly RULE_shiftexpression = 37;
    static readonly RULE_relationalexpression = 38;
    static readonly RULE_equalityexpression = 39;
    static readonly RULE_andexpression = 40;
    static readonly RULE_exclusiveorexpression = 41;
    static readonly RULE_inclusiveorexpression = 42;
    static readonly RULE_logicalandexpression = 43;
    static readonly RULE_logicalorexpression = 44;
    static readonly RULE_conditionalexpression = 45;
    static readonly RULE_assignmentexpression = 46;
    static readonly RULE_assignmentoperator = 47;
    static readonly RULE_expression = 48;
    static readonly RULE_constantexpression = 49;
    static readonly RULE_statement = 50;
    static readonly RULE_statementWithoutLabeldstatement = 51;
    static readonly RULE_labeledstatement = 52;
    static readonly RULE_switchunitstatement = 53;
    static readonly RULE_statementWithoutLabeldstatementseq = 54;
    static readonly RULE_expressionstatement = 55;
    static readonly RULE_compoundstatement = 56;
    static readonly RULE_statementseq = 57;
    static readonly RULE_selectionstatement = 58;
    static readonly RULE_switchstatement = 59;
    static readonly RULE_switchunitseq = 60;
    static readonly RULE_condition = 61;
    static readonly RULE_whilestatement = 62;
    static readonly RULE_dowhilestatement = 63;
    static readonly RULE_iterationstatement = 64;
    static readonly RULE_enhancedForStatement = 65;
    static readonly RULE_forinitstatement = 66;
    static readonly RULE_forrangedeclaration = 67;
    static readonly RULE_forrangeinitializer = 68;
    static readonly RULE_jumpstatement = 69;
    static readonly RULE_breakStatement = 70;
    static readonly RULE_continueStatement = 71;
    static readonly RULE_returnStatement = 72;
    static readonly RULE_declarationstatement = 73;
    static readonly RULE_declarationseq = 74;
    static readonly RULE_myclassbody = 75;
    static readonly RULE_myclassspecifier = 76;
    static readonly RULE_myclassspecifierstatement = 77;
    static readonly RULE_myclasshead = 78;
    static readonly RULE_declaration = 79;
    static readonly RULE_blockdeclarationwithoutsimpledeclaration = 80;
    static readonly RULE_blockdeclaration = 81;
    static readonly RULE_aliasdeclaration = 82;
    static readonly RULE_variabledeclarationstatement = 83;
    static readonly RULE_variabledeclaration = 84;
    static readonly RULE_structspecifier = 85;
    static readonly RULE_variableDeclaratorList = 86;
    static readonly RULE_variableDeclarator = 87;
    static readonly RULE_dims = 88;
    static readonly RULE_functiondeclarationstatement = 89;
    static readonly RULE_simpledeclaration = 90;
    static readonly RULE_static_assertdeclaration = 91;
    static readonly RULE_emptydeclaration = 92;
    static readonly RULE_attributedeclaration = 93;
    static readonly RULE_declspecifier = 94;
    static readonly RULE_declspecifierseq = 95;
    static readonly RULE_declspecifierwithouttype = 96;
    static readonly RULE_declspecifierseqwithouttype = 97;
    static readonly RULE_storageclassspecifier = 98;
    static readonly RULE_functionspecifier = 99;
    static readonly RULE_typedefname = 100;
    static readonly RULE_typespecifier = 101;
    static readonly RULE_trailingtypespecifier = 102;
    static readonly RULE_typespecifierseq = 103;
    static readonly RULE_trailingtypespecifierseq = 104;
    static readonly RULE_simpletypespecifier = 105;
    static readonly RULE_typename = 106;
    static readonly RULE_decltypespecifier = 107;
    static readonly RULE_elaboratedtypespecifier = 108;
    static readonly RULE_enumname = 109;
    static readonly RULE_enumspecifier = 110;
    static readonly RULE_enumhead = 111;
    static readonly RULE_opaqueenumdeclaration = 112;
    static readonly RULE_enumkey = 113;
    static readonly RULE_enumbase = 114;
    static readonly RULE_enumeratorlist = 115;
    static readonly RULE_enumeratordefinition = 116;
    static readonly RULE_enumerator = 117;
    static readonly RULE_namespacename = 118;
    static readonly RULE_originalnamespacename = 119;
    static readonly RULE_namespacedefinition = 120;
    static readonly RULE_namednamespacedefinition = 121;
    static readonly RULE_originalnamespacedefinition = 122;
    static readonly RULE_extensionnamespacedefinition = 123;
    static readonly RULE_unnamednamespacedefinition = 124;
    static readonly RULE_namespacebody = 125;
    static readonly RULE_namespacealias = 126;
    static readonly RULE_namespacealiasdefinition = 127;
    static readonly RULE_qualifiednamespacespecifier = 128;
    static readonly RULE_usingdeclaration = 129;
    static readonly RULE_usingdirective = 130;
    static readonly RULE_asmdefinition = 131;
    static readonly RULE_linkagespecification = 132;
    static readonly RULE_attributespecifierseq = 133;
    static readonly RULE_attributespecifier = 134;
    static readonly RULE_alignmentspecifier = 135;
    static readonly RULE_attributelist = 136;
    static readonly RULE_attribute = 137;
    static readonly RULE_attributetoken = 138;
    static readonly RULE_attributescopedtoken = 139;
    static readonly RULE_attributenamespace = 140;
    static readonly RULE_attributeargumentclause = 141;
    static readonly RULE_balancedtokenseq = 142;
    static readonly RULE_balancedtoken = 143;
    static readonly RULE_initdeclaratorlist = 144;
    static readonly RULE_initdeclarator = 145;
    static readonly RULE_declarator = 146;
    static readonly RULE_ptrdeclarator = 147;
    static readonly RULE_noptrdeclarator = 148;
    static readonly RULE_parametersandqualifiers = 149;
    static readonly RULE_trailingreturntype = 150;
    static readonly RULE_ptroperator = 151;
    static readonly RULE_cvqualifierseq = 152;
    static readonly RULE_cvqualifier = 153;
    static readonly RULE_refqualifier = 154;
    static readonly RULE_declaratorid = 155;
    static readonly RULE_typeid = 156;
    static readonly RULE_abstractdeclarator = 157;
    static readonly RULE_ptrabstractdeclarator = 158;
    static readonly RULE_noptrabstractdeclarator = 159;
    static readonly RULE_abstractpackdeclarator = 160;
    static readonly RULE_noptrabstractpackdeclarator = 161;
    static readonly RULE_parameterdeclarationclause = 162;
    static readonly RULE_parameterdeclarationlist = 163;
    static readonly RULE_parameterdeclaration = 164;
    static readonly RULE_functiondefinition = 165;
    static readonly RULE_functionheader = 166;
    static readonly RULE_functiondeclarator = 167;
    static readonly RULE_functionbody = 168;
    static readonly RULE_initializer = 169;
    static readonly RULE_braceorequalinitializer = 170;
    static readonly RULE_initializerclause = 171;
    static readonly RULE_initializerlist = 172;
    static readonly RULE_bracedinitlist = 173;
    static readonly RULE_myclassname = 174;
    static readonly RULE_classspecifier = 175;
    static readonly RULE_classbody = 176;
    static readonly RULE_classhead = 177;
    static readonly RULE_classheadname = 178;
    static readonly RULE_classvirtspecifier = 179;
    static readonly RULE_classkey = 180;
    static readonly RULE_memberspecification = 181;
    static readonly RULE_memberdeclaration = 182;
    static readonly RULE_membervariabledeclarationstatement = 183;
    static readonly RULE_membervariabledeclaration = 184;
    static readonly RULE_memberdeclaratorlist = 185;
    static readonly RULE_memberdeclarator = 186;
    static readonly RULE_virtspecifierseq = 187;
    static readonly RULE_virtspecifier = 188;
    static readonly RULE_purespecifier = 189;
    static readonly RULE_baseclause = 190;
    static readonly RULE_basespecifierlist = 191;
    static readonly RULE_basespecifier = 192;
    static readonly RULE_classordecltype = 193;
    static readonly RULE_basetypespecifier = 194;
    static readonly RULE_accessspecifier = 195;
    static readonly RULE_conversionfunctionid = 196;
    static readonly RULE_conversiontypeid = 197;
    static readonly RULE_conversiondeclarator = 198;
    static readonly RULE_ctorinitializer = 199;
    static readonly RULE_meminitializerlist = 200;
    static readonly RULE_meminitializer = 201;
    static readonly RULE_meminitializerid = 202;
    static readonly RULE_operatorfunctionid = 203;
    static readonly RULE_literaloperatorid = 204;
    static readonly RULE_templatedeclaration = 205;
    static readonly RULE_templateparameterlist = 206;
    static readonly RULE_templateparameter = 207;
    static readonly RULE_typeparameter = 208;
    static readonly RULE_simpletemplateid = 209;
    static readonly RULE_templateid = 210;
    static readonly RULE_templatename = 211;
    static readonly RULE_templateargumentlist = 212;
    static readonly RULE_templateargument = 213;
    static readonly RULE_typenamespecifier = 214;
    static readonly RULE_explicitinstantiation = 215;
    static readonly RULE_explicitspecialization = 216;
    static readonly RULE_tryblock = 217;
    static readonly RULE_functiontryblock = 218;
    static readonly RULE_handlerseq = 219;
    static readonly RULE_handler = 220;
    static readonly RULE_exceptiondeclaration = 221;
    static readonly RULE_throwexpression = 222;
    static readonly RULE_exceptionspecification = 223;
    static readonly RULE_dynamicexceptionspecification = 224;
    static readonly RULE_typeidlist = 225;
    static readonly RULE_noexceptspecification = 226;
    static readonly RULE_rightShift = 227;
    static readonly RULE_rightShiftAssign = 228;
    static readonly RULE_operator = 229;
    static readonly RULE_literal = 230;
    static readonly RULE_integerliteral = 231;
    static readonly RULE_characterliteral = 232;
    static readonly RULE_floatingliteral = 233;
    static readonly RULE_stringliteral = 234;
    static readonly RULE_booleanliteral = 235;
    static readonly RULE_pointerliteral = 236;
    static readonly RULE_userdefinedliteral = 237;
    static readonly ruleNames: string[];
    private static readonly _LITERAL_NAMES;
    private static readonly _SYMBOLIC_NAMES;
    static readonly VOCABULARY: Vocabulary;
    get vocabulary(): Vocabulary;
    get grammarFileName(): string;
    get ruleNames(): string[];
    get serializedATN(): string;
    constructor(input: TokenStream);
    translationunit(): TranslationunitContext;
    primaryexpression(): PrimaryexpressionContext;
    idexpression(): IdexpressionContext;
    identexpression(): IdentexpressionContext;
    unqualifiedid(): UnqualifiedidContext;
    qualifiedid(): QualifiedidContext;
    nestednamespecifier(): NestednamespecifierContext;
    nestednamespecifier(_p: number): NestednamespecifierContext;
    lambdaexpression(): LambdaexpressionContext;
    lambdaintroducer(): LambdaintroducerContext;
    lambdacapture(): LambdacaptureContext;
    capturedefault(): CapturedefaultContext;
    capturelist(): CapturelistContext;
    capturelist(_p: number): CapturelistContext;
    capture(): CaptureContext;
    simplecapture(): SimplecaptureContext;
    initcapture(): InitcaptureContext;
    lambdadeclarator(): LambdadeclaratorContext;
    idexpressionlapper(): IdexpressionlapperContext;
    functioncallexpression(): FunctioncallexpressionContext;
    postfixexpression(): PostfixexpressionContext;
    postfixexpression(_p: number): PostfixexpressionContext;
    expressionlist(): ExpressionlistContext;
    pseudodestructorname(): PseudodestructornameContext;
    binaryexpression(): BinaryexpressionContext;
    unaryexpression(): UnaryexpressionContext;
    typeidlapper(): TypeidlapperContext;
    unaryoperator(): UnaryoperatorContext;
    newexpression(): NewexpressionContext;
    newplacement(): NewplacementContext;
    newtypeid(): NewtypeidContext;
    newdeclarator(): NewdeclaratorContext;
    noptrnewdeclarator(): NoptrnewdeclaratorContext;
    noptrnewdeclarator(_p: number): NoptrnewdeclaratorContext;
    newinitializer(): NewinitializerContext;
    deleteexpression(): DeleteexpressionContext;
    noexceptexpression(): NoexceptexpressionContext;
    castexpression(): CastexpressionContext;
    pmexpression(): PmexpressionContext;
    pmexpression(_p: number): PmexpressionContext;
    multiplicativeexpression(): MultiplicativeexpressionContext;
    multiplicativeexpression(_p: number): MultiplicativeexpressionContext;
    additiveexpression(): AdditiveexpressionContext;
    additiveexpression(_p: number): AdditiveexpressionContext;
    shiftexpression(): ShiftexpressionContext;
    shiftexpression(_p: number): ShiftexpressionContext;
    relationalexpression(): RelationalexpressionContext;
    relationalexpression(_p: number): RelationalexpressionContext;
    equalityexpression(): EqualityexpressionContext;
    equalityexpression(_p: number): EqualityexpressionContext;
    andexpression(): AndexpressionContext;
    andexpression(_p: number): AndexpressionContext;
    exclusiveorexpression(): ExclusiveorexpressionContext;
    exclusiveorexpression(_p: number): ExclusiveorexpressionContext;
    inclusiveorexpression(): InclusiveorexpressionContext;
    inclusiveorexpression(_p: number): InclusiveorexpressionContext;
    logicalandexpression(): LogicalandexpressionContext;
    logicalandexpression(_p: number): LogicalandexpressionContext;
    logicalorexpression(): LogicalorexpressionContext;
    logicalorexpression(_p: number): LogicalorexpressionContext;
    conditionalexpression(): ConditionalexpressionContext;
    assignmentexpression(): AssignmentexpressionContext;
    assignmentoperator(): AssignmentoperatorContext;
    expression(): ExpressionContext;
    expression(_p: number): ExpressionContext;
    constantexpression(): ConstantexpressionContext;
    statement(): StatementContext;
    statementWithoutLabeldstatement(): StatementWithoutLabeldstatementContext;
    labeledstatement(): LabeledstatementContext;
    switchunitstatement(): SwitchunitstatementContext;
    statementWithoutLabeldstatementseq(): StatementWithoutLabeldstatementseqContext;
    expressionstatement(): ExpressionstatementContext;
    compoundstatement(): CompoundstatementContext;
    statementseq(): StatementseqContext;
    selectionstatement(): SelectionstatementContext;
    switchstatement(): SwitchstatementContext;
    switchunitseq(): SwitchunitseqContext;
    condition(): ConditionContext;
    whilestatement(): WhilestatementContext;
    dowhilestatement(): DowhilestatementContext;
    iterationstatement(): IterationstatementContext;
    enhancedForStatement(): EnhancedForStatementContext;
    forinitstatement(): ForinitstatementContext;
    forrangedeclaration(): ForrangedeclarationContext;
    forrangeinitializer(): ForrangeinitializerContext;
    jumpstatement(): JumpstatementContext;
    breakStatement(): BreakStatementContext;
    continueStatement(): ContinueStatementContext;
    returnStatement(): ReturnStatementContext;
    declarationstatement(): DeclarationstatementContext;
    declarationseq(): DeclarationseqContext;
    declarationseq(_p: number): DeclarationseqContext;
    myclassbody(): MyclassbodyContext;
    myclassspecifier(): MyclassspecifierContext;
    myclassspecifierstatement(): MyclassspecifierstatementContext;
    myclasshead(): MyclassheadContext;
    declaration(): DeclarationContext;
    blockdeclarationwithoutsimpledeclaration(): BlockdeclarationwithoutsimpledeclarationContext;
    blockdeclaration(): BlockdeclarationContext;
    aliasdeclaration(): AliasdeclarationContext;
    variabledeclarationstatement(): VariabledeclarationstatementContext;
    variabledeclaration(): VariabledeclarationContext;
    structspecifier(): StructspecifierContext;
    variableDeclaratorList(): VariableDeclaratorListContext;
    variableDeclarator(): VariableDeclaratorContext;
    dims(): DimsContext;
    functiondeclarationstatement(): FunctiondeclarationstatementContext;
    simpledeclaration(): SimpledeclarationContext;
    static_assertdeclaration(): Static_assertdeclarationContext;
    emptydeclaration(): EmptydeclarationContext;
    attributedeclaration(): AttributedeclarationContext;
    declspecifier(): DeclspecifierContext;
    declspecifierseq(): DeclspecifierseqContext;
    declspecifierwithouttype(): DeclspecifierwithouttypeContext;
    declspecifierseqwithouttype(): DeclspecifierseqwithouttypeContext;
    storageclassspecifier(): StorageclassspecifierContext;
    functionspecifier(): FunctionspecifierContext;
    typedefname(): TypedefnameContext;
    typespecifier(): TypespecifierContext;
    trailingtypespecifier(): TrailingtypespecifierContext;
    typespecifierseq(): TypespecifierseqContext;
    trailingtypespecifierseq(): TrailingtypespecifierseqContext;
    simpletypespecifier(): SimpletypespecifierContext;
    typename(): TypenameContext;
    decltypespecifier(): DecltypespecifierContext;
    elaboratedtypespecifier(): ElaboratedtypespecifierContext;
    enumname(): EnumnameContext;
    enumspecifier(): EnumspecifierContext;
    enumhead(): EnumheadContext;
    opaqueenumdeclaration(): OpaqueenumdeclarationContext;
    enumkey(): EnumkeyContext;
    enumbase(): EnumbaseContext;
    enumeratorlist(): EnumeratorlistContext;
    enumeratorlist(_p: number): EnumeratorlistContext;
    enumeratordefinition(): EnumeratordefinitionContext;
    enumerator(): EnumeratorContext;
    namespacename(): NamespacenameContext;
    originalnamespacename(): OriginalnamespacenameContext;
    namespacedefinition(): NamespacedefinitionContext;
    namednamespacedefinition(): NamednamespacedefinitionContext;
    originalnamespacedefinition(): OriginalnamespacedefinitionContext;
    extensionnamespacedefinition(): ExtensionnamespacedefinitionContext;
    unnamednamespacedefinition(): UnnamednamespacedefinitionContext;
    namespacebody(): NamespacebodyContext;
    namespacealias(): NamespacealiasContext;
    namespacealiasdefinition(): NamespacealiasdefinitionContext;
    qualifiednamespacespecifier(): QualifiednamespacespecifierContext;
    usingdeclaration(): UsingdeclarationContext;
    usingdirective(): UsingdirectiveContext;
    asmdefinition(): AsmdefinitionContext;
    linkagespecification(): LinkagespecificationContext;
    attributespecifierseq(): AttributespecifierseqContext;
    attributespecifierseq(_p: number): AttributespecifierseqContext;
    attributespecifier(): AttributespecifierContext;
    alignmentspecifier(): AlignmentspecifierContext;
    attributelist(): AttributelistContext;
    attributelist(_p: number): AttributelistContext;
    attribute(): AttributeContext;
    attributetoken(): AttributetokenContext;
    attributescopedtoken(): AttributescopedtokenContext;
    attributenamespace(): AttributenamespaceContext;
    attributeargumentclause(): AttributeargumentclauseContext;
    balancedtokenseq(): BalancedtokenseqContext;
    balancedtokenseq(_p: number): BalancedtokenseqContext;
    balancedtoken(): BalancedtokenContext;
    initdeclaratorlist(): InitdeclaratorlistContext;
    initdeclarator(): InitdeclaratorContext;
    declarator(): DeclaratorContext;
    ptrdeclarator(): PtrdeclaratorContext;
    noptrdeclarator(): NoptrdeclaratorContext;
    noptrdeclarator(_p: number): NoptrdeclaratorContext;
    parametersandqualifiers(): ParametersandqualifiersContext;
    trailingreturntype(): TrailingreturntypeContext;
    ptroperator(): PtroperatorContext;
    cvqualifierseq(): CvqualifierseqContext;
    cvqualifier(): CvqualifierContext;
    refqualifier(): RefqualifierContext;
    declaratorid(): DeclaratoridContext;
    typeid(): TypeidContext;
    abstractdeclarator(): AbstractdeclaratorContext;
    ptrabstractdeclarator(): PtrabstractdeclaratorContext;
    noptrabstractdeclarator(): NoptrabstractdeclaratorContext;
    noptrabstractdeclarator(_p: number): NoptrabstractdeclaratorContext;
    abstractpackdeclarator(): AbstractpackdeclaratorContext;
    noptrabstractpackdeclarator(): NoptrabstractpackdeclaratorContext;
    noptrabstractpackdeclarator(_p: number): NoptrabstractpackdeclaratorContext;
    parameterdeclarationclause(): ParameterdeclarationclauseContext;
    parameterdeclarationlist(): ParameterdeclarationlistContext;
    parameterdeclarationlist(_p: number): ParameterdeclarationlistContext;
    parameterdeclaration(): ParameterdeclarationContext;
    functiondefinition(): FunctiondefinitionContext;
    functionheader(): FunctionheaderContext;
    functiondeclarator(): FunctiondeclaratorContext;
    functionbody(): FunctionbodyContext;
    initializer(): InitializerContext;
    braceorequalinitializer(): BraceorequalinitializerContext;
    initializerclause(): InitializerclauseContext;
    initializerlist(): InitializerlistContext;
    bracedinitlist(): BracedinitlistContext;
    myclassname(): MyclassnameContext;
    classspecifier(): ClassspecifierContext;
    classbody(): ClassbodyContext;
    classhead(): ClassheadContext;
    classheadname(): ClassheadnameContext;
    classvirtspecifier(): ClassvirtspecifierContext;
    classkey(): ClasskeyContext;
    memberspecification(): MemberspecificationContext;
    memberdeclaration(): MemberdeclarationContext;
    membervariabledeclarationstatement(): MembervariabledeclarationstatementContext;
    membervariabledeclaration(): MembervariabledeclarationContext;
    memberdeclaratorlist(): MemberdeclaratorlistContext;
    memberdeclaratorlist(_p: number): MemberdeclaratorlistContext;
    memberdeclarator(): MemberdeclaratorContext;
    virtspecifierseq(): VirtspecifierseqContext;
    virtspecifierseq(_p: number): VirtspecifierseqContext;
    virtspecifier(): VirtspecifierContext;
    purespecifier(): PurespecifierContext;
    baseclause(): BaseclauseContext;
    basespecifierlist(): BasespecifierlistContext;
    basespecifierlist(_p: number): BasespecifierlistContext;
    basespecifier(): BasespecifierContext;
    classordecltype(): ClassordecltypeContext;
    basetypespecifier(): BasetypespecifierContext;
    accessspecifier(): AccessspecifierContext;
    conversionfunctionid(): ConversionfunctionidContext;
    conversiontypeid(): ConversiontypeidContext;
    conversiondeclarator(): ConversiondeclaratorContext;
    ctorinitializer(): CtorinitializerContext;
    meminitializerlist(): MeminitializerlistContext;
    meminitializer(): MeminitializerContext;
    meminitializerid(): MeminitializeridContext;
    operatorfunctionid(): OperatorfunctionidContext;
    literaloperatorid(): LiteraloperatoridContext;
    templatedeclaration(): TemplatedeclarationContext;
    templateparameterlist(): TemplateparameterlistContext;
    templateparameterlist(_p: number): TemplateparameterlistContext;
    templateparameter(): TemplateparameterContext;
    typeparameter(): TypeparameterContext;
    simpletemplateid(): SimpletemplateidContext;
    templateid(): TemplateidContext;
    templatename(): TemplatenameContext;
    templateargumentlist(): TemplateargumentlistContext;
    templateargumentlist(_p: number): TemplateargumentlistContext;
    templateargument(): TemplateargumentContext;
    typenamespecifier(): TypenamespecifierContext;
    explicitinstantiation(): ExplicitinstantiationContext;
    explicitspecialization(): ExplicitspecializationContext;
    tryblock(): TryblockContext;
    functiontryblock(): FunctiontryblockContext;
    handlerseq(): HandlerseqContext;
    handler(): HandlerContext;
    exceptiondeclaration(): ExceptiondeclarationContext;
    throwexpression(): ThrowexpressionContext;
    exceptionspecification(): ExceptionspecificationContext;
    dynamicexceptionspecification(): DynamicexceptionspecificationContext;
    typeidlist(): TypeidlistContext;
    typeidlist(_p: number): TypeidlistContext;
    noexceptspecification(): NoexceptspecificationContext;
    rightShift(): RightShiftContext;
    rightShiftAssign(): RightShiftAssignContext;
    operator(): OperatorContext;
    literal(): LiteralContext;
    integerliteral(): IntegerliteralContext;
    characterliteral(): CharacterliteralContext;
    floatingliteral(): FloatingliteralContext;
    stringliteral(): StringliteralContext;
    booleanliteral(): BooleanliteralContext;
    pointerliteral(): PointerliteralContext;
    userdefinedliteral(): UserdefinedliteralContext;
    sempred(_localctx: RuleContext, ruleIndex: number, predIndex: number): boolean;
    private nestednamespecifier_sempred;
    private capturelist_sempred;
    private postfixexpression_sempred;
    private noptrnewdeclarator_sempred;
    private pmexpression_sempred;
    private multiplicativeexpression_sempred;
    private additiveexpression_sempred;
    private shiftexpression_sempred;
    private relationalexpression_sempred;
    private equalityexpression_sempred;
    private andexpression_sempred;
    private exclusiveorexpression_sempred;
    private inclusiveorexpression_sempred;
    private logicalandexpression_sempred;
    private logicalorexpression_sempred;
    private expression_sempred;
    private declarationseq_sempred;
    private enumeratorlist_sempred;
    private attributespecifierseq_sempred;
    private attributelist_sempred;
    private balancedtokenseq_sempred;
    private noptrdeclarator_sempred;
    private noptrabstractdeclarator_sempred;
    private noptrabstractpackdeclarator_sempred;
    private parameterdeclarationlist_sempred;
    private memberdeclaratorlist_sempred;
    private virtspecifierseq_sempred;
    private basespecifierlist_sempred;
    private templateparameterlist_sempred;
    private templateargumentlist_sempred;
    private typeidlist_sempred;
    private static readonly _serializedATNSegments;
    private static readonly _serializedATNSegment0;
    private static readonly _serializedATNSegment1;
    private static readonly _serializedATNSegment2;
    private static readonly _serializedATNSegment3;
    private static readonly _serializedATNSegment4;
    static readonly _serializedATN: string;
    static __ATN: ATN;
    static get _ATN(): ATN;
}
export declare class TranslationunitContext extends ParserRuleContext {
    declarationseq(): DeclarationseqContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class PrimaryexpressionContext extends ParserRuleContext {
    literal(): LiteralContext | undefined;
    This(): TerminalNode | undefined;
    expression(): ExpressionContext | undefined;
    identexpression(): IdentexpressionContext | undefined;
    lambdaexpression(): LambdaexpressionContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class IdexpressionContext extends ParserRuleContext {
    unqualifiedid(): UnqualifiedidContext | undefined;
    qualifiedid(): QualifiedidContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class IdentexpressionContext extends ParserRuleContext {
    unqualifiedid(): UnqualifiedidContext | undefined;
    qualifiedid(): QualifiedidContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class UnqualifiedidContext extends ParserRuleContext {
    Identifier(): TerminalNode | undefined;
    operatorfunctionid(): OperatorfunctionidContext | undefined;
    conversionfunctionid(): ConversionfunctionidContext | undefined;
    literaloperatorid(): LiteraloperatoridContext | undefined;
    myclassname(): MyclassnameContext | undefined;
    decltypespecifier(): DecltypespecifierContext | undefined;
    templateid(): TemplateidContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class QualifiedidContext extends ParserRuleContext {
    nestednamespecifier(): NestednamespecifierContext;
    unqualifiedid(): UnqualifiedidContext;
    Template(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class NestednamespecifierContext extends ParserRuleContext {
    typename(): TypenameContext | undefined;
    namespacename(): NamespacenameContext | undefined;
    decltypespecifier(): DecltypespecifierContext | undefined;
    nestednamespecifier(): NestednamespecifierContext | undefined;
    Identifier(): TerminalNode | undefined;
    simpletemplateid(): SimpletemplateidContext | undefined;
    Template(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class LambdaexpressionContext extends ParserRuleContext {
    lambdaintroducer(): LambdaintroducerContext;
    compoundstatement(): CompoundstatementContext;
    lambdadeclarator(): LambdadeclaratorContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class LambdaintroducerContext extends ParserRuleContext {
    lambdacapture(): LambdacaptureContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class LambdacaptureContext extends ParserRuleContext {
    capturedefault(): CapturedefaultContext | undefined;
    capturelist(): CapturelistContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class CapturedefaultContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class CapturelistContext extends ParserRuleContext {
    capture(): CaptureContext;
    capturelist(): CapturelistContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class CaptureContext extends ParserRuleContext {
    simplecapture(): SimplecaptureContext | undefined;
    initcapture(): InitcaptureContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class SimplecaptureContext extends ParserRuleContext {
    Identifier(): TerminalNode | undefined;
    This(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class InitcaptureContext extends ParserRuleContext {
    Identifier(): TerminalNode;
    initializer(): InitializerContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class LambdadeclaratorContext extends ParserRuleContext {
    parameterdeclarationclause(): ParameterdeclarationclauseContext;
    Mutable(): TerminalNode | undefined;
    exceptionspecification(): ExceptionspecificationContext | undefined;
    attributespecifierseq(): AttributespecifierseqContext | undefined;
    trailingreturntype(): TrailingreturntypeContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class IdexpressionlapperContext extends ParserRuleContext {
    idexpression(): IdexpressionContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class FunctioncallexpressionContext extends ParserRuleContext {
    primaryexpression(): PrimaryexpressionContext;
    LeftParen(): TerminalNode;
    RightParen(): TerminalNode;
    initializerlist(): InitializerlistContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class PostfixexpressionContext extends ParserRuleContext {
    primaryexpression(): PrimaryexpressionContext | undefined;
    functioncallexpression(): FunctioncallexpressionContext | undefined;
    postfixexpression(): PostfixexpressionContext | undefined;
    LeftBracket(): TerminalNode | undefined;
    assignmentexpression(): AssignmentexpressionContext | undefined;
    RightBracket(): TerminalNode | undefined;
    bracedinitlist(): BracedinitlistContext | undefined;
    simpletypespecifier(): SimpletypespecifierContext | undefined;
    expressionlist(): ExpressionlistContext | undefined;
    typenamespecifier(): TypenamespecifierContext | undefined;
    Dot(): TerminalNode | undefined;
    idexpressionlapper(): IdexpressionlapperContext | undefined;
    Template(): TerminalNode | undefined;
    Arrow(): TerminalNode | undefined;
    pseudodestructorname(): PseudodestructornameContext | undefined;
    PlusPlus(): TerminalNode | undefined;
    MinusMinus(): TerminalNode | undefined;
    Dynamic_cast(): TerminalNode | undefined;
    typeid(): TypeidContext | undefined;
    expression(): ExpressionContext | undefined;
    Static_cast(): TerminalNode | undefined;
    Reinterpret_cast(): TerminalNode | undefined;
    Const_cast(): TerminalNode | undefined;
    Typeid(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class ExpressionlistContext extends ParserRuleContext {
    initializerlist(): InitializerlistContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class PseudodestructornameContext extends ParserRuleContext {
    typename(): TypenameContext[];
    typename(i: number): TypenameContext;
    nestednamespecifier(): NestednamespecifierContext | undefined;
    Template(): TerminalNode | undefined;
    simpletemplateid(): SimpletemplateidContext | undefined;
    decltypespecifier(): DecltypespecifierContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class BinaryexpressionContext extends ParserRuleContext {
    postfixexpression(): PostfixexpressionContext | undefined;
    unaryexpression(): UnaryexpressionContext | undefined;
    newexpression(): NewexpressionContext | undefined;
    deleteexpression(): DeleteexpressionContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class UnaryexpressionContext extends ParserRuleContext {
    PlusPlus(): TerminalNode | undefined;
    castexpression(): CastexpressionContext | undefined;
    MinusMinus(): TerminalNode | undefined;
    unaryoperator(): UnaryoperatorContext | undefined;
    Sizeof(): TerminalNode | undefined;
    binaryexpression(): BinaryexpressionContext | undefined;
    typeidlapper(): TypeidlapperContext | undefined;
    typeid(): TypeidContext | undefined;
    Identifier(): TerminalNode | undefined;
    Alignof(): TerminalNode | undefined;
    noexceptexpression(): NoexceptexpressionContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class TypeidlapperContext extends ParserRuleContext {
    typeid(): TypeidContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class UnaryoperatorContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class NewexpressionContext extends ParserRuleContext {
    New(): TerminalNode;
    newtypeid(): NewtypeidContext | undefined;
    newplacement(): NewplacementContext | undefined;
    newinitializer(): NewinitializerContext | undefined;
    typeid(): TypeidContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class NewplacementContext extends ParserRuleContext {
    expressionlist(): ExpressionlistContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class NewtypeidContext extends ParserRuleContext {
    typespecifierseq(): TypespecifierseqContext;
    newdeclarator(): NewdeclaratorContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class NewdeclaratorContext extends ParserRuleContext {
    ptroperator(): PtroperatorContext | undefined;
    newdeclarator(): NewdeclaratorContext | undefined;
    noptrnewdeclarator(): NoptrnewdeclaratorContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class NoptrnewdeclaratorContext extends ParserRuleContext {
    expression(): ExpressionContext | undefined;
    attributespecifierseq(): AttributespecifierseqContext | undefined;
    noptrnewdeclarator(): NoptrnewdeclaratorContext | undefined;
    constantexpression(): ConstantexpressionContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class NewinitializerContext extends ParserRuleContext {
    expressionlist(): ExpressionlistContext | undefined;
    bracedinitlist(): BracedinitlistContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class DeleteexpressionContext extends ParserRuleContext {
    Delete(): TerminalNode;
    castexpression(): CastexpressionContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class NoexceptexpressionContext extends ParserRuleContext {
    Noexcept(): TerminalNode;
    expression(): ExpressionContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class CastexpressionContext extends ParserRuleContext {
    binaryexpression(): BinaryexpressionContext | undefined;
    LeftParen(): TerminalNode | undefined;
    typeid(): TypeidContext | undefined;
    RightParen(): TerminalNode | undefined;
    castexpression(): CastexpressionContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class PmexpressionContext extends ParserRuleContext {
    castexpression(): CastexpressionContext;
    pmexpression(): PmexpressionContext | undefined;
    DotStar(): TerminalNode | undefined;
    ArrowStar(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class MultiplicativeexpressionContext extends ParserRuleContext {
    pmexpression(): PmexpressionContext;
    multiplicativeexpression(): MultiplicativeexpressionContext | undefined;
    Star(): TerminalNode | undefined;
    Div(): TerminalNode | undefined;
    Mod(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class AdditiveexpressionContext extends ParserRuleContext {
    multiplicativeexpression(): MultiplicativeexpressionContext;
    additiveexpression(): AdditiveexpressionContext | undefined;
    Plus(): TerminalNode | undefined;
    Minus(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class ShiftexpressionContext extends ParserRuleContext {
    additiveexpression(): AdditiveexpressionContext;
    shiftexpression(): ShiftexpressionContext | undefined;
    LeftShift(): TerminalNode | undefined;
    rightShift(): RightShiftContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class RelationalexpressionContext extends ParserRuleContext {
    shiftexpression(): ShiftexpressionContext;
    relationalexpression(): RelationalexpressionContext | undefined;
    Less(): TerminalNode | undefined;
    Greater(): TerminalNode | undefined;
    LessEqual(): TerminalNode | undefined;
    GreaterEqual(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class EqualityexpressionContext extends ParserRuleContext {
    relationalexpression(): RelationalexpressionContext;
    equalityexpression(): EqualityexpressionContext | undefined;
    Equal(): TerminalNode | undefined;
    NotEqual(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class AndexpressionContext extends ParserRuleContext {
    equalityexpression(): EqualityexpressionContext;
    andexpression(): AndexpressionContext | undefined;
    And(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class ExclusiveorexpressionContext extends ParserRuleContext {
    andexpression(): AndexpressionContext;
    exclusiveorexpression(): ExclusiveorexpressionContext | undefined;
    Caret(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class InclusiveorexpressionContext extends ParserRuleContext {
    exclusiveorexpression(): ExclusiveorexpressionContext;
    inclusiveorexpression(): InclusiveorexpressionContext | undefined;
    Or(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class LogicalandexpressionContext extends ParserRuleContext {
    inclusiveorexpression(): InclusiveorexpressionContext;
    logicalandexpression(): LogicalandexpressionContext | undefined;
    AndAnd(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class LogicalorexpressionContext extends ParserRuleContext {
    logicalandexpression(): LogicalandexpressionContext;
    logicalorexpression(): LogicalorexpressionContext | undefined;
    OrOr(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class ConditionalexpressionContext extends ParserRuleContext {
    logicalorexpression(): LogicalorexpressionContext;
    expression(): ExpressionContext | undefined;
    assignmentexpression(): AssignmentexpressionContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class AssignmentexpressionContext extends ParserRuleContext {
    conditionalexpression(): ConditionalexpressionContext | undefined;
    logicalorexpression(): LogicalorexpressionContext | undefined;
    assignmentoperator(): AssignmentoperatorContext | undefined;
    initializerclause(): InitializerclauseContext | undefined;
    throwexpression(): ThrowexpressionContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class AssignmentoperatorContext extends ParserRuleContext {
    rightShiftAssign(): RightShiftAssignContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class ExpressionContext extends ParserRuleContext {
    assignmentexpression(): AssignmentexpressionContext;
    expression(): ExpressionContext | undefined;
    Comma(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class ConstantexpressionContext extends ParserRuleContext {
    conditionalexpression(): ConditionalexpressionContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class StatementContext extends ParserRuleContext {
    labeledstatement(): LabeledstatementContext | undefined;
    statementWithoutLabeldstatement(): StatementWithoutLabeldstatementContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class StatementWithoutLabeldstatementContext extends ParserRuleContext {
    emptydeclaration(): EmptydeclarationContext | undefined;
    expressionstatement(): ExpressionstatementContext | undefined;
    attributespecifierseq(): AttributespecifierseqContext | undefined;
    compoundstatement(): CompoundstatementContext | undefined;
    selectionstatement(): SelectionstatementContext | undefined;
    switchstatement(): SwitchstatementContext | undefined;
    iterationstatement(): IterationstatementContext | undefined;
    whilestatement(): WhilestatementContext | undefined;
    dowhilestatement(): DowhilestatementContext | undefined;
    jumpstatement(): JumpstatementContext | undefined;
    breakStatement(): BreakStatementContext | undefined;
    continueStatement(): ContinueStatementContext | undefined;
    returnStatement(): ReturnStatementContext | undefined;
    variabledeclarationstatement(): VariabledeclarationstatementContext | undefined;
    declarationstatement(): DeclarationstatementContext | undefined;
    tryblock(): TryblockContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class LabeledstatementContext extends ParserRuleContext {
    Identifier(): TerminalNode | undefined;
    statement(): StatementContext | undefined;
    attributespecifierseq(): AttributespecifierseqContext | undefined;
    switchunitstatement(): SwitchunitstatementContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class SwitchunitstatementContext extends ParserRuleContext {
    statementWithoutLabeldstatementseq(): StatementWithoutLabeldstatementseqContext;
    Case(): TerminalNode | undefined;
    constantexpression(): ConstantexpressionContext | undefined;
    Default(): TerminalNode | undefined;
    attributespecifierseq(): AttributespecifierseqContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class StatementWithoutLabeldstatementseqContext extends ParserRuleContext {
    statementWithoutLabeldstatement(): StatementWithoutLabeldstatementContext[];
    statementWithoutLabeldstatement(i: number): StatementWithoutLabeldstatementContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class ExpressionstatementContext extends ParserRuleContext {
    Semi(): TerminalNode;
    expression(): ExpressionContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class CompoundstatementContext extends ParserRuleContext {
    statementseq(): StatementseqContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class StatementseqContext extends ParserRuleContext {
    statement(): StatementContext[];
    statement(i: number): StatementContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class SelectionstatementContext extends ParserRuleContext {
    If(): TerminalNode;
    condition(): ConditionContext;
    statement(): StatementContext[];
    statement(i: number): StatementContext;
    Else(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class SwitchstatementContext extends ParserRuleContext {
    Switch(): TerminalNode;
    condition(): ConditionContext;
    switchunitseq(): SwitchunitseqContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class SwitchunitseqContext extends ParserRuleContext {
    switchunitstatement(): SwitchunitstatementContext[];
    switchunitstatement(i: number): SwitchunitstatementContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class ConditionContext extends ParserRuleContext {
    expression(): ExpressionContext | undefined;
    declspecifierseq(): DeclspecifierseqContext | undefined;
    declarator(): DeclaratorContext | undefined;
    initializerclause(): InitializerclauseContext | undefined;
    attributespecifierseq(): AttributespecifierseqContext | undefined;
    bracedinitlist(): BracedinitlistContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class WhilestatementContext extends ParserRuleContext {
    While(): TerminalNode;
    condition(): ConditionContext;
    statement(): StatementContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class DowhilestatementContext extends ParserRuleContext {
    Do(): TerminalNode;
    compoundstatement(): CompoundstatementContext;
    While(): TerminalNode;
    expression(): ExpressionContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class IterationstatementContext extends ParserRuleContext {
    For(): TerminalNode;
    forinitstatement(): ForinitstatementContext;
    statement(): StatementContext;
    condition(): ConditionContext | undefined;
    expression(): ExpressionContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class EnhancedForStatementContext extends ParserRuleContext {
    For(): TerminalNode;
    forrangedeclaration(): ForrangedeclarationContext;
    forrangeinitializer(): ForrangeinitializerContext;
    statement(): StatementContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class ForinitstatementContext extends ParserRuleContext {
    expressionstatement(): ExpressionstatementContext | undefined;
    variabledeclarationstatement(): VariabledeclarationstatementContext | undefined;
    simpledeclaration(): SimpledeclarationContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class ForrangedeclarationContext extends ParserRuleContext {
    declspecifierseq(): DeclspecifierseqContext;
    declarator(): DeclaratorContext;
    attributespecifierseq(): AttributespecifierseqContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class ForrangeinitializerContext extends ParserRuleContext {
    expression(): ExpressionContext | undefined;
    bracedinitlist(): BracedinitlistContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class JumpstatementContext extends ParserRuleContext {
    Goto(): TerminalNode;
    Identifier(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class BreakStatementContext extends ParserRuleContext {
    Break(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class ContinueStatementContext extends ParserRuleContext {
    Continue(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class ReturnStatementContext extends ParserRuleContext {
    Return(): TerminalNode;
    expression(): ExpressionContext | undefined;
    bracedinitlist(): BracedinitlistContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class DeclarationstatementContext extends ParserRuleContext {
    simpledeclaration(): SimpledeclarationContext | undefined;
    blockdeclarationwithoutsimpledeclaration(): BlockdeclarationwithoutsimpledeclarationContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class DeclarationseqContext extends ParserRuleContext {
    declaration(): DeclarationContext;
    declarationseq(): DeclarationseqContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class MyclassbodyContext extends ParserRuleContext {
    memberspecification(): MemberspecificationContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class MyclassspecifierContext extends ParserRuleContext {
    myclasshead(): MyclassheadContext;
    myclassbody(): MyclassbodyContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class MyclassspecifierstatementContext extends ParserRuleContext {
    myclassspecifier(): MyclassspecifierContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class MyclassheadContext extends ParserRuleContext {
    classkey(): ClasskeyContext;
    classheadname(): ClassheadnameContext | undefined;
    attributespecifierseq(): AttributespecifierseqContext | undefined;
    nestednamespecifier(): NestednamespecifierContext | undefined;
    classvirtspecifier(): ClassvirtspecifierContext | undefined;
    baseclause(): BaseclauseContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class DeclarationContext extends ParserRuleContext {
    variabledeclarationstatement(): VariabledeclarationstatementContext | undefined;
    functiondeclarationstatement(): FunctiondeclarationstatementContext | undefined;
    blockdeclaration(): BlockdeclarationContext | undefined;
    myclassspecifierstatement(): MyclassspecifierstatementContext | undefined;
    functiondefinition(): FunctiondefinitionContext | undefined;
    templatedeclaration(): TemplatedeclarationContext | undefined;
    explicitinstantiation(): ExplicitinstantiationContext | undefined;
    explicitspecialization(): ExplicitspecializationContext | undefined;
    linkagespecification(): LinkagespecificationContext | undefined;
    namespacedefinition(): NamespacedefinitionContext | undefined;
    emptydeclaration(): EmptydeclarationContext | undefined;
    attributedeclaration(): AttributedeclarationContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class BlockdeclarationwithoutsimpledeclarationContext extends ParserRuleContext {
    asmdefinition(): AsmdefinitionContext | undefined;
    namespacealiasdefinition(): NamespacealiasdefinitionContext | undefined;
    usingdeclaration(): UsingdeclarationContext | undefined;
    usingdirective(): UsingdirectiveContext | undefined;
    static_assertdeclaration(): Static_assertdeclarationContext | undefined;
    aliasdeclaration(): AliasdeclarationContext | undefined;
    opaqueenumdeclaration(): OpaqueenumdeclarationContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class BlockdeclarationContext extends ParserRuleContext {
    simpledeclaration(): SimpledeclarationContext | undefined;
    blockdeclarationwithoutsimpledeclaration(): BlockdeclarationwithoutsimpledeclarationContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class AliasdeclarationContext extends ParserRuleContext {
    Using(): TerminalNode;
    Identifier(): TerminalNode;
    typeid(): TypeidContext;
    attributespecifierseq(): AttributespecifierseqContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class VariabledeclarationstatementContext extends ParserRuleContext {
    variabledeclaration(): VariabledeclarationContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class VariabledeclarationContext extends ParserRuleContext {
    typespecifier(): TypespecifierContext | undefined;
    structspecifier(): StructspecifierContext | undefined;
    variableDeclaratorList(): VariableDeclaratorListContext | undefined;
    attributespecifierseq(): AttributespecifierseqContext | undefined;
    declspecifierseqwithouttype(): DeclspecifierseqwithouttypeContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class StructspecifierContext extends ParserRuleContext {
    Struct(): TerminalNode;
    classheadname(): ClassheadnameContext;
    myclassbody(): MyclassbodyContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class VariableDeclaratorListContext extends ParserRuleContext {
    variableDeclarator(): VariableDeclaratorContext[];
    variableDeclarator(i: number): VariableDeclaratorContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class VariableDeclaratorContext extends ParserRuleContext {
    declaratorid(): DeclaratoridContext;
    ptroperator(): PtroperatorContext[];
    ptroperator(i: number): PtroperatorContext;
    LeftBracket(): TerminalNode[];
    LeftBracket(i: number): TerminalNode;
    RightBracket(): TerminalNode[];
    RightBracket(i: number): TerminalNode;
    initializerclause(): InitializerclauseContext | undefined;
    Integerliteral(): TerminalNode[];
    Integerliteral(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class DimsContext extends ParserRuleContext {
    LeftBracket(): TerminalNode;
    RightBracket(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class FunctiondeclarationstatementContext extends ParserRuleContext {
    functionheader(): FunctionheaderContext;
    attributespecifierseq(): AttributespecifierseqContext | undefined;
    declspecifierseqwithouttype(): DeclspecifierseqwithouttypeContext | undefined;
    virtspecifierseq(): VirtspecifierseqContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class SimpledeclarationContext extends ParserRuleContext {
    declspecifierseq(): DeclspecifierseqContext | undefined;
    initdeclaratorlist(): InitdeclaratorlistContext | undefined;
    attributespecifierseq(): AttributespecifierseqContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class Static_assertdeclarationContext extends ParserRuleContext {
    Static_assert(): TerminalNode;
    constantexpression(): ConstantexpressionContext;
    Stringliteral(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class EmptydeclarationContext extends ParserRuleContext {
    Semi(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class AttributedeclarationContext extends ParserRuleContext {
    attributespecifierseq(): AttributespecifierseqContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class DeclspecifierContext extends ParserRuleContext {
    declspecifierwithouttype(): DeclspecifierwithouttypeContext | undefined;
    typespecifier(): TypespecifierContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class DeclspecifierseqContext extends ParserRuleContext {
    declspecifier(): DeclspecifierContext;
    attributespecifierseq(): AttributespecifierseqContext | undefined;
    declspecifierseq(): DeclspecifierseqContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class DeclspecifierwithouttypeContext extends ParserRuleContext {
    storageclassspecifier(): StorageclassspecifierContext | undefined;
    functionspecifier(): FunctionspecifierContext | undefined;
    Friend(): TerminalNode | undefined;
    Typedef(): TerminalNode | undefined;
    Constexpr(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class DeclspecifierseqwithouttypeContext extends ParserRuleContext {
    declspecifierwithouttype(): DeclspecifierwithouttypeContext;
    attributespecifierseq(): AttributespecifierseqContext | undefined;
    declspecifierseq(): DeclspecifierseqContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class StorageclassspecifierContext extends ParserRuleContext {
    Register(): TerminalNode | undefined;
    Static(): TerminalNode | undefined;
    Thread_local(): TerminalNode | undefined;
    Extern(): TerminalNode | undefined;
    Mutable(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class FunctionspecifierContext extends ParserRuleContext {
    Inline(): TerminalNode | undefined;
    Virtual(): TerminalNode | undefined;
    Explicit(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class TypedefnameContext extends ParserRuleContext {
    Identifier(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class TypespecifierContext extends ParserRuleContext {
    trailingtypespecifier(): TrailingtypespecifierContext | undefined;
    myclassspecifier(): MyclassspecifierContext | undefined;
    enumspecifier(): EnumspecifierContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class TrailingtypespecifierContext extends ParserRuleContext {
    simpletypespecifier(): SimpletypespecifierContext | undefined;
    elaboratedtypespecifier(): ElaboratedtypespecifierContext | undefined;
    typenamespecifier(): TypenamespecifierContext | undefined;
    cvqualifier(): CvqualifierContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class TypespecifierseqContext extends ParserRuleContext {
    typespecifier(): TypespecifierContext;
    attributespecifierseq(): AttributespecifierseqContext | undefined;
    typespecifierseq(): TypespecifierseqContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class TrailingtypespecifierseqContext extends ParserRuleContext {
    trailingtypespecifier(): TrailingtypespecifierContext;
    attributespecifierseq(): AttributespecifierseqContext | undefined;
    trailingtypespecifierseq(): TrailingtypespecifierseqContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class SimpletypespecifierContext extends ParserRuleContext {
    typename(): TypenameContext | undefined;
    nestednamespecifier(): NestednamespecifierContext | undefined;
    Template(): TerminalNode | undefined;
    simpletemplateid(): SimpletemplateidContext | undefined;
    Char(): TerminalNode | undefined;
    Char16(): TerminalNode | undefined;
    Char32(): TerminalNode | undefined;
    Wchar(): TerminalNode | undefined;
    Bool(): TerminalNode | undefined;
    Short(): TerminalNode | undefined;
    Int(): TerminalNode | undefined;
    Long(): TerminalNode | undefined;
    Signed(): TerminalNode | undefined;
    Unsigned(): TerminalNode | undefined;
    simpletypespecifier(): SimpletypespecifierContext | undefined;
    Float(): TerminalNode | undefined;
    Double(): TerminalNode | undefined;
    Void(): TerminalNode | undefined;
    Auto(): TerminalNode | undefined;
    decltypespecifier(): DecltypespecifierContext | undefined;
    File(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class TypenameContext extends ParserRuleContext {
    myclassname(): MyclassnameContext | undefined;
    enumname(): EnumnameContext | undefined;
    typedefname(): TypedefnameContext | undefined;
    simpletemplateid(): SimpletemplateidContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class DecltypespecifierContext extends ParserRuleContext {
    Decltype(): TerminalNode;
    expression(): ExpressionContext | undefined;
    Auto(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class ElaboratedtypespecifierContext extends ParserRuleContext {
    classkey(): ClasskeyContext | undefined;
    Identifier(): TerminalNode | undefined;
    attributespecifierseq(): AttributespecifierseqContext | undefined;
    nestednamespecifier(): NestednamespecifierContext | undefined;
    simpletemplateid(): SimpletemplateidContext | undefined;
    Template(): TerminalNode | undefined;
    Enum(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class EnumnameContext extends ParserRuleContext {
    Identifier(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class EnumspecifierContext extends ParserRuleContext {
    enumhead(): EnumheadContext;
    enumeratorlist(): EnumeratorlistContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class EnumheadContext extends ParserRuleContext {
    enumkey(): EnumkeyContext;
    attributespecifierseq(): AttributespecifierseqContext | undefined;
    Identifier(): TerminalNode | undefined;
    enumbase(): EnumbaseContext | undefined;
    nestednamespecifier(): NestednamespecifierContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class OpaqueenumdeclarationContext extends ParserRuleContext {
    enumkey(): EnumkeyContext;
    Identifier(): TerminalNode;
    attributespecifierseq(): AttributespecifierseqContext | undefined;
    enumbase(): EnumbaseContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class EnumkeyContext extends ParserRuleContext {
    Enum(): TerminalNode;
    Class(): TerminalNode | undefined;
    Struct(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class EnumbaseContext extends ParserRuleContext {
    typespecifierseq(): TypespecifierseqContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class EnumeratorlistContext extends ParserRuleContext {
    enumeratordefinition(): EnumeratordefinitionContext;
    enumeratorlist(): EnumeratorlistContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class EnumeratordefinitionContext extends ParserRuleContext {
    enumerator(): EnumeratorContext;
    constantexpression(): ConstantexpressionContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class EnumeratorContext extends ParserRuleContext {
    Identifier(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class NamespacenameContext extends ParserRuleContext {
    originalnamespacename(): OriginalnamespacenameContext | undefined;
    namespacealias(): NamespacealiasContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class OriginalnamespacenameContext extends ParserRuleContext {
    Identifier(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class NamespacedefinitionContext extends ParserRuleContext {
    namednamespacedefinition(): NamednamespacedefinitionContext | undefined;
    unnamednamespacedefinition(): UnnamednamespacedefinitionContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class NamednamespacedefinitionContext extends ParserRuleContext {
    originalnamespacedefinition(): OriginalnamespacedefinitionContext | undefined;
    extensionnamespacedefinition(): ExtensionnamespacedefinitionContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class OriginalnamespacedefinitionContext extends ParserRuleContext {
    Namespace(): TerminalNode;
    Identifier(): TerminalNode;
    namespacebody(): NamespacebodyContext;
    Inline(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class ExtensionnamespacedefinitionContext extends ParserRuleContext {
    Namespace(): TerminalNode;
    originalnamespacename(): OriginalnamespacenameContext;
    namespacebody(): NamespacebodyContext;
    Inline(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class UnnamednamespacedefinitionContext extends ParserRuleContext {
    Namespace(): TerminalNode;
    namespacebody(): NamespacebodyContext;
    Inline(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class NamespacebodyContext extends ParserRuleContext {
    declarationseq(): DeclarationseqContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class NamespacealiasContext extends ParserRuleContext {
    Identifier(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class NamespacealiasdefinitionContext extends ParserRuleContext {
    Namespace(): TerminalNode;
    Identifier(): TerminalNode;
    qualifiednamespacespecifier(): QualifiednamespacespecifierContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class QualifiednamespacespecifierContext extends ParserRuleContext {
    namespacename(): NamespacenameContext;
    nestednamespecifier(): NestednamespecifierContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class UsingdeclarationContext extends ParserRuleContext {
    Using(): TerminalNode;
    nestednamespecifier(): NestednamespecifierContext | undefined;
    unqualifiedid(): UnqualifiedidContext;
    Typename(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class UsingdirectiveContext extends ParserRuleContext {
    Using(): TerminalNode;
    Namespace(): TerminalNode;
    namespacename(): NamespacenameContext;
    attributespecifierseq(): AttributespecifierseqContext | undefined;
    nestednamespecifier(): NestednamespecifierContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class AsmdefinitionContext extends ParserRuleContext {
    Asm(): TerminalNode;
    Stringliteral(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class LinkagespecificationContext extends ParserRuleContext {
    Extern(): TerminalNode;
    Stringliteral(): TerminalNode;
    declarationseq(): DeclarationseqContext | undefined;
    declaration(): DeclarationContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class AttributespecifierseqContext extends ParserRuleContext {
    attributespecifier(): AttributespecifierContext;
    attributespecifierseq(): AttributespecifierseqContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class AttributespecifierContext extends ParserRuleContext {
    attributelist(): AttributelistContext | undefined;
    alignmentspecifier(): AlignmentspecifierContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class AlignmentspecifierContext extends ParserRuleContext {
    Alignas(): TerminalNode;
    typeid(): TypeidContext | undefined;
    constantexpression(): ConstantexpressionContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class AttributelistContext extends ParserRuleContext {
    attribute(): AttributeContext | undefined;
    attributelist(): AttributelistContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class AttributeContext extends ParserRuleContext {
    attributetoken(): AttributetokenContext;
    attributeargumentclause(): AttributeargumentclauseContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class AttributetokenContext extends ParserRuleContext {
    Identifier(): TerminalNode | undefined;
    attributescopedtoken(): AttributescopedtokenContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class AttributescopedtokenContext extends ParserRuleContext {
    attributenamespace(): AttributenamespaceContext;
    Identifier(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class AttributenamespaceContext extends ParserRuleContext {
    Identifier(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class AttributeargumentclauseContext extends ParserRuleContext {
    balancedtokenseq(): BalancedtokenseqContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class BalancedtokenseqContext extends ParserRuleContext {
    balancedtoken(): BalancedtokenContext | undefined;
    balancedtokenseq(): BalancedtokenseqContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class BalancedtokenContext extends ParserRuleContext {
    balancedtokenseq(): BalancedtokenseqContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class InitdeclaratorlistContext extends ParserRuleContext {
    initdeclarator(): InitdeclaratorContext[];
    initdeclarator(i: number): InitdeclaratorContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class InitdeclaratorContext extends ParserRuleContext {
    declarator(): DeclaratorContext;
    initializer(): InitializerContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class DeclaratorContext extends ParserRuleContext {
    ptrdeclarator(): PtrdeclaratorContext | undefined;
    noptrdeclarator(): NoptrdeclaratorContext | undefined;
    parametersandqualifiers(): ParametersandqualifiersContext | undefined;
    trailingreturntype(): TrailingreturntypeContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class PtrdeclaratorContext extends ParserRuleContext {
    noptrdeclarator(): NoptrdeclaratorContext;
    ptroperator(): PtroperatorContext[];
    ptroperator(i: number): PtroperatorContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class NoptrdeclaratorContext extends ParserRuleContext {
    declaratorid(): DeclaratoridContext | undefined;
    attributespecifierseq(): AttributespecifierseqContext | undefined;
    noptrdeclarator(): NoptrdeclaratorContext | undefined;
    parametersandqualifiers(): ParametersandqualifiersContext | undefined;
    constantexpression(): ConstantexpressionContext | undefined;
    ptrdeclarator(): PtrdeclaratorContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class ParametersandqualifiersContext extends ParserRuleContext {
    parameterdeclarationclause(): ParameterdeclarationclauseContext;
    cvqualifierseq(): CvqualifierseqContext | undefined;
    refqualifier(): RefqualifierContext | undefined;
    exceptionspecification(): ExceptionspecificationContext | undefined;
    attributespecifierseq(): AttributespecifierseqContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class TrailingreturntypeContext extends ParserRuleContext {
    trailingtypespecifierseq(): TrailingtypespecifierseqContext;
    abstractdeclarator(): AbstractdeclaratorContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class PtroperatorContext extends ParserRuleContext {
    attributespecifierseq(): AttributespecifierseqContext | undefined;
    cvqualifierseq(): CvqualifierseqContext | undefined;
    nestednamespecifier(): NestednamespecifierContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class CvqualifierseqContext extends ParserRuleContext {
    cvqualifier(): CvqualifierContext;
    cvqualifierseq(): CvqualifierseqContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class CvqualifierContext extends ParserRuleContext {
    Const(): TerminalNode | undefined;
    Volatile(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class RefqualifierContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class DeclaratoridContext extends ParserRuleContext {
    idexpression(): IdexpressionContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class TypeidContext extends ParserRuleContext {
    typespecifierseq(): TypespecifierseqContext;
    abstractdeclarator(): AbstractdeclaratorContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class AbstractdeclaratorContext extends ParserRuleContext {
    ptrabstractdeclarator(): PtrabstractdeclaratorContext | undefined;
    parametersandqualifiers(): ParametersandqualifiersContext | undefined;
    trailingreturntype(): TrailingreturntypeContext | undefined;
    noptrabstractdeclarator(): NoptrabstractdeclaratorContext | undefined;
    abstractpackdeclarator(): AbstractpackdeclaratorContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class PtrabstractdeclaratorContext extends ParserRuleContext {
    noptrabstractdeclarator(): NoptrabstractdeclaratorContext | undefined;
    ptroperator(): PtroperatorContext | undefined;
    ptrabstractdeclarator(): PtrabstractdeclaratorContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class NoptrabstractdeclaratorContext extends ParserRuleContext {
    noptrabstractdeclarator(): NoptrabstractdeclaratorContext | undefined;
    parametersandqualifiers(): ParametersandqualifiersContext | undefined;
    constantexpression(): ConstantexpressionContext | undefined;
    attributespecifierseq(): AttributespecifierseqContext | undefined;
    ptrabstractdeclarator(): PtrabstractdeclaratorContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class AbstractpackdeclaratorContext extends ParserRuleContext {
    noptrabstractpackdeclarator(): NoptrabstractpackdeclaratorContext | undefined;
    ptroperator(): PtroperatorContext | undefined;
    abstractpackdeclarator(): AbstractpackdeclaratorContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class NoptrabstractpackdeclaratorContext extends ParserRuleContext {
    noptrabstractpackdeclarator(): NoptrabstractpackdeclaratorContext | undefined;
    parametersandqualifiers(): ParametersandqualifiersContext | undefined;
    constantexpression(): ConstantexpressionContext | undefined;
    attributespecifierseq(): AttributespecifierseqContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class ParameterdeclarationclauseContext extends ParserRuleContext {
    parameterdeclarationlist(): ParameterdeclarationlistContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class ParameterdeclarationlistContext extends ParserRuleContext {
    parameterdeclaration(): ParameterdeclarationContext;
    parameterdeclarationlist(): ParameterdeclarationlistContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class ParameterdeclarationContext extends ParserRuleContext {
    typespecifier(): TypespecifierContext;
    attributespecifierseq(): AttributespecifierseqContext | undefined;
    declspecifierseqwithouttype(): DeclspecifierseqwithouttypeContext | undefined;
    variableDeclaratorList(): VariableDeclaratorListContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class FunctiondefinitionContext extends ParserRuleContext {
    functionheader(): FunctionheaderContext;
    functionbody(): FunctionbodyContext;
    attributespecifierseq(): AttributespecifierseqContext | undefined;
    declspecifierseqwithouttype(): DeclspecifierseqwithouttypeContext | undefined;
    virtspecifierseq(): VirtspecifierseqContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class FunctionheaderContext extends ParserRuleContext {
    functiondeclarator(): FunctiondeclaratorContext;
    typespecifier(): TypespecifierContext | undefined;
    ptroperator(): PtroperatorContext[];
    ptroperator(i: number): PtroperatorContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class FunctiondeclaratorContext extends ParserRuleContext {
    declaratorid(): DeclaratoridContext;
    parameterdeclarationclause(): ParameterdeclarationclauseContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class FunctionbodyContext extends ParserRuleContext {
    compoundstatement(): CompoundstatementContext | undefined;
    ctorinitializer(): CtorinitializerContext | undefined;
    functiontryblock(): FunctiontryblockContext | undefined;
    Default(): TerminalNode | undefined;
    Delete(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class InitializerContext extends ParserRuleContext {
    braceorequalinitializer(): BraceorequalinitializerContext | undefined;
    expressionlist(): ExpressionlistContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class BraceorequalinitializerContext extends ParserRuleContext {
    initializerclause(): InitializerclauseContext | undefined;
    bracedinitlist(): BracedinitlistContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class InitializerclauseContext extends ParserRuleContext {
    assignmentexpression(): AssignmentexpressionContext | undefined;
    bracedinitlist(): BracedinitlistContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class InitializerlistContext extends ParserRuleContext {
    initializerclause(): InitializerclauseContext[];
    initializerclause(i: number): InitializerclauseContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class BracedinitlistContext extends ParserRuleContext {
    initializerlist(): InitializerlistContext | undefined;
    Comma(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class MyclassnameContext extends ParserRuleContext {
    Identifier(): TerminalNode | undefined;
    simpletemplateid(): SimpletemplateidContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class ClassspecifierContext extends ParserRuleContext {
    classhead(): ClassheadContext;
    classbody(): ClassbodyContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class ClassbodyContext extends ParserRuleContext {
    memberspecification(): MemberspecificationContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class ClassheadContext extends ParserRuleContext {
    classkey(): ClasskeyContext;
    classheadname(): ClassheadnameContext | undefined;
    attributespecifierseq(): AttributespecifierseqContext | undefined;
    nestednamespecifier(): NestednamespecifierContext | undefined;
    classvirtspecifier(): ClassvirtspecifierContext | undefined;
    baseclause(): BaseclauseContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class ClassheadnameContext extends ParserRuleContext {
    myclassname(): MyclassnameContext;
    nestednamespecifier(): NestednamespecifierContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class ClassvirtspecifierContext extends ParserRuleContext {
    Final(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class ClasskeyContext extends ParserRuleContext {
    Class(): TerminalNode | undefined;
    Struct(): TerminalNode | undefined;
    Union(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class MemberspecificationContext extends ParserRuleContext {
    memberdeclaration(): MemberdeclarationContext | undefined;
    memberspecification(): MemberspecificationContext | undefined;
    accessspecifier(): AccessspecifierContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class MemberdeclarationContext extends ParserRuleContext {
    membervariabledeclarationstatement(): MembervariabledeclarationstatementContext | undefined;
    functiondefinition(): FunctiondefinitionContext | undefined;
    usingdeclaration(): UsingdeclarationContext | undefined;
    static_assertdeclaration(): Static_assertdeclarationContext | undefined;
    templatedeclaration(): TemplatedeclarationContext | undefined;
    aliasdeclaration(): AliasdeclarationContext | undefined;
    emptydeclaration(): EmptydeclarationContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class MembervariabledeclarationstatementContext extends ParserRuleContext {
    membervariabledeclaration(): MembervariabledeclarationContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class MembervariabledeclarationContext extends ParserRuleContext {
    typespecifier(): TypespecifierContext;
    attributespecifierseq(): AttributespecifierseqContext | undefined;
    declspecifierseqwithouttype(): DeclspecifierseqwithouttypeContext | undefined;
    ptroperator(): PtroperatorContext[];
    ptroperator(i: number): PtroperatorContext;
    memberdeclaratorlist(): MemberdeclaratorlistContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class MemberdeclaratorlistContext extends ParserRuleContext {
    memberdeclarator(): MemberdeclaratorContext;
    memberdeclaratorlist(): MemberdeclaratorlistContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class MemberdeclaratorContext extends ParserRuleContext {
    declaratorid(): DeclaratoridContext | undefined;
    virtspecifierseq(): VirtspecifierseqContext | undefined;
    purespecifier(): PurespecifierContext | undefined;
    initializerclause(): InitializerclauseContext | undefined;
    bracedinitlist(): BracedinitlistContext | undefined;
    constantexpression(): ConstantexpressionContext | undefined;
    Identifier(): TerminalNode | undefined;
    attributespecifierseq(): AttributespecifierseqContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class VirtspecifierseqContext extends ParserRuleContext {
    virtspecifier(): VirtspecifierContext;
    virtspecifierseq(): VirtspecifierseqContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class VirtspecifierContext extends ParserRuleContext {
    Override(): TerminalNode | undefined;
    Final(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class PurespecifierContext extends ParserRuleContext {
    _val: Token;
    Assign(): TerminalNode;
    Octalliteral(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class BaseclauseContext extends ParserRuleContext {
    basespecifierlist(): BasespecifierlistContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class BasespecifierlistContext extends ParserRuleContext {
    basespecifier(): BasespecifierContext;
    basespecifierlist(): BasespecifierlistContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class BasespecifierContext extends ParserRuleContext {
    basetypespecifier(): BasetypespecifierContext;
    attributespecifierseq(): AttributespecifierseqContext | undefined;
    Virtual(): TerminalNode | undefined;
    accessspecifier(): AccessspecifierContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class ClassordecltypeContext extends ParserRuleContext {
    myclassname(): MyclassnameContext | undefined;
    nestednamespecifier(): NestednamespecifierContext | undefined;
    decltypespecifier(): DecltypespecifierContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class BasetypespecifierContext extends ParserRuleContext {
    classordecltype(): ClassordecltypeContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class AccessspecifierContext extends ParserRuleContext {
    Private(): TerminalNode | undefined;
    Protected(): TerminalNode | undefined;
    Public(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class ConversionfunctionidContext extends ParserRuleContext {
    Operator(): TerminalNode;
    conversiontypeid(): ConversiontypeidContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class ConversiontypeidContext extends ParserRuleContext {
    typespecifierseq(): TypespecifierseqContext;
    conversiondeclarator(): ConversiondeclaratorContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class ConversiondeclaratorContext extends ParserRuleContext {
    ptroperator(): PtroperatorContext;
    conversiondeclarator(): ConversiondeclaratorContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class CtorinitializerContext extends ParserRuleContext {
    meminitializerlist(): MeminitializerlistContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class MeminitializerlistContext extends ParserRuleContext {
    meminitializer(): MeminitializerContext;
    meminitializerlist(): MeminitializerlistContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class MeminitializerContext extends ParserRuleContext {
    meminitializerid(): MeminitializeridContext;
    expressionlist(): ExpressionlistContext | undefined;
    bracedinitlist(): BracedinitlistContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class MeminitializeridContext extends ParserRuleContext {
    classordecltype(): ClassordecltypeContext | undefined;
    Identifier(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class OperatorfunctionidContext extends ParserRuleContext {
    Operator(): TerminalNode;
    operator(): OperatorContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class LiteraloperatoridContext extends ParserRuleContext {
    Operator(): TerminalNode;
    Stringliteral(): TerminalNode | undefined;
    Identifier(): TerminalNode | undefined;
    Userdefinedstringliteral(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class TemplatedeclarationContext extends ParserRuleContext {
    Template(): TerminalNode;
    templateparameterlist(): TemplateparameterlistContext;
    declaration(): DeclarationContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class TemplateparameterlistContext extends ParserRuleContext {
    templateparameter(): TemplateparameterContext;
    templateparameterlist(): TemplateparameterlistContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class TemplateparameterContext extends ParserRuleContext {
    typeparameter(): TypeparameterContext | undefined;
    parameterdeclaration(): ParameterdeclarationContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class TypeparameterContext extends ParserRuleContext {
    Class(): TerminalNode | undefined;
    Identifier(): TerminalNode | undefined;
    typeid(): TypeidContext | undefined;
    Typename(): TerminalNode | undefined;
    Template(): TerminalNode | undefined;
    templateparameterlist(): TemplateparameterlistContext | undefined;
    idexpression(): IdexpressionContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class SimpletemplateidContext extends ParserRuleContext {
    templatename(): TemplatenameContext;
    templateargumentlist(): TemplateargumentlistContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class TemplateidContext extends ParserRuleContext {
    simpletemplateid(): SimpletemplateidContext | undefined;
    operatorfunctionid(): OperatorfunctionidContext | undefined;
    templateargumentlist(): TemplateargumentlistContext | undefined;
    literaloperatorid(): LiteraloperatoridContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class TemplatenameContext extends ParserRuleContext {
    Identifier(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class TemplateargumentlistContext extends ParserRuleContext {
    templateargument(): TemplateargumentContext;
    templateargumentlist(): TemplateargumentlistContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class TemplateargumentContext extends ParserRuleContext {
    constantexpression(): ConstantexpressionContext | undefined;
    typeid(): TypeidContext | undefined;
    idexpression(): IdexpressionContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class TypenamespecifierContext extends ParserRuleContext {
    Typename(): TerminalNode;
    nestednamespecifier(): NestednamespecifierContext;
    Identifier(): TerminalNode | undefined;
    simpletemplateid(): SimpletemplateidContext | undefined;
    Template(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class ExplicitinstantiationContext extends ParserRuleContext {
    Template(): TerminalNode;
    declaration(): DeclarationContext;
    Extern(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class ExplicitspecializationContext extends ParserRuleContext {
    Template(): TerminalNode;
    declaration(): DeclarationContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class TryblockContext extends ParserRuleContext {
    Try(): TerminalNode;
    compoundstatement(): CompoundstatementContext;
    handlerseq(): HandlerseqContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class FunctiontryblockContext extends ParserRuleContext {
    Try(): TerminalNode;
    compoundstatement(): CompoundstatementContext;
    handlerseq(): HandlerseqContext;
    ctorinitializer(): CtorinitializerContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class HandlerseqContext extends ParserRuleContext {
    handler(): HandlerContext;
    handlerseq(): HandlerseqContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class HandlerContext extends ParserRuleContext {
    Catch(): TerminalNode;
    exceptiondeclaration(): ExceptiondeclarationContext;
    compoundstatement(): CompoundstatementContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class ExceptiondeclarationContext extends ParserRuleContext {
    typespecifierseq(): TypespecifierseqContext | undefined;
    declarator(): DeclaratorContext | undefined;
    attributespecifierseq(): AttributespecifierseqContext | undefined;
    abstractdeclarator(): AbstractdeclaratorContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class ThrowexpressionContext extends ParserRuleContext {
    Throw(): TerminalNode;
    assignmentexpression(): AssignmentexpressionContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class ExceptionspecificationContext extends ParserRuleContext {
    dynamicexceptionspecification(): DynamicexceptionspecificationContext | undefined;
    noexceptspecification(): NoexceptspecificationContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class DynamicexceptionspecificationContext extends ParserRuleContext {
    Throw(): TerminalNode;
    typeidlist(): TypeidlistContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class TypeidlistContext extends ParserRuleContext {
    typeid(): TypeidContext;
    typeidlist(): TypeidlistContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class NoexceptspecificationContext extends ParserRuleContext {
    Noexcept(): TerminalNode;
    constantexpression(): ConstantexpressionContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class RightShiftContext extends ParserRuleContext {
    Greater(): TerminalNode[];
    Greater(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class RightShiftAssignContext extends ParserRuleContext {
    Greater(): TerminalNode[];
    Greater(i: number): TerminalNode;
    Assign(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class OperatorContext extends ParserRuleContext {
    New(): TerminalNode | undefined;
    Delete(): TerminalNode | undefined;
    rightShift(): RightShiftContext | undefined;
    rightShiftAssign(): RightShiftAssignContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class LiteralContext extends ParserRuleContext {
    integerliteral(): IntegerliteralContext | undefined;
    characterliteral(): CharacterliteralContext | undefined;
    floatingliteral(): FloatingliteralContext | undefined;
    stringliteral(): StringliteralContext | undefined;
    booleanliteral(): BooleanliteralContext | undefined;
    pointerliteral(): PointerliteralContext | undefined;
    userdefinedliteral(): UserdefinedliteralContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class IntegerliteralContext extends ParserRuleContext {
    Integerliteral(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class CharacterliteralContext extends ParserRuleContext {
    Characterliteral(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class FloatingliteralContext extends ParserRuleContext {
    Floatingliteral(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class StringliteralContext extends ParserRuleContext {
    Stringliteral(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class BooleanliteralContext extends ParserRuleContext {
    Booleanliteral(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class PointerliteralContext extends ParserRuleContext {
    Nullptr(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
export declare class UserdefinedliteralContext extends ParserRuleContext {
    Userdefinedintegerliteral(): TerminalNode | undefined;
    Userdefinedfloatingliteral(): TerminalNode | undefined;
    Userdefinedstringliteral(): TerminalNode | undefined;
    Userdefinedcharacterliteral(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: CPP14Visitor<Result>): Result;
}
