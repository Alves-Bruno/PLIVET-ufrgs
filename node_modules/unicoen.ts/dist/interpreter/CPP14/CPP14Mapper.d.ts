import { ParserRuleContext } from 'antlr4ts';
import { CPP14Visitor } from './CPP14Visitor';
import { TranslationunitContext, PrimaryexpressionContext, IdentexpressionContext, IdexpressionlapperContext, FunctioncallexpressionContext, PostfixexpressionContext, ExpressionlistContext, BinaryexpressionContext, UnaryexpressionContext, TypeidlapperContext, CastexpressionContext, PmexpressionContext, MultiplicativeexpressionContext, AdditiveexpressionContext, ShiftexpressionContext, RelationalexpressionContext, EqualityexpressionContext, AndexpressionContext, ExclusiveorexpressionContext, InclusiveorexpressionContext, LogicalandexpressionContext, LogicalorexpressionContext, ConditionalexpressionContext, AssignmentexpressionContext, ExpressionContext, SwitchunitstatementContext, StatementWithoutLabeldstatementseqContext, ExpressionstatementContext, CompoundstatementContext, StatementseqContext, SelectionstatementContext, SwitchstatementContext, SwitchunitseqContext, WhilestatementContext, DowhilestatementContext, IterationstatementContext, EnhancedForStatementContext, BreakStatementContext, ContinueStatementContext, ReturnStatementContext, DeclarationseqContext, MyclassbodyContext, MyclassspecifierContext, MyclassspecifierstatementContext, MyclassheadContext, VariabledeclarationstatementContext, VariabledeclarationContext, StructspecifierContext, VariableDeclaratorListContext, VariableDeclaratorContext, DimsContext, FunctiondeclarationstatementContext, EmptydeclarationContext, SimpletypespecifierContext, ElaboratedtypespecifierContext, InitdeclaratorlistContext, DeclaratoridContext, ParameterdeclarationclauseContext, ParameterdeclarationlistContext, ParameterdeclarationContext, FunctiondefinitionContext, FunctionheaderContext, FunctiondeclaratorContext, FunctionbodyContext, InitializerlistContext, BracedinitlistContext, MyclassnameContext, ClassspecifierContext, ClassbodyContext, ClassheadContext, MemberspecificationContext, MembervariabledeclarationstatementContext, MembervariabledeclarationContext, MemberdeclaratorlistContext, MemberdeclaratorContext, IntegerliteralContext, CharacterliteralContext, FloatingliteralContext, StringliteralContext, BooleanliteralContext } from './CPP14Parser';
import { UniParam } from '../../node/UniParam';
import { UniExpr } from '../../node/UniExpr';
import { UniBoolLiteral } from '../../node/UniBoolLiteral';
import { UniCharacterLiteral } from '../../node/UniCharacterLiteral';
import { UniDoubleLiteral } from '../../node/UniDoubleLiteral';
import { UniIntLiteral } from '../../node/UniIntLiteral';
import { UniStatement } from '../../node/UniStatement';
import { UniStringLiteral } from '../../node/UniStringLiteral';
import { UniVariableDec } from '../../node/UniVariableDec';
import { UniVariableDef } from '../../node/UniVariableDef';
import { Mapper } from '../mapper/Mapper';
import '../../node_helper/Extension';
export declare class CPP14Mapper extends Mapper implements CPP14Visitor<any> {
    preProcess(text: string): string;
    parseToANTLRTree(code: any): ParserRuleContext;
    visitTranslationunit(ctx: TranslationunitContext): any;
    visitPrimaryexpression(ctx: PrimaryexpressionContext): any;
    visitIdentexpression(ctx: IdentexpressionContext): any;
    visitIdexpressionlapper(ctx: IdexpressionlapperContext): any;
    visitFunctioncallexpression(ctx: FunctioncallexpressionContext): any;
    visitPostfixexpression(ctx: PostfixexpressionContext): any;
    visitExpressionlist(ctx: ExpressionlistContext): any;
    visitBinaryexpression(ctx: BinaryexpressionContext): any;
    visitUnaryexpression(ctx: UnaryexpressionContext): any;
    visitTypeidlapper(ctx: TypeidlapperContext): any;
    visitCastexpression(ctx: CastexpressionContext): any;
    visitPmexpression(ctx: PmexpressionContext): any;
    visitMultiplicativeexpression(ctx: MultiplicativeexpressionContext): any;
    visitAdditiveexpression(ctx: AdditiveexpressionContext): any;
    visitShiftexpression(ctx: ShiftexpressionContext): any;
    visitRelationalexpression(ctx: RelationalexpressionContext): any;
    visitEqualityexpression(ctx: EqualityexpressionContext): any;
    visitAndexpression(ctx: AndexpressionContext): any;
    visitExclusiveorexpression(ctx: ExclusiveorexpressionContext): any;
    visitInclusiveorexpression(ctx: InclusiveorexpressionContext): any;
    visitLogicalandexpression(ctx: LogicalandexpressionContext): any;
    visitLogicalorexpression(ctx: LogicalorexpressionContext): any;
    visitConditionalexpression(ctx: ConditionalexpressionContext): any;
    visitAssignmentexpression(ctx: AssignmentexpressionContext): any;
    visitExpression(ctx: ExpressionContext): any;
    visitSwitchunitstatement(ctx: SwitchunitstatementContext): any;
    visitStatementWithoutLabeldstatementseq(ctx: StatementWithoutLabeldstatementseqContext): (typeof UniExpr)[];
    visitExpressionstatement(ctx: ExpressionstatementContext): any;
    visitCompoundstatement(ctx: CompoundstatementContext): any;
    visitStatementseq(ctx: StatementseqContext): (typeof UniExpr)[];
    visitSelectionstatement(ctx: SelectionstatementContext): any;
    visitSwitchstatement(ctx: SwitchstatementContext): any;
    visitSwitchunitseq(ctx: SwitchunitseqContext): (typeof UniStatement)[];
    visitWhilestatement(ctx: WhilestatementContext): any;
    visitDowhilestatement(ctx: DowhilestatementContext): any;
    visitIterationstatement(ctx: IterationstatementContext): any;
    visitEnhancedForStatement(ctx: EnhancedForStatementContext): any;
    visitBreakStatement(ctx: BreakStatementContext): any;
    visitContinueStatement(ctx: ContinueStatementContext): any;
    visitReturnStatement(ctx: ReturnStatementContext): any;
    visitDeclarationseq(ctx: DeclarationseqContext): (typeof UniExpr)[];
    visitMyclassbody(ctx: MyclassbodyContext): (typeof UniVariableDec)[];
    visitMyclassspecifier(ctx: MyclassspecifierContext): any;
    visitMyclassspecifierstatement(ctx: MyclassspecifierstatementContext): any;
    visitMyclasshead(ctx: MyclassheadContext): any;
    visitVariabledeclarationstatement(ctx: VariabledeclarationstatementContext): any[];
    visitVariabledeclaration(ctx: VariabledeclarationContext): any;
    visitStructspecifier(ctx: StructspecifierContext): any;
    visitVariableDeclaratorList(ctx: VariableDeclaratorListContext): (typeof UniVariableDef)[];
    visitVariableDeclarator(ctx: VariableDeclaratorContext): any;
    visitDims(ctx: DimsContext): any;
    visitFunctiondeclarationstatement(ctx: FunctiondeclarationstatementContext): any;
    visitEmptydeclaration(ctx: EmptydeclarationContext): any;
    visitSimpletypespecifier(ctx: SimpletypespecifierContext): any;
    visitElaboratedtypespecifier(ctx: ElaboratedtypespecifierContext): any[] | Map<string, any>;
    visitInitdeclaratorlist(ctx: InitdeclaratorlistContext): Map<string, any>;
    visitDeclaratorid(ctx: DeclaratoridContext): any;
    visitParameterdeclarationclause(ctx: ParameterdeclarationclauseContext): (typeof UniParam)[];
    visitParameterdeclarationlist(ctx: ParameterdeclarationlistContext): (typeof UniParam)[];
    visitParameterdeclaration(ctx: ParameterdeclarationContext): any;
    visitFunctiondefinition(ctx: FunctiondefinitionContext): any;
    visitFunctionheader(ctx: FunctionheaderContext): any;
    visitFunctiondeclarator(ctx: FunctiondeclaratorContext): any;
    visitFunctionbody(ctx: FunctionbodyContext): any;
    visitInitializerlist(ctx: InitializerlistContext): (typeof UniExpr)[];
    visitBracedinitlist(ctx: BracedinitlistContext): any;
    visitMyclassname(ctx: MyclassnameContext): any;
    visitClassspecifier(ctx: ClassspecifierContext): any;
    visitClassbody(ctx: ClassbodyContext): (typeof UniVariableDec)[];
    visitClasshead(ctx: ClassheadContext): any;
    visitMemberspecification(ctx: MemberspecificationContext): (typeof UniVariableDec)[];
    visitMembervariabledeclarationstatement(ctx: MembervariabledeclarationstatementContext): any;
    visitMembervariabledeclaration(ctx: MembervariabledeclarationContext): any;
    visitMemberdeclaratorlist(ctx: MemberdeclaratorlistContext): (typeof UniVariableDef)[];
    visitMemberdeclarator(ctx: MemberdeclaratorContext): any;
    visitIntegerliteral(ctx: IntegerliteralContext): UniIntLiteral;
    visitCharacterliteral(ctx: CharacterliteralContext): UniCharacterLiteral;
    visitFloatingliteral(ctx: FloatingliteralContext): UniDoubleLiteral;
    visitStringliteral(ctx: StringliteralContext): UniStringLiteral;
    visitBooleanliteral(ctx: BooleanliteralContext): UniBoolLiteral;
}
