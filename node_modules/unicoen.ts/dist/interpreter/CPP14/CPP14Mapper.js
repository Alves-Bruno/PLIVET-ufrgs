"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CPP14Mapper = void 0;
// tslint:disable
const antlr4ts_1 = require("antlr4ts");
const TerminalNode_1 = require("antlr4ts/tree/TerminalNode");
const CPP14Lexer_1 = require("./CPP14Lexer");
const CPP14Parser_1 = require("./CPP14Parser");
const UniParam_1 = require("../../node/UniParam");
const UniEnhancedFor_1 = require("../../node/UniEnhancedFor");
const UniExpr_1 = require("../../node/UniExpr");
const UniArray_1 = require("../../node/UniArray");
const UniBinOp_1 = require("../../node/UniBinOp");
const UniBlock_1 = require("../../node/UniBlock");
const UniBoolLiteral_1 = require("../../node/UniBoolLiteral");
const UniBreak_1 = require("../../node/UniBreak");
const UniCharacterLiteral_1 = require("../../node/UniCharacterLiteral");
const UniCast_1 = require("../../node/UniCast");
const UniContinue_1 = require("../../node/UniContinue");
const UniClassDec_1 = require("../../node/UniClassDec");
const UniDoubleLiteral_1 = require("../../node/UniDoubleLiteral");
const UniDoWhile_1 = require("../../node/UniDoWhile");
const UniEmptyStatement_1 = require("../../node/UniEmptyStatement");
const UniFunctionDec_1 = require("../../node/UniFunctionDec");
const UniFor_1 = require("../../node/UniFor");
const UniIdent_1 = require("../../node/UniIdent");
const UniIf_1 = require("../../node/UniIf");
const UniIntLiteral_1 = require("../../node/UniIntLiteral");
const UniMethodCall_1 = require("../../node/UniMethodCall");
const UniWhile_1 = require("../../node/UniWhile");
const UniUnaryOp_1 = require("../../node/UniUnaryOp");
const UniTernaryOp_1 = require("../../node/UniTernaryOp");
const UniStatement_1 = require("../../node/UniStatement");
const UniStringLiteral_1 = require("../../node/UniStringLiteral");
const UniReturn_1 = require("../../node/UniReturn");
const UniVariableDec_1 = require("../../node/UniVariableDec");
const UniVariableDef_1 = require("../../node/UniVariableDef");
const UniSwitchUnit_1 = require("../../node/UniSwitchUnit");
const UniSwitch_1 = require("../../node/UniSwitch");
const SyntaxErrorListener_1 = require("../mapper/SyntaxErrorListener");
const Mapper_1 = require("../mapper/Mapper");
require("../../node_helper/Extension");
class CPP14Mapper extends Mapper_1.Mapper {
    preProcess(text) {
        return text;
    }
    parseToANTLRTree(code) {
        const preProcessedCode = this.preProcess(code);
        const chars = new antlr4ts_1.ANTLRInputStream(preProcessedCode);
        const lexer = new CPP14Lexer_1.CPP14Lexer(chars);
        const tokens = new antlr4ts_1.CommonTokenStream(lexer);
        const parser = new CPP14Parser_1.CPP14Parser(tokens);
        parser.addErrorListener(new SyntaxErrorListener_1.SyntaxErrorListener());
        const tree = parser.translationunit();
        this.parser = parser;
        return tree;
    }
    visitTranslationunit(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const body = [];
        map.set('body', body);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 476:
                        {
                            body.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        const node = this.castTo(map, UniBlock_1.UniBlock);
        return node;
    }
    visitPrimaryexpression(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const ret = [];
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 479:
                        {
                            ret.push(this.visit(it));
                        }
                        break;
                    case 482:
                        {
                            ret.push(this.visit(it));
                        }
                        break;
                    case 485:
                        {
                            ret.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        if (!ret.isEmpty()) {
            return ret;
        }
        const node = this.castTo(map, UniUnaryOp_1.UniUnaryOp);
        return node;
    }
    visitIdentexpression(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const name = [];
        map.set('name', name);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 493:
                        {
                            name.push(this.visit(it));
                        }
                        break;
                    case 494:
                        {
                            name.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        const node = this.castTo(map, UniIdent_1.UniIdent);
        return node;
    }
    visitIdexpressionlapper(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const name = [];
        map.set('name', name);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 612:
                        {
                            name.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        const node = this.castTo(map, UniIdent_1.UniIdent);
        return node;
    }
    visitFunctioncallexpression(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const args = [];
        map.set('args', args);
        const methodName = [];
        map.set('methodName', methodName);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 614:
                        {
                            methodName.push(this.visit(it));
                        }
                        break;
                    case 616:
                        {
                            args.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        const node = this.castTo(map, UniMethodCall_1.UniMethodCall);
        return node;
    }
    visitPostfixexpression(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const ret = [];
        const left = [];
        map.set('left', left);
        const right = [];
        map.set('right', right);
        const operator = [];
        map.set('operator', operator);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 622:
                        {
                            ret.push(this.visit(it));
                        }
                        break;
                    case 623:
                        {
                            ret.push(this.visit(it));
                        }
                        break;
                    case 36:
                        {
                            left.push(this.visit(it));
                        }
                        break;
                    case 690:
                        {
                            right.push(this.visit(it));
                        }
                        break;
                    case 703:
                        {
                            right.push(this.visit(it));
                        }
                        break;
                    case 709:
                        {
                            right.push(this.visit(it));
                        }
                        break;
                    case 712:
                        {
                            right.push(this.visit(it));
                        }
                        break;
                    case 715:
                        {
                            right.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    case CPP14Parser_1.CPP14Parser.LeftBracket:
                        {
                            operator.push(this.flatten(this.visit(it)));
                        }
                        break;
                    case CPP14Parser_1.CPP14Parser.RightBracket:
                        {
                            operator.push(this.flatten(this.visit(it)));
                        }
                        break;
                    case CPP14Parser_1.CPP14Parser.Dot:
                        {
                            operator.push(this.flatten(this.visit(it)));
                        }
                        break;
                    case CPP14Parser_1.CPP14Parser.Arrow:
                        {
                            operator.push(this.flatten(this.visit(it)));
                        }
                        break;
                    case CPP14Parser_1.CPP14Parser.PlusPlus:
                        {
                            operator.push(this.flatten(this.visit(it)));
                        }
                        break;
                    case CPP14Parser_1.CPP14Parser.MinusMinus:
                        {
                            operator.push(this.flatten(this.visit(it)));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        if (!ret.isEmpty()) {
            return ret;
        }
        const node = this.castTo(map, UniBinOp_1.UniBinOp);
        return node;
    }
    visitExpressionlist(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const items = [];
        map.set('items', items);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 725:
                        {
                            items.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        const node = this.castTo(map, UniArray_1.UniArray);
        return node;
    }
    visitBinaryexpression(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const ret = [];
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 751:
                        {
                            ret.push(this.visit(it));
                        }
                        break;
                    case 752:
                        {
                            ret.push(this.visit(it));
                        }
                        break;
                    case 753:
                        {
                            ret.push(this.visit(it));
                        }
                        break;
                    case 754:
                        {
                            ret.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        if (!ret.isEmpty()) {
            return ret;
        }
        const node = this.castTo(map, UniBinOp_1.UniBinOp);
        return node;
    }
    visitUnaryexpression(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const ret = [];
        const expr = [];
        map.set('expr', expr);
        const operator = [];
        map.set('operator', operator);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 758:
                        {
                            expr.push(this.visit(it));
                        }
                        break;
                    case 760:
                        {
                            expr.push(this.visit(it));
                        }
                        break;
                    case 761:
                        {
                            operator.push(this.visit(it));
                        }
                        break;
                    case 762:
                        {
                            expr.push(this.visit(it));
                        }
                        break;
                    case 765:
                        {
                            expr.push(this.visit(it));
                        }
                        break;
                    case 768:
                        {
                            expr.push(this.visit(it));
                        }
                        break;
                    case 773:
                        {
                            expr.push(this.visit(it));
                        }
                        break;
                    case 783:
                        {
                            expr.push(this.visit(it));
                        }
                        break;
                    case 786:
                        {
                            ret.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    case CPP14Parser_1.CPP14Parser.PlusPlus:
                        {
                            operator.push(this.flatten(this.visit(it)));
                        }
                        break;
                    case CPP14Parser_1.CPP14Parser.MinusMinus:
                        {
                            operator.push(this.flatten(this.visit(it)));
                        }
                        break;
                    case CPP14Parser_1.CPP14Parser.Sizeof:
                        {
                            operator.push(this.flatten(this.visit(it)));
                        }
                        break;
                    case CPP14Parser_1.CPP14Parser.Identifier:
                        {
                            expr.push(this.flatten(this.visit(it)));
                        }
                        break;
                    case CPP14Parser_1.CPP14Parser.Alignof:
                        {
                            operator.push(this.flatten(this.visit(it)));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        if (!ret.isEmpty()) {
            return ret;
        }
        const node = this.castTo(map, UniUnaryOp_1.UniUnaryOp);
        return node;
    }
    visitTypeidlapper(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const name = [];
        map.set('name', name);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 789:
                        {
                            name.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        const node = this.castTo(map, UniIdent_1.UniIdent);
        return node;
    }
    visitCastexpression(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const ret = [];
        const type = [];
        map.set('type', type);
        const value = [];
        map.set('value', value);
        const operator = [];
        map.set('operator', operator);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 880:
                        {
                            ret.push(this.visit(it));
                        }
                        break;
                    case 882:
                        {
                            type.push(this.visit(it));
                        }
                        break;
                    case 884:
                        {
                            value.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    case CPP14Parser_1.CPP14Parser.RightParen:
                        {
                            operator.push(this.flatten(this.visit(it)));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        if (!ret.isEmpty()) {
            return ret;
        }
        const node = this.castTo(map, UniCast_1.UniCast);
        return node;
    }
    visitPmexpression(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const ret = [];
        const left = [];
        map.set('left', left);
        const right = [];
        map.set('right', right);
        const operator = [];
        map.set('operator', operator);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 889:
                        {
                            ret.push(this.visit(it));
                        }
                        break;
                    case 68:
                        {
                            left.push(this.visit(it));
                        }
                        break;
                    case 893:
                        {
                            right.push(this.visit(it));
                        }
                        break;
                    case 896:
                        {
                            right.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    case CPP14Parser_1.CPP14Parser.DotStar:
                        {
                            operator.push(this.flatten(this.visit(it)));
                        }
                        break;
                    case CPP14Parser_1.CPP14Parser.ArrowStar:
                        {
                            operator.push(this.flatten(this.visit(it)));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        if (!ret.isEmpty()) {
            return ret;
        }
        const node = this.castTo(map, UniBinOp_1.UniBinOp);
        return node;
    }
    visitMultiplicativeexpression(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const ret = [];
        const left = [];
        map.set('left', left);
        const right = [];
        map.set('right', right);
        const operator = [];
        map.set('operator', operator);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 903:
                        {
                            ret.push(this.visit(it));
                        }
                        break;
                    case 70:
                        {
                            left.push(this.visit(it));
                        }
                        break;
                    case 907:
                        {
                            right.push(this.visit(it));
                        }
                        break;
                    case 910:
                        {
                            right.push(this.visit(it));
                        }
                        break;
                    case 913:
                        {
                            right.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    case CPP14Parser_1.CPP14Parser.Star:
                        {
                            operator.push(this.flatten(this.visit(it)));
                        }
                        break;
                    case CPP14Parser_1.CPP14Parser.Div:
                        {
                            operator.push(this.flatten(this.visit(it)));
                        }
                        break;
                    case CPP14Parser_1.CPP14Parser.Mod:
                        {
                            operator.push(this.flatten(this.visit(it)));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        if (!ret.isEmpty()) {
            return ret;
        }
        const node = this.castTo(map, UniBinOp_1.UniBinOp);
        return node;
    }
    visitAdditiveexpression(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const ret = [];
        const left = [];
        map.set('left', left);
        const right = [];
        map.set('right', right);
        const operator = [];
        map.set('operator', operator);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 920:
                        {
                            ret.push(this.visit(it));
                        }
                        break;
                    case 72:
                        {
                            left.push(this.visit(it));
                        }
                        break;
                    case 924:
                        {
                            right.push(this.visit(it));
                        }
                        break;
                    case 927:
                        {
                            right.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    case CPP14Parser_1.CPP14Parser.Plus:
                        {
                            operator.push(this.flatten(this.visit(it)));
                        }
                        break;
                    case CPP14Parser_1.CPP14Parser.Minus:
                        {
                            operator.push(this.flatten(this.visit(it)));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        if (!ret.isEmpty()) {
            return ret;
        }
        const node = this.castTo(map, UniBinOp_1.UniBinOp);
        return node;
    }
    visitShiftexpression(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const ret = [];
        const left = [];
        map.set('left', left);
        const right = [];
        map.set('right', right);
        const operator = [];
        map.set('operator', operator);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 934:
                        {
                            ret.push(this.visit(it));
                        }
                        break;
                    case 74:
                        {
                            left.push(this.visit(it));
                        }
                        break;
                    case 938:
                        {
                            right.push(this.visit(it));
                        }
                        break;
                    case 940:
                        {
                            operator.push(this.visit(it));
                        }
                        break;
                    case 941:
                        {
                            right.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    case CPP14Parser_1.CPP14Parser.LeftShift:
                        {
                            operator.push(this.flatten(this.visit(it)));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        if (!ret.isEmpty()) {
            return ret;
        }
        const node = this.castTo(map, UniBinOp_1.UniBinOp);
        return node;
    }
    visitRelationalexpression(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const ret = [];
        const left = [];
        map.set('left', left);
        const right = [];
        map.set('right', right);
        const operator = [];
        map.set('operator', operator);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 949:
                        {
                            ret.push(this.visit(it));
                        }
                        break;
                    case 76:
                        {
                            left.push(this.visit(it));
                        }
                        break;
                    case 953:
                        {
                            right.push(this.visit(it));
                        }
                        break;
                    case 956:
                        {
                            right.push(this.visit(it));
                        }
                        break;
                    case 959:
                        {
                            right.push(this.visit(it));
                        }
                        break;
                    case 962:
                        {
                            right.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    case CPP14Parser_1.CPP14Parser.Less:
                        {
                            operator.push(this.flatten(this.visit(it)));
                        }
                        break;
                    case CPP14Parser_1.CPP14Parser.Greater:
                        {
                            operator.push(this.flatten(this.visit(it)));
                        }
                        break;
                    case CPP14Parser_1.CPP14Parser.LessEqual:
                        {
                            operator.push(this.flatten(this.visit(it)));
                        }
                        break;
                    case CPP14Parser_1.CPP14Parser.GreaterEqual:
                        {
                            operator.push(this.flatten(this.visit(it)));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        if (!ret.isEmpty()) {
            return ret;
        }
        const node = this.castTo(map, UniBinOp_1.UniBinOp);
        return node;
    }
    visitEqualityexpression(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const ret = [];
        const left = [];
        map.set('left', left);
        const right = [];
        map.set('right', right);
        const operator = [];
        map.set('operator', operator);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 969:
                        {
                            ret.push(this.visit(it));
                        }
                        break;
                    case 78:
                        {
                            left.push(this.visit(it));
                        }
                        break;
                    case 973:
                        {
                            right.push(this.visit(it));
                        }
                        break;
                    case 976:
                        {
                            right.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    case CPP14Parser_1.CPP14Parser.Equal:
                        {
                            operator.push(this.flatten(this.visit(it)));
                        }
                        break;
                    case CPP14Parser_1.CPP14Parser.NotEqual:
                        {
                            operator.push(this.flatten(this.visit(it)));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        if (!ret.isEmpty()) {
            return ret;
        }
        const node = this.castTo(map, UniBinOp_1.UniBinOp);
        return node;
    }
    visitAndexpression(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const ret = [];
        const left = [];
        map.set('left', left);
        const right = [];
        map.set('right', right);
        const operator = [];
        map.set('operator', operator);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 983:
                        {
                            ret.push(this.visit(it));
                        }
                        break;
                    case 80:
                        {
                            left.push(this.visit(it));
                        }
                        break;
                    case 987:
                        {
                            right.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    case CPP14Parser_1.CPP14Parser.And:
                        {
                            operator.push(this.flatten(this.visit(it)));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        if (!ret.isEmpty()) {
            return ret;
        }
        const node = this.castTo(map, UniBinOp_1.UniBinOp);
        return node;
    }
    visitExclusiveorexpression(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const ret = [];
        const left = [];
        map.set('left', left);
        const right = [];
        map.set('right', right);
        const operator = [];
        map.set('operator', operator);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 994:
                        {
                            ret.push(this.visit(it));
                        }
                        break;
                    case 82:
                        {
                            left.push(this.visit(it));
                        }
                        break;
                    case 998:
                        {
                            right.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    case CPP14Parser_1.CPP14Parser.Caret:
                        {
                            operator.push(this.flatten(this.visit(it)));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        if (!ret.isEmpty()) {
            return ret;
        }
        const node = this.castTo(map, UniBinOp_1.UniBinOp);
        return node;
    }
    visitInclusiveorexpression(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const ret = [];
        const left = [];
        map.set('left', left);
        const right = [];
        map.set('right', right);
        const operator = [];
        map.set('operator', operator);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 1005:
                        {
                            ret.push(this.visit(it));
                        }
                        break;
                    case 84:
                        {
                            left.push(this.visit(it));
                        }
                        break;
                    case 1009:
                        {
                            right.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    case CPP14Parser_1.CPP14Parser.Or:
                        {
                            operator.push(this.flatten(this.visit(it)));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        if (!ret.isEmpty()) {
            return ret;
        }
        const node = this.castTo(map, UniBinOp_1.UniBinOp);
        return node;
    }
    visitLogicalandexpression(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const ret = [];
        const left = [];
        map.set('left', left);
        const right = [];
        map.set('right', right);
        const operator = [];
        map.set('operator', operator);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 1016:
                        {
                            ret.push(this.visit(it));
                        }
                        break;
                    case 86:
                        {
                            left.push(this.visit(it));
                        }
                        break;
                    case 1020:
                        {
                            right.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    case CPP14Parser_1.CPP14Parser.AndAnd:
                        {
                            operator.push(this.flatten(this.visit(it)));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        if (!ret.isEmpty()) {
            return ret;
        }
        const node = this.castTo(map, UniBinOp_1.UniBinOp);
        return node;
    }
    visitLogicalorexpression(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const ret = [];
        const left = [];
        map.set('left', left);
        const right = [];
        map.set('right', right);
        const operator = [];
        map.set('operator', operator);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 1027:
                        {
                            ret.push(this.visit(it));
                        }
                        break;
                    case 88:
                        {
                            left.push(this.visit(it));
                        }
                        break;
                    case 1031:
                        {
                            right.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    case CPP14Parser_1.CPP14Parser.OrOr:
                        {
                            operator.push(this.flatten(this.visit(it)));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        if (!ret.isEmpty()) {
            return ret;
        }
        const node = this.castTo(map, UniBinOp_1.UniBinOp);
        return node;
    }
    visitConditionalexpression(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const ret = [];
        const trueExpr = [];
        map.set('trueExpr', trueExpr);
        const cond = [];
        map.set('cond', cond);
        const falseExpr = [];
        map.set('falseExpr', falseExpr);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 1037:
                        {
                            ret.push(this.visit(it));
                        }
                        break;
                    case 1038:
                        {
                            cond.push(this.visit(it));
                        }
                        break;
                    case 1040:
                        {
                            trueExpr.push(this.visit(it));
                        }
                        break;
                    case 1042:
                        {
                            falseExpr.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        if (!ret.isEmpty()) {
            return ret;
        }
        const node = this.castTo(map, UniTernaryOp_1.UniTernaryOp);
        return node;
    }
    visitAssignmentexpression(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const ret = [];
        const left = [];
        map.set('left', left);
        const right = [];
        map.set('right', right);
        const operator = [];
        map.set('operator', operator);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 1046:
                        {
                            ret.push(this.visit(it));
                        }
                        break;
                    case 1047:
                        {
                            left.push(this.visit(it));
                        }
                        break;
                    case 1048:
                        {
                            operator.push(this.visit(it));
                        }
                        break;
                    case 1049:
                        {
                            right.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        if (!ret.isEmpty()) {
            return ret;
        }
        const node = this.castTo(map, UniBinOp_1.UniBinOp);
        return node;
    }
    visitExpression(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const ret = [];
        const left = [];
        map.set('left', left);
        const right = [];
        map.set('right', right);
        const operator = [];
        map.set('operator', operator);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 1068:
                        {
                            ret.push(this.visit(it));
                        }
                        break;
                    case 96:
                        {
                            left.push(this.visit(it));
                        }
                        break;
                    case 1072:
                        {
                            right.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    case CPP14Parser_1.CPP14Parser.Comma:
                        {
                            operator.push(this.flatten(this.visit(it)));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        if (!ret.isEmpty()) {
            return ret;
        }
        const node = this.castTo(map, UniBinOp_1.UniBinOp);
        return node;
    }
    visitSwitchunitstatement(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const statement = [];
        map.set('statement', statement);
        const label = [];
        map.set('label', label);
        const cond = [];
        map.set('cond', cond);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 1150:
                        {
                            cond.push(this.visit(it));
                        }
                        break;
                    case 1155:
                        {
                            statement.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    case CPP14Parser_1.CPP14Parser.Case:
                        {
                            label.push(this.flatten(this.visit(it)));
                        }
                        break;
                    case CPP14Parser_1.CPP14Parser.Default:
                        {
                            label.push(this.flatten(this.visit(it)));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        const node = this.castTo(map, UniSwitchUnit_1.UniSwitchUnit);
        return node;
    }
    visitStatementWithoutLabeldstatementseq(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const add = [];
        map.set('add', add);
        const n = ctx.childCount;
        if (0 < n) {
            for (let i = 0; i < n; ++i) {
                const it = ctx.getChild(i);
                if (it instanceof antlr4ts_1.RuleContext) {
                    switch (it.invokingState) {
                        case 1157:
                            {
                                const results = this.flatten(this.visit(it));
                                if (Array.isArray(results)) {
                                    for (const result of results)
                                        add.push(result);
                                }
                                else
                                    add.push(results);
                            }
                            break;
                        case 1158:
                            {
                                const results = this.flatten(this.visit(it));
                                if (Array.isArray(results)) {
                                    for (const result of results)
                                        add.push(result);
                                }
                                else
                                    add.push(results);
                            }
                            break;
                        default:
                            {
                                none.push(this.visit(it));
                            }
                            break;
                    }
                }
                else if (it instanceof TerminalNode_1.TerminalNode) {
                    switch (it.symbol.type) {
                        default:
                            {
                                none.push(this.visit(it));
                            }
                            break;
                    }
                }
            }
        }
        const node = this.castToList(map, UniExpr_1.UniExpr);
        return node;
    }
    visitExpressionstatement(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const ret = [];
        const endWith = [];
        map.set('endWith', endWith);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 1164:
                        {
                            ret.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    case CPP14Parser_1.CPP14Parser.Semi:
                        {
                            endWith.push(this.flatten(this.visit(it)));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        if (!ret.isEmpty()) {
            return ret;
        }
        const node = this.castTo(map, UniEmptyStatement_1.UniEmptyStatement);
        return node;
    }
    visitCompoundstatement(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const body = [];
        map.set('body', body);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 1170:
                        {
                            body.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        const node = this.castTo(map, UniBlock_1.UniBlock);
        return node;
    }
    visitStatementseq(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const add = [];
        map.set('add', add);
        const n = ctx.childCount;
        if (0 < n) {
            for (let i = 0; i < n; ++i) {
                const it = ctx.getChild(i);
                if (it instanceof antlr4ts_1.RuleContext) {
                    switch (it.invokingState) {
                        case 1175:
                            {
                                const results = this.flatten(this.visit(it));
                                if (Array.isArray(results)) {
                                    for (const result of results)
                                        add.push(result);
                                }
                                else
                                    add.push(results);
                            }
                            break;
                        case 1176:
                            {
                                const results = this.flatten(this.visit(it));
                                if (Array.isArray(results)) {
                                    for (const result of results)
                                        add.push(result);
                                }
                                else
                                    add.push(results);
                            }
                            break;
                        default:
                            {
                                none.push(this.visit(it));
                            }
                            break;
                    }
                }
                else if (it instanceof TerminalNode_1.TerminalNode) {
                    switch (it.symbol.type) {
                        default:
                            {
                                none.push(this.visit(it));
                            }
                            break;
                    }
                }
            }
        }
        const node = this.castToList(map, UniExpr_1.UniExpr);
        return node;
    }
    visitSelectionstatement(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const trueStatement = [];
        map.set('trueStatement', trueStatement);
        const falseStatement = [];
        map.set('falseStatement', falseStatement);
        const cond = [];
        map.set('cond', cond);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 1184:
                        {
                            cond.push(this.visit(it));
                        }
                        break;
                    case 1186:
                        {
                            trueStatement.push(this.visit(it));
                        }
                        break;
                    case 1190:
                        {
                            cond.push(this.visit(it));
                        }
                        break;
                    case 1192:
                        {
                            trueStatement.push(this.visit(it));
                        }
                        break;
                    case 1194:
                        {
                            falseStatement.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        const node = this.castTo(map, UniIf_1.UniIf);
        return node;
    }
    visitSwitchstatement(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const cases = [];
        map.set('cases', cases);
        const cond = [];
        map.set('cond', cond);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 1200:
                        {
                            cond.push(this.visit(it));
                        }
                        break;
                    case 1203:
                        {
                            cases.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        const node = this.castTo(map, UniSwitch_1.UniSwitch);
        return node;
    }
    visitSwitchunitseq(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const add = [];
        map.set('add', add);
        const n = ctx.childCount;
        if (0 < n) {
            for (let i = 0; i < n; ++i) {
                const it = ctx.getChild(i);
                if (it instanceof antlr4ts_1.RuleContext) {
                    switch (it.invokingState) {
                        case 1206:
                            {
                                const results = this.flatten(this.visit(it));
                                if (Array.isArray(results)) {
                                    for (const result of results)
                                        add.push(result);
                                }
                                else
                                    add.push(results);
                            }
                            break;
                        case 1207:
                            {
                                const results = this.flatten(this.visit(it));
                                if (Array.isArray(results)) {
                                    for (const result of results)
                                        add.push(result);
                                }
                                else
                                    add.push(results);
                            }
                            break;
                        default:
                            {
                                none.push(this.visit(it));
                            }
                            break;
                    }
                }
                else if (it instanceof TerminalNode_1.TerminalNode) {
                    switch (it.symbol.type) {
                        default:
                            {
                                none.push(this.visit(it));
                            }
                            break;
                    }
                }
            }
        }
        const node = this.castToList(map, UniStatement_1.UniStatement);
        return node;
    }
    visitWhilestatement(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const statement = [];
        map.set('statement', statement);
        const cond = [];
        map.set('cond', cond);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 1233:
                        {
                            cond.push(this.visit(it));
                        }
                        break;
                    case 1235:
                        {
                            statement.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        const node = this.castTo(map, UniWhile_1.UniWhile);
        return node;
    }
    visitDowhilestatement(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const statement = [];
        map.set('statement', statement);
        const cond = [];
        map.set('cond', cond);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 1238:
                        {
                            statement.push(this.visit(it));
                        }
                        break;
                    case 1241:
                        {
                            cond.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        const node = this.castTo(map, UniDoWhile_1.UniDoWhile);
        return node;
    }
    visitIterationstatement(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const init = [];
        map.set('init', init);
        const statement = [];
        map.set('statement', statement);
        const step = [];
        map.set('step', step);
        const cond = [];
        map.set('cond', cond);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 1247:
                        {
                            init.push(this.visit(it));
                        }
                        break;
                    case 1248:
                        {
                            cond.push(this.visit(it));
                        }
                        break;
                    case 1252:
                        {
                            step.push(this.visit(it));
                        }
                        break;
                    case 1256:
                        {
                            statement.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        const node = this.castTo(map, UniFor_1.UniFor);
        return node;
    }
    visitEnhancedForStatement(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const container = [];
        map.set('container', container);
        const statement = [];
        map.set('statement', statement);
        const merge = [];
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 1260:
                        {
                            merge.push(this.visit(it));
                        }
                        break;
                    case 1262:
                        {
                            container.push(this.visit(it));
                        }
                        break;
                    case 1264:
                        {
                            statement.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        let node = this.castTo(map, UniEnhancedFor_1.UniEnhancedFor);
        if (typeof node === 'object' && 'merge' in node) {
            merge.forEach((it) => {
                node.merge(this.castTo(it, UniEnhancedFor_1.UniEnhancedFor));
            });
        }
        else {
            node = new UniEnhancedFor_1.UniEnhancedFor();
            merge.forEach((it) => {
                node.merge(this.castTo(it, UniEnhancedFor_1.UniEnhancedFor));
            });
        }
        return node;
    }
    visitBreakStatement(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        const node = this.castTo(map, UniBreak_1.UniBreak);
        return node;
    }
    visitContinueStatement(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        const node = this.castTo(map, UniContinue_1.UniContinue);
        return node;
    }
    visitReturnStatement(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const value = [];
        map.set('value', value);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 1292:
                        {
                            value.push(this.visit(it));
                        }
                        break;
                    case 1297:
                        {
                            value.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        const node = this.castTo(map, UniReturn_1.UniReturn);
        return node;
    }
    visitDeclarationseq(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const add = [];
        map.set('add', add);
        const n = ctx.childCount;
        if (0 < n) {
            for (let i = 0; i < n; ++i) {
                const it = ctx.getChild(i);
                if (it instanceof antlr4ts_1.RuleContext) {
                    switch (it.invokingState) {
                        case 1307:
                            {
                                const results = this.flatten(this.visit(it));
                                if (Array.isArray(results)) {
                                    for (const result of results)
                                        add.push(result);
                                }
                                else
                                    add.push(results);
                            }
                            break;
                        case 148:
                            {
                                const results = this.flatten(this.visit(it));
                                if (Array.isArray(results)) {
                                    for (const result of results)
                                        add.push(result);
                                }
                                else
                                    add.push(results);
                            }
                            break;
                        case 1310:
                            {
                                const results = this.flatten(this.visit(it));
                                if (Array.isArray(results)) {
                                    for (const result of results)
                                        add.push(result);
                                }
                                else
                                    add.push(results);
                            }
                            break;
                        default:
                            {
                                none.push(this.visit(it));
                            }
                            break;
                    }
                }
                else if (it instanceof TerminalNode_1.TerminalNode) {
                    switch (it.symbol.type) {
                        default:
                            {
                                none.push(this.visit(it));
                            }
                            break;
                    }
                }
            }
        }
        const node = this.castToList(map, UniExpr_1.UniExpr);
        return node;
    }
    visitMyclassbody(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const add = [];
        map.set('add', add);
        const n = ctx.childCount;
        if (0 < n) {
            for (let i = 0; i < n; ++i) {
                const it = ctx.getChild(i);
                if (it instanceof antlr4ts_1.RuleContext) {
                    switch (it.invokingState) {
                        case 1316:
                            {
                                const results = this.flatten(this.visit(it));
                                if (Array.isArray(results)) {
                                    for (const result of results)
                                        add.push(result);
                                }
                                else
                                    add.push(results);
                            }
                            break;
                        default:
                            {
                                none.push(this.visit(it));
                            }
                            break;
                    }
                }
                else if (it instanceof TerminalNode_1.TerminalNode) {
                    switch (it.symbol.type) {
                        default:
                            {
                                none.push(this.visit(it));
                            }
                            break;
                    }
                }
            }
        }
        const node = this.castToList(map, UniVariableDec_1.UniVariableDec);
        return node;
    }
    visitMyclassspecifier(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const members = [];
        map.set('members', members);
        const merge = [];
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 1319:
                        {
                            merge.push(this.visit(it));
                        }
                        break;
                    case 1321:
                        {
                            members.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        let node = this.castTo(map, UniClassDec_1.UniClassDec);
        if (typeof node === 'object' && 'merge' in node) {
            merge.forEach((it) => {
                node.merge(this.castTo(it, UniClassDec_1.UniClassDec));
            });
        }
        else {
            node = new UniClassDec_1.UniClassDec();
            merge.forEach((it) => {
                node.merge(this.castTo(it, UniClassDec_1.UniClassDec));
            });
        }
        return node;
    }
    visitMyclassspecifierstatement(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        const node = this.castTo(map, UniClassDec_1.UniClassDec);
        return node;
    }
    visitMyclasshead(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const className = [];
        map.set('className', className);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 1334:
                        {
                            className.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        const node = this.castTo(map, UniClassDec_1.UniClassDec);
        return node;
    }
    visitVariabledeclarationstatement(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const ret = [];
        const n = ctx.childCount;
        if (0 < n) {
            for (let i = 0; i < n; ++i) {
                const it = ctx.getChild(i);
                if (it instanceof antlr4ts_1.RuleContext) {
                    switch (it.invokingState) {
                        case 1386:
                            {
                                ret.push(this.visit(it));
                            }
                            break;
                        default:
                            {
                                none.push(this.visit(it));
                            }
                            break;
                    }
                }
                else if (it instanceof TerminalNode_1.TerminalNode) {
                    switch (it.symbol.type) {
                        default:
                            {
                                none.push(this.visit(it));
                            }
                            break;
                    }
                }
            }
        }
        if (!ret.isEmpty()) {
            return ret;
        }
        const node = this.castToList(map, UniVariableDec_1.UniVariableDec);
        return node;
    }
    visitVariabledeclaration(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const variables = [];
        map.set('variables', variables);
        const modifiers = [];
        map.set('modifiers', modifiers);
        const type = [];
        map.set('type', type);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 1392:
                        {
                            modifiers.push(this.visit(it));
                        }
                        break;
                    case 1395:
                        {
                            type.push(this.visit(it));
                        }
                        break;
                    case 1396:
                        {
                            variables.push(this.visit(it));
                        }
                        break;
                    case 1399:
                        {
                            type.push(this.visit(it));
                        }
                        break;
                    case 1400:
                        {
                            variables.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        const node = this.castTo(map, UniVariableDec_1.UniVariableDec);
        return node;
    }
    visitStructspecifier(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const members = [];
        map.set('members', members);
        const className = [];
        map.set('className', className);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 1405:
                        {
                            className.push(this.visit(it));
                        }
                        break;
                    case 1407:
                        {
                            members.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        const node = this.castTo(map, UniClassDec_1.UniClassDec);
        return node;
    }
    visitVariableDeclaratorList(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const add = [];
        map.set('add', add);
        const n = ctx.childCount;
        if (0 < n) {
            for (let i = 0; i < n; ++i) {
                const it = ctx.getChild(i);
                if (it instanceof antlr4ts_1.RuleContext) {
                    switch (it.invokingState) {
                        case 1410:
                            {
                                const results = this.flatten(this.visit(it));
                                if (Array.isArray(results)) {
                                    for (const result of results)
                                        add.push(result);
                                }
                                else
                                    add.push(results);
                            }
                            break;
                        case 1412:
                            {
                                const results = this.flatten(this.visit(it));
                                if (Array.isArray(results)) {
                                    for (const result of results)
                                        add.push(result);
                                }
                                else
                                    add.push(results);
                            }
                            break;
                        default:
                            {
                                none.push(this.visit(it));
                            }
                            break;
                    }
                }
                else if (it instanceof TerminalNode_1.TerminalNode) {
                    switch (it.symbol.type) {
                        default:
                            {
                                none.push(this.visit(it));
                            }
                            break;
                    }
                }
            }
        }
        const node = this.castToList(map, UniVariableDef_1.UniVariableDef);
        return node;
    }
    visitVariableDeclarator(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const typeSuffix = [];
        map.set('typeSuffix', typeSuffix);
        const name = [];
        map.set('name', name);
        const value = [];
        map.set('value', value);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 1418:
                        {
                            name.push(this.visit(it));
                        }
                        break;
                    case 1424:
                        {
                            name.push(this.visit(it));
                        }
                        break;
                    case 1436:
                        {
                            value.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    case CPP14Parser_1.CPP14Parser.LeftBracket:
                        {
                            typeSuffix.push(this.flatten(this.visit(it)));
                        }
                        break;
                    case CPP14Parser_1.CPP14Parser.Integerliteral:
                        {
                            typeSuffix.push(this.flatten(this.visit(it)));
                        }
                        break;
                    case CPP14Parser_1.CPP14Parser.RightBracket:
                        {
                            typeSuffix.push(this.flatten(this.visit(it)));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        const node = this.castTo(map, UniVariableDef_1.UniVariableDef);
        return node;
    }
    visitDims(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        const node = this.castTo(map, String);
        return node;
    }
    visitFunctiondeclarationstatement(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const modifiers = [];
        map.set('modifiers', modifiers);
        const merge = [];
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 1445:
                        {
                            modifiers.push(this.visit(it));
                        }
                        break;
                    case 1448:
                        {
                            merge.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        let node = this.castTo(map, UniFunctionDec_1.UniFunctionDec);
        if (typeof node === 'object' && 'merge' in node) {
            merge.forEach((it) => {
                node.merge(this.castTo(it, UniFunctionDec_1.UniFunctionDec));
            });
        }
        else {
            node = new UniFunctionDec_1.UniFunctionDec();
            merge.forEach((it) => {
                node.merge(this.castTo(it, UniFunctionDec_1.UniFunctionDec));
            });
        }
        return node;
    }
    visitEmptydeclaration(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const endWith = [];
        map.set('endWith', endWith);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    case CPP14Parser_1.CPP14Parser.Semi:
                        {
                            endWith.push(this.flatten(this.visit(it)));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        const node = this.castTo(map, UniEmptyStatement_1.UniEmptyStatement);
        return node;
    }
    visitSimpletypespecifier(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        const node = this.castTo(map, String);
        return node;
    }
    visitElaboratedtypespecifier(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const ret = [];
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    case CPP14Parser_1.CPP14Parser.Identifier:
                        {
                            ret.push(this.flatten(this.visit(it)));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        if (!ret.isEmpty()) {
            return ret;
        }
        return map;
    }
    visitInitdeclaratorlist(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const add = [];
        map.set('add', add);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 1901:
                        {
                            add.push(this.visit(it));
                        }
                        break;
                    case 1903:
                        {
                            add.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        return map;
    }
    visitDeclaratorid(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        const node = this.castTo(map, String);
        return node;
    }
    visitParameterdeclarationclause(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const add = [];
        map.set('add', add);
        const n = ctx.childCount;
        if (0 < n) {
            for (let i = 0; i < n; ++i) {
                const it = ctx.getChild(i);
                if (it instanceof antlr4ts_1.RuleContext) {
                    switch (it.invokingState) {
                        case 2091:
                            {
                                const results = this.flatten(this.visit(it));
                                if (Array.isArray(results)) {
                                    for (const result of results)
                                        add.push(result);
                                }
                                else
                                    add.push(results);
                            }
                            break;
                        case 2097:
                            {
                                const results = this.flatten(this.visit(it));
                                if (Array.isArray(results)) {
                                    for (const result of results)
                                        add.push(result);
                                }
                                else
                                    add.push(results);
                            }
                            break;
                        default:
                            {
                                none.push(this.visit(it));
                            }
                            break;
                    }
                }
                else if (it instanceof TerminalNode_1.TerminalNode) {
                    switch (it.symbol.type) {
                        default:
                            {
                                none.push(this.visit(it));
                            }
                            break;
                    }
                }
            }
        }
        const node = this.castToList(map, UniParam_1.UniParam);
        return node;
    }
    visitParameterdeclarationlist(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const add = [];
        map.set('add', add);
        const n = ctx.childCount;
        if (0 < n) {
            for (let i = 0; i < n; ++i) {
                const it = ctx.getChild(i);
                if (it instanceof antlr4ts_1.RuleContext) {
                    switch (it.invokingState) {
                        case 2104:
                            {
                                const results = this.flatten(this.visit(it));
                                if (Array.isArray(results)) {
                                    for (const result of results)
                                        add.push(result);
                                }
                                else
                                    add.push(results);
                            }
                            break;
                        case 326:
                            {
                                const results = this.flatten(this.visit(it));
                                if (Array.isArray(results)) {
                                    for (const result of results)
                                        add.push(result);
                                }
                                else
                                    add.push(results);
                            }
                            break;
                        case 2108:
                            {
                                const results = this.flatten(this.visit(it));
                                if (Array.isArray(results)) {
                                    for (const result of results)
                                        add.push(result);
                                }
                                else
                                    add.push(results);
                            }
                            break;
                        default:
                            {
                                none.push(this.visit(it));
                            }
                            break;
                    }
                }
                else if (it instanceof TerminalNode_1.TerminalNode) {
                    switch (it.symbol.type) {
                        default:
                            {
                                none.push(this.visit(it));
                            }
                            break;
                    }
                }
            }
        }
        const node = this.castToList(map, UniParam_1.UniParam);
        return node;
    }
    visitParameterdeclaration(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const variables = [];
        map.set('variables', variables);
        const modifiers = [];
        map.set('modifiers', modifiers);
        const type = [];
        map.set('type', type);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 2117:
                        {
                            modifiers.push(this.visit(it));
                        }
                        break;
                    case 2120:
                        {
                            type.push(this.visit(it));
                        }
                        break;
                    case 2121:
                        {
                            variables.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        const node = this.castTo(map, UniParam_1.UniParam);
        return node;
    }
    visitFunctiondefinition(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const block = [];
        map.set('block', block);
        const modifiers = [];
        map.set('modifiers', modifiers);
        const merge = [];
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 2127:
                        {
                            modifiers.push(this.visit(it));
                        }
                        break;
                    case 2130:
                        {
                            merge.push(this.visit(it));
                        }
                        break;
                    case 2134:
                        {
                            block.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        let node = this.castTo(map, UniFunctionDec_1.UniFunctionDec);
        if (typeof node === 'object' && 'merge' in node) {
            merge.forEach((it) => {
                node.merge(this.castTo(it, UniFunctionDec_1.UniFunctionDec));
            });
        }
        else {
            node = new UniFunctionDec_1.UniFunctionDec();
            merge.forEach((it) => {
                node.merge(this.castTo(it, UniFunctionDec_1.UniFunctionDec));
            });
        }
        return node;
    }
    visitFunctionheader(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const returnType = [];
        map.set('returnType', returnType);
        const merge = [];
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 2136:
                        {
                            returnType.push(this.visit(it));
                        }
                        break;
                    case 2139:
                        {
                            returnType.push(this.visit(it));
                        }
                        break;
                    case 2145:
                        {
                            merge.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        let node = this.castTo(map, UniFunctionDec_1.UniFunctionDec);
        if (typeof node === 'object' && 'merge' in node) {
            merge.forEach((it) => {
                node.merge(this.castTo(it, UniFunctionDec_1.UniFunctionDec));
            });
        }
        else {
            node = new UniFunctionDec_1.UniFunctionDec();
            merge.forEach((it) => {
                node.merge(this.castTo(it, UniFunctionDec_1.UniFunctionDec));
            });
        }
        return node;
    }
    visitFunctiondeclarator(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const name = [];
        map.set('name', name);
        const params = [];
        map.set('params', params);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 2147:
                        {
                            name.push(this.visit(it));
                        }
                        break;
                    case 2149:
                        {
                            params.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        const node = this.castTo(map, UniFunctionDec_1.UniFunctionDec);
        return node;
    }
    visitFunctionbody(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const merge = [];
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 2155:
                        {
                            merge.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        let node = this.castTo(map, UniBlock_1.UniBlock);
        if (typeof node === 'object' && 'merge' in node) {
            merge.forEach((it) => {
                node.merge(this.castTo(it, UniBlock_1.UniBlock));
            });
        }
        else {
            node = new UniBlock_1.UniBlock();
            merge.forEach((it) => {
                node.merge(this.castTo(it, UniBlock_1.UniBlock));
            });
        }
        return node;
    }
    visitInitializerlist(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const add = [];
        map.set('add', add);
        const n = ctx.childCount;
        if (0 < n) {
            for (let i = 0; i < n; ++i) {
                const it = ctx.getChild(i);
                if (it instanceof antlr4ts_1.RuleContext) {
                    switch (it.invokingState) {
                        case 2181:
                            {
                                const results = this.flatten(this.visit(it));
                                if (Array.isArray(results)) {
                                    for (const result of results)
                                        add.push(result);
                                }
                                else
                                    add.push(results);
                            }
                            break;
                        case 2183:
                            {
                                const results = this.flatten(this.visit(it));
                                if (Array.isArray(results)) {
                                    for (const result of results)
                                        add.push(result);
                                }
                                else
                                    add.push(results);
                            }
                            break;
                        default:
                            {
                                none.push(this.visit(it));
                            }
                            break;
                    }
                }
                else if (it instanceof TerminalNode_1.TerminalNode) {
                    switch (it.symbol.type) {
                        default:
                            {
                                none.push(this.visit(it));
                            }
                            break;
                    }
                }
            }
        }
        const node = this.castToList(map, UniExpr_1.UniExpr);
        return node;
    }
    visitBracedinitlist(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const items = [];
        map.set('items', items);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 2190:
                        {
                            items.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        const node = this.castTo(map, UniArray_1.UniArray);
        return node;
    }
    visitMyclassname(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        const node = this.castTo(map, String);
        return node;
    }
    visitClassspecifier(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const members = [];
        map.set('members', members);
        const merge = [];
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 2204:
                        {
                            merge.push(this.visit(it));
                        }
                        break;
                    case 2205:
                        {
                            members.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        let node = this.castTo(map, UniClassDec_1.UniClassDec);
        if (typeof node === 'object' && 'merge' in node) {
            merge.forEach((it) => {
                node.merge(this.castTo(it, UniClassDec_1.UniClassDec));
            });
        }
        else {
            node = new UniClassDec_1.UniClassDec();
            merge.forEach((it) => {
                node.merge(this.castTo(it, UniClassDec_1.UniClassDec));
            });
        }
        return node;
    }
    visitClassbody(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const add = [];
        map.set('add', add);
        const n = ctx.childCount;
        if (0 < n) {
            for (let i = 0; i < n; ++i) {
                const it = ctx.getChild(i);
                if (it instanceof antlr4ts_1.RuleContext) {
                    switch (it.invokingState) {
                        case 2208:
                            {
                                const results = this.flatten(this.visit(it));
                                if (Array.isArray(results)) {
                                    for (const result of results)
                                        add.push(result);
                                }
                                else
                                    add.push(results);
                            }
                            break;
                        default:
                            {
                                none.push(this.visit(it));
                            }
                            break;
                    }
                }
                else if (it instanceof TerminalNode_1.TerminalNode) {
                    switch (it.symbol.type) {
                        default:
                            {
                                none.push(this.visit(it));
                            }
                            break;
                    }
                }
            }
        }
        const node = this.castToList(map, UniVariableDec_1.UniVariableDec);
        return node;
    }
    visitClasshead(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const className = [];
        map.set('className', className);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 2220:
                        {
                            className.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        const node = this.castTo(map, UniClassDec_1.UniClassDec);
        return node;
    }
    visitMemberspecification(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const add = [];
        map.set('add', add);
        const n = ctx.childCount;
        if (0 < n) {
            for (let i = 0; i < n; ++i) {
                const it = ctx.getChild(i);
                if (it instanceof antlr4ts_1.RuleContext) {
                    switch (it.invokingState) {
                        case 2245:
                            {
                                const results = this.flatten(this.visit(it));
                                if (Array.isArray(results)) {
                                    for (const result of results)
                                        add.push(result);
                                }
                                else
                                    add.push(results);
                            }
                            break;
                        case 2246:
                            {
                                const results = this.flatten(this.visit(it));
                                if (Array.isArray(results)) {
                                    for (const result of results)
                                        add.push(result);
                                }
                                else
                                    add.push(results);
                            }
                            break;
                        case 2249:
                            {
                                const results = this.flatten(this.visit(it));
                                if (Array.isArray(results)) {
                                    for (const result of results)
                                        add.push(result);
                                }
                                else
                                    add.push(results);
                            }
                            break;
                        case 2251:
                            {
                                const results = this.flatten(this.visit(it));
                                if (Array.isArray(results)) {
                                    for (const result of results)
                                        add.push(result);
                                }
                                else
                                    add.push(results);
                            }
                            break;
                        default:
                            {
                                none.push(this.visit(it));
                            }
                            break;
                    }
                }
                else if (it instanceof TerminalNode_1.TerminalNode) {
                    switch (it.symbol.type) {
                        default:
                            {
                                none.push(this.visit(it));
                            }
                            break;
                    }
                }
            }
        }
        const node = this.castToList(map, UniVariableDec_1.UniVariableDec);
        return node;
    }
    visitMembervariabledeclarationstatement(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const ret = [];
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 2265:
                        {
                            ret.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        if (!ret.isEmpty()) {
            return ret;
        }
        const node = this.castTo(map, UniVariableDec_1.UniVariableDec);
        return node;
    }
    visitMembervariabledeclaration(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const variables = [];
        map.set('variables', variables);
        const modifiers = [];
        map.set('modifiers', modifiers);
        const type = [];
        map.set('type', type);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 2271:
                        {
                            modifiers.push(this.visit(it));
                        }
                        break;
                    case 2274:
                        {
                            type.push(this.visit(it));
                        }
                        break;
                    case 2275:
                        {
                            type.push(this.visit(it));
                        }
                        break;
                    case 2281:
                        {
                            variables.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        const node = this.castTo(map, UniVariableDec_1.UniVariableDec);
        return node;
    }
    visitMemberdeclaratorlist(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const add = [];
        map.set('add', add);
        const n = ctx.childCount;
        if (0 < n) {
            for (let i = 0; i < n; ++i) {
                const it = ctx.getChild(i);
                if (it instanceof antlr4ts_1.RuleContext) {
                    switch (it.invokingState) {
                        case 2285:
                            {
                                const results = this.flatten(this.visit(it));
                                if (Array.isArray(results)) {
                                    for (const result of results)
                                        add.push(result);
                                }
                                else
                                    add.push(results);
                            }
                            break;
                        case 370:
                            {
                                const results = this.flatten(this.visit(it));
                                if (Array.isArray(results)) {
                                    for (const result of results)
                                        add.push(result);
                                }
                                else
                                    add.push(results);
                            }
                            break;
                        case 2289:
                            {
                                const results = this.flatten(this.visit(it));
                                if (Array.isArray(results)) {
                                    for (const result of results)
                                        add.push(result);
                                }
                                else
                                    add.push(results);
                            }
                            break;
                        default:
                            {
                                none.push(this.visit(it));
                            }
                            break;
                    }
                }
                else if (it instanceof TerminalNode_1.TerminalNode) {
                    switch (it.symbol.type) {
                        default:
                            {
                                none.push(this.visit(it));
                            }
                            break;
                    }
                }
            }
        }
        const node = this.castToList(map, UniVariableDef_1.UniVariableDef);
        return node;
    }
    visitMemberdeclarator(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const typeSuffix = [];
        map.set('typeSuffix', typeSuffix);
        const name = [];
        map.set('name', name);
        const value = [];
        map.set('value', value);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 2295:
                        {
                            name.push(this.visit(it));
                        }
                        break;
                    case 2296:
                        {
                            typeSuffix.push(this.visit(it));
                        }
                        break;
                    case 2302:
                        {
                            name.push(this.visit(it));
                        }
                        break;
                    case 2304:
                        {
                            value.push(this.visit(it));
                        }
                        break;
                    case 2307:
                        {
                            name.push(this.visit(it));
                        }
                        break;
                    case 2308:
                        {
                            value.push(this.visit(it));
                        }
                        break;
                    case 2318:
                        {
                            value.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    case CPP14Parser_1.CPP14Parser.Identifier:
                        {
                            name.push(this.flatten(this.visit(it)));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        const node = this.castTo(map, UniVariableDef_1.UniVariableDef);
        return node;
    }
    visitIntegerliteral(ctx) {
        const findFirst = (ctx) => {
            const n = ctx.childCount;
            for (let i = 0; i < n; ++i) {
                const it = ctx.getChild(i);
                if (it instanceof TerminalNode_1.TerminalNode) {
                    if (it.symbol.type == CPP14Parser_1.CPP14Parser.Integerliteral) {
                        return it;
                    }
                }
            }
            return undefined;
        };
        const text = this.visit(findFirst(ctx));
        return new UniIntLiteral_1.UniIntLiteral(Number(text));
    }
    visitCharacterliteral(ctx) {
        const findFirst = (ctx) => {
            const n = ctx.childCount;
            for (let i = 0; i < n; ++i) {
                const it = ctx.getChild(i);
                if (it instanceof TerminalNode_1.TerminalNode) {
                    if (it.symbol.type == CPP14Parser_1.CPP14Parser.Characterliteral) {
                        return it;
                    }
                }
            }
            return undefined;
        };
        const text = this.visit(findFirst(ctx));
        return new UniCharacterLiteral_1.UniCharacterLiteral(text.substring(1, text.length - 1));
    }
    visitFloatingliteral(ctx) {
        const findFirst = (ctx) => {
            const n = ctx.childCount;
            for (let i = 0; i < n; ++i) {
                const it = ctx.getChild(i);
                if (it instanceof TerminalNode_1.TerminalNode) {
                    if (it.symbol.type == CPP14Parser_1.CPP14Parser.Floatingliteral) {
                        return it;
                    }
                }
            }
            return undefined;
        };
        const text = this.visit(findFirst(ctx));
        return new UniDoubleLiteral_1.UniDoubleLiteral(Number(text));
    }
    visitStringliteral(ctx) {
        const findFirst = (ctx) => {
            const n = ctx.childCount;
            for (let i = 0; i < n; ++i) {
                const it = ctx.getChild(i);
                if (it instanceof TerminalNode_1.TerminalNode) {
                    if (it.symbol.type == CPP14Parser_1.CPP14Parser.Stringliteral) {
                        return it;
                    }
                }
            }
            return undefined;
        };
        const text = this.visit(findFirst(ctx));
        return new UniStringLiteral_1.UniStringLiteral(text.substring(1, text.length - 1));
    }
    visitBooleanliteral(ctx) {
        const findFirst = (ctx) => {
            const n = ctx.childCount;
            for (let i = 0; i < n; ++i) {
                const it = ctx.getChild(i);
                if (it instanceof TerminalNode_1.TerminalNode) {
                    if (it.symbol.type == CPP14Parser_1.CPP14Parser.Booleanliteral) {
                        return it;
                    }
                }
            }
            return undefined;
        };
        const text = this.visit(findFirst(ctx));
        return new UniBoolLiteral_1.UniBoolLiteral(Boolean(text));
    }
}
exports.CPP14Mapper = CPP14Mapper;
//# sourceMappingURL=CPP14Mapper.js.map