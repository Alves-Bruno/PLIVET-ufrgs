import { ATN } from 'antlr4ts/atn/ATN';
import { CharStream } from 'antlr4ts/CharStream';
import { Lexer } from 'antlr4ts/Lexer';
import { Vocabulary } from 'antlr4ts/Vocabulary';
export declare class CPP14Lexer extends Lexer {
    static readonly Directive = 1;
    static readonly Alignas = 2;
    static readonly Alignof = 3;
    static readonly Asm = 4;
    static readonly Auto = 5;
    static readonly Bool = 6;
    static readonly Break = 7;
    static readonly Case = 8;
    static readonly Catch = 9;
    static readonly Char = 10;
    static readonly Char16 = 11;
    static readonly Char32 = 12;
    static readonly Class = 13;
    static readonly Const = 14;
    static readonly Constexpr = 15;
    static readonly Const_cast = 16;
    static readonly Continue = 17;
    static readonly Decltype = 18;
    static readonly Default = 19;
    static readonly Delete = 20;
    static readonly Do = 21;
    static readonly Double = 22;
    static readonly File = 23;
    static readonly Dynamic_cast = 24;
    static readonly Else = 25;
    static readonly Enum = 26;
    static readonly Explicit = 27;
    static readonly Export = 28;
    static readonly Extern = 29;
    static readonly False = 30;
    static readonly Final = 31;
    static readonly Float = 32;
    static readonly For = 33;
    static readonly Friend = 34;
    static readonly Goto = 35;
    static readonly If = 36;
    static readonly Inline = 37;
    static readonly Int = 38;
    static readonly Long = 39;
    static readonly Mutable = 40;
    static readonly Namespace = 41;
    static readonly New = 42;
    static readonly Noexcept = 43;
    static readonly Nullptr = 44;
    static readonly Operator = 45;
    static readonly Override = 46;
    static readonly Private = 47;
    static readonly Protected = 48;
    static readonly Public = 49;
    static readonly Register = 50;
    static readonly Reinterpret_cast = 51;
    static readonly Return = 52;
    static readonly Short = 53;
    static readonly Signed = 54;
    static readonly Sizeof = 55;
    static readonly Static = 56;
    static readonly Static_assert = 57;
    static readonly Static_cast = 58;
    static readonly Struct = 59;
    static readonly Switch = 60;
    static readonly Template = 61;
    static readonly This = 62;
    static readonly Thread_local = 63;
    static readonly Throw = 64;
    static readonly True = 65;
    static readonly Try = 66;
    static readonly Typedef = 67;
    static readonly Typeid = 68;
    static readonly Typename = 69;
    static readonly Union = 70;
    static readonly Unsigned = 71;
    static readonly Using = 72;
    static readonly Virtual = 73;
    static readonly Void = 74;
    static readonly Volatile = 75;
    static readonly Wchar = 76;
    static readonly While = 77;
    static readonly LeftParen = 78;
    static readonly RightParen = 79;
    static readonly LeftBracket = 80;
    static readonly RightBracket = 81;
    static readonly LeftBrace = 82;
    static readonly RightBrace = 83;
    static readonly Plus = 84;
    static readonly Minus = 85;
    static readonly Star = 86;
    static readonly Div = 87;
    static readonly Mod = 88;
    static readonly Caret = 89;
    static readonly And = 90;
    static readonly Or = 91;
    static readonly Tilde = 92;
    static readonly Not = 93;
    static readonly Assign = 94;
    static readonly Less = 95;
    static readonly Greater = 96;
    static readonly PlusAssign = 97;
    static readonly MinusAssign = 98;
    static readonly StarAssign = 99;
    static readonly DivAssign = 100;
    static readonly ModAssign = 101;
    static readonly XorAssign = 102;
    static readonly AndAssign = 103;
    static readonly OrAssign = 104;
    static readonly LeftShift = 105;
    static readonly LeftShiftAssign = 106;
    static readonly Equal = 107;
    static readonly NotEqual = 108;
    static readonly LessEqual = 109;
    static readonly GreaterEqual = 110;
    static readonly AndAnd = 111;
    static readonly OrOr = 112;
    static readonly PlusPlus = 113;
    static readonly MinusMinus = 114;
    static readonly Comma = 115;
    static readonly ArrowStar = 116;
    static readonly Arrow = 117;
    static readonly Question = 118;
    static readonly Colon = 119;
    static readonly Doublecolon = 120;
    static readonly Semi = 121;
    static readonly Dot = 122;
    static readonly DotStar = 123;
    static readonly Ellipsis = 124;
    static readonly Identifier = 125;
    static readonly Integerliteral = 126;
    static readonly Decimalliteral = 127;
    static readonly Octalliteral = 128;
    static readonly Hexadecimalliteral = 129;
    static readonly Binaryliteral = 130;
    static readonly Integersuffix = 131;
    static readonly Characterliteral = 132;
    static readonly Floatingliteral = 133;
    static readonly Stringliteral = 134;
    static readonly Booleanliteral = 135;
    static readonly Userdefinedintegerliteral = 136;
    static readonly Userdefinedfloatingliteral = 137;
    static readonly Userdefinedstringliteral = 138;
    static readonly Userdefinedcharacterliteral = 139;
    static readonly Whitespace = 140;
    static readonly Newline = 141;
    static readonly BlockComment = 142;
    static readonly LineComment = 143;
    static readonly modeNames: string[];
    static readonly ruleNames: string[];
    private static readonly _LITERAL_NAMES;
    private static readonly _SYMBOLIC_NAMES;
    static readonly VOCABULARY: Vocabulary;
    get vocabulary(): Vocabulary;
    constructor(input: CharStream);
    get grammarFileName(): string;
    get ruleNames(): string[];
    get serializedATN(): string;
    get modeNames(): string[];
    private static readonly _serializedATNSegments;
    private static readonly _serializedATNSegment0;
    private static readonly _serializedATNSegment1;
    private static readonly _serializedATNSegment2;
    static readonly _serializedATN: string;
    static __ATN: ATN;
    static get _ATN(): ATN;
}
