import { ParserRuleContext } from 'antlr4ts';
import { Python3Visitor } from './Python3Visitor';
import { TranslationunitContext, File_inputContext, StmtsContext, Simple_stmtContext, Expr_stmtContext, Expr_stmt_rightContext, Testlist_star_expr_arrayContext, Testlist_star_exprContext, Break_stmtContext, Continue_stmtContext, Return_stmtContext, If_stmtContext, While_stmtContext, For_stmtContext, SuiteContext, Or_testContext, And_testContext, Not_testContext, ComparisonContext, Star_exprContext, ExprContext, Xor_exprContext, And_exprContext, Shift_exprContext, Arith_exprContext, TermContext, FactorContext, PowerContext, Atom_exprContext, ArrayContext, IdentContext, BoolContext, Testlist_compContext, TrailerContext, Method_call_of_method_returnContext, Method_call_no_argContext, Method_callContext, Array_accessContext, Field_accessContext, Testlist_arrayContext, TestlistContext, ArglistContext, IntegerContext, FloatContext, ImaginaryContext } from './Python3Parser';
import { UniExpr } from '../../node/UniExpr';
import { UniBoolLiteral } from '../../node/UniBoolLiteral';
import { UniDoubleLiteral } from '../../node/UniDoubleLiteral';
import { UniIntLiteral } from '../../node/UniIntLiteral';
import { Mapper } from '../mapper/Mapper';
import '../../node_helper/Extension';
export declare class Python3Mapper extends Mapper implements Python3Visitor<any> {
    preProcess(text: string): string;
    parseToANTLRTree(code: any): ParserRuleContext;
    visitTranslationunit(ctx: TranslationunitContext): any;
    visitFile_input(ctx: File_inputContext): (typeof UniExpr)[];
    visitStmts(ctx: StmtsContext): (typeof UniExpr)[];
    visitSimple_stmt(ctx: Simple_stmtContext): any[];
    visitExpr_stmt(ctx: Expr_stmtContext): any;
    visitExpr_stmt_right(ctx: Expr_stmt_rightContext): any;
    visitTestlist_star_expr_array(ctx: Testlist_star_expr_arrayContext): (typeof UniExpr)[];
    visitTestlist_star_expr(ctx: Testlist_star_exprContext): any;
    visitBreak_stmt(ctx: Break_stmtContext): any;
    visitContinue_stmt(ctx: Continue_stmtContext): any;
    visitReturn_stmt(ctx: Return_stmtContext): any;
    visitIf_stmt(ctx: If_stmtContext): any;
    visitWhile_stmt(ctx: While_stmtContext): any;
    visitFor_stmt(ctx: For_stmtContext): any;
    visitSuite(ctx: SuiteContext): any;
    visitOr_test(ctx: Or_testContext): any;
    visitAnd_test(ctx: And_testContext): any;
    visitNot_test(ctx: Not_testContext): any;
    visitComparison(ctx: ComparisonContext): any;
    visitStar_expr(ctx: Star_exprContext): any;
    visitExpr(ctx: ExprContext): any;
    visitXor_expr(ctx: Xor_exprContext): any;
    visitAnd_expr(ctx: And_exprContext): any;
    visitShift_expr(ctx: Shift_exprContext): any;
    visitArith_expr(ctx: Arith_exprContext): any;
    visitTerm(ctx: TermContext): any;
    visitFactor(ctx: FactorContext): any;
    visitPower(ctx: PowerContext): any;
    visitAtom_expr(ctx: Atom_exprContext): any;
    visitArray(ctx: ArrayContext): any;
    visitIdent(ctx: IdentContext): any;
    visitBool(ctx: BoolContext): UniBoolLiteral;
    visitTestlist_comp(ctx: Testlist_compContext): (typeof UniExpr)[];
    visitTrailer(ctx: TrailerContext): (typeof UniExpr)[];
    visitMethod_call_of_method_return(ctx: Method_call_of_method_returnContext): any;
    visitMethod_call_no_arg(ctx: Method_call_no_argContext): any;
    visitMethod_call(ctx: Method_callContext): any;
    visitArray_access(ctx: Array_accessContext): any;
    visitField_access(ctx: Field_accessContext): any;
    visitTestlist_array(ctx: Testlist_arrayContext): (typeof UniExpr)[];
    visitTestlist(ctx: TestlistContext): any;
    visitArglist(ctx: ArglistContext): (typeof UniExpr)[];
    visitInteger(ctx: IntegerContext): UniIntLiteral;
    visitFloat(ctx: FloatContext): UniDoubleLiteral;
    visitImaginary(ctx: ImaginaryContext): UniDoubleLiteral;
}
