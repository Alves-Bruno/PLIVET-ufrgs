import { ATN } from 'antlr4ts/atn/ATN';
import { Parser } from 'antlr4ts/Parser';
import { ParserRuleContext } from 'antlr4ts/ParserRuleContext';
import { RuleContext } from 'antlr4ts/RuleContext';
import { TerminalNode } from 'antlr4ts/tree/TerminalNode';
import { TokenStream } from 'antlr4ts/TokenStream';
import { Vocabulary } from 'antlr4ts/Vocabulary';
import { Python3Visitor } from './Python3Visitor';
export declare class Python3Parser extends Parser {
    static readonly Shifts = 1;
    static readonly AddMinus = 2;
    static readonly TermOp = 3;
    static readonly FactorOp = 4;
    static readonly STRING = 5;
    static readonly INTEGER = 6;
    static readonly DEF = 7;
    static readonly RETURN = 8;
    static readonly RAISE = 9;
    static readonly FROM = 10;
    static readonly IMPORT = 11;
    static readonly AS = 12;
    static readonly GLOBAL = 13;
    static readonly NONLOCAL = 14;
    static readonly ASSERT = 15;
    static readonly IF = 16;
    static readonly ELIF = 17;
    static readonly ELSE = 18;
    static readonly WHILE = 19;
    static readonly FOR = 20;
    static readonly IN = 21;
    static readonly TRY = 22;
    static readonly FINALLY = 23;
    static readonly WITH = 24;
    static readonly EXCEPT = 25;
    static readonly LAMBDA = 26;
    static readonly OR = 27;
    static readonly AND = 28;
    static readonly NOT = 29;
    static readonly IS = 30;
    static readonly NONE = 31;
    static readonly TRUE = 32;
    static readonly FALSE = 33;
    static readonly CLASS = 34;
    static readonly YIELD = 35;
    static readonly DEL = 36;
    static readonly PASS = 37;
    static readonly CONTINUE = 38;
    static readonly BREAK = 39;
    static readonly ASYNC = 40;
    static readonly AWAIT = 41;
    static readonly NEWLINE = 42;
    static readonly NAME = 43;
    static readonly STRING_LITERAL = 44;
    static readonly BYTES_LITERAL = 45;
    static readonly DECIMAL_INTEGER = 46;
    static readonly OCT_INTEGER = 47;
    static readonly HEX_INTEGER = 48;
    static readonly BIN_INTEGER = 49;
    static readonly FLOAT_NUMBER = 50;
    static readonly IMAG_NUMBER = 51;
    static readonly DOT = 52;
    static readonly ELLIPSIS = 53;
    static readonly STAR = 54;
    static readonly OPEN_PAREN = 55;
    static readonly CLOSE_PAREN = 56;
    static readonly COMMA = 57;
    static readonly COLON = 58;
    static readonly SEMI_COLON = 59;
    static readonly POWER = 60;
    static readonly ASSIGN = 61;
    static readonly OPEN_BRACK = 62;
    static readonly CLOSE_BRACK = 63;
    static readonly OR_OP = 64;
    static readonly XOR = 65;
    static readonly AND_OP = 66;
    static readonly LEFT_SHIFT = 67;
    static readonly RIGHT_SHIFT = 68;
    static readonly ADD = 69;
    static readonly MINUS = 70;
    static readonly DIV = 71;
    static readonly MOD = 72;
    static readonly IDIV = 73;
    static readonly NOT_OP = 74;
    static readonly OPEN_BRACE = 75;
    static readonly CLOSE_BRACE = 76;
    static readonly LESS_THAN = 77;
    static readonly GREATER_THAN = 78;
    static readonly EQUALS = 79;
    static readonly GT_EQ = 80;
    static readonly LT_EQ = 81;
    static readonly NOT_EQ_1 = 82;
    static readonly NOT_EQ_2 = 83;
    static readonly AT = 84;
    static readonly ARROW = 85;
    static readonly ADD_ASSIGN = 86;
    static readonly SUB_ASSIGN = 87;
    static readonly MULT_ASSIGN = 88;
    static readonly AT_ASSIGN = 89;
    static readonly DIV_ASSIGN = 90;
    static readonly MOD_ASSIGN = 91;
    static readonly AND_ASSIGN = 92;
    static readonly OR_ASSIGN = 93;
    static readonly XOR_ASSIGN = 94;
    static readonly LEFT_SHIFT_ASSIGN = 95;
    static readonly RIGHT_SHIFT_ASSIGN = 96;
    static readonly POWER_ASSIGN = 97;
    static readonly IDIV_ASSIGN = 98;
    static readonly SKIP_ = 99;
    static readonly UNKNOWN_CHAR = 100;
    static readonly INDENT = 101;
    static readonly DEDENT = 102;
    static readonly RULE_translationunit = 0;
    static readonly RULE_single_input = 1;
    static readonly RULE_file_input = 2;
    static readonly RULE_decorator = 3;
    static readonly RULE_decorators = 4;
    static readonly RULE_decorated = 5;
    static readonly RULE_async_funcdef = 6;
    static readonly RULE_funcdef = 7;
    static readonly RULE_parameters = 8;
    static readonly RULE_typedargslist = 9;
    static readonly RULE_tfpdef = 10;
    static readonly RULE_varargslist = 11;
    static readonly RULE_vfpdef = 12;
    static readonly RULE_stmts = 13;
    static readonly RULE_stmt = 14;
    static readonly RULE_simple_stmt = 15;
    static readonly RULE_small_stmt = 16;
    static readonly RULE_expr_stmt = 17;
    static readonly RULE_expr_stmt_right = 18;
    static readonly RULE_test_star_expr = 19;
    static readonly RULE_testlist_star_expr_array = 20;
    static readonly RULE_testlist_star_expr = 21;
    static readonly RULE_augassign = 22;
    static readonly RULE_del_stmt = 23;
    static readonly RULE_pass_stmt = 24;
    static readonly RULE_flow_stmt = 25;
    static readonly RULE_break_stmt = 26;
    static readonly RULE_continue_stmt = 27;
    static readonly RULE_return_stmt = 28;
    static readonly RULE_yield_stmt = 29;
    static readonly RULE_raise_stmt = 30;
    static readonly RULE_import_stmt = 31;
    static readonly RULE_import_name = 32;
    static readonly RULE_import_from = 33;
    static readonly RULE_import_as_name = 34;
    static readonly RULE_dotted_as_name = 35;
    static readonly RULE_import_as_names = 36;
    static readonly RULE_dotted_as_names = 37;
    static readonly RULE_dotted_name = 38;
    static readonly RULE_global_stmt = 39;
    static readonly RULE_nonlocal_stmt = 40;
    static readonly RULE_assert_stmt = 41;
    static readonly RULE_compound_stmt = 42;
    static readonly RULE_async_stmt = 43;
    static readonly RULE_if_stmt = 44;
    static readonly RULE_while_stmt = 45;
    static readonly RULE_for_stmt = 46;
    static readonly RULE_try_stmt = 47;
    static readonly RULE_with_stmt = 48;
    static readonly RULE_with_item = 49;
    static readonly RULE_except_clause = 50;
    static readonly RULE_suite = 51;
    static readonly RULE_test = 52;
    static readonly RULE_test_nocond = 53;
    static readonly RULE_lambdef = 54;
    static readonly RULE_lambdef_nocond = 55;
    static readonly RULE_or_test = 56;
    static readonly RULE_and_test = 57;
    static readonly RULE_not_test = 58;
    static readonly RULE_comparison = 59;
    static readonly RULE_comp_op = 60;
    static readonly RULE_star_expr = 61;
    static readonly RULE_expr = 62;
    static readonly RULE_xor_expr = 63;
    static readonly RULE_and_expr = 64;
    static readonly RULE_shift_expr = 65;
    static readonly RULE_arith_expr = 66;
    static readonly RULE_term = 67;
    static readonly RULE_factor = 68;
    static readonly RULE_power = 69;
    static readonly RULE_atom_expr = 70;
    static readonly RULE_atom = 71;
    static readonly RULE_array = 72;
    static readonly RULE_ident = 73;
    static readonly RULE_bool = 74;
    static readonly RULE_testlist_comp = 75;
    static readonly RULE_trailer = 76;
    static readonly RULE_method_call_of_method_return = 77;
    static readonly RULE_method_call_no_arg = 78;
    static readonly RULE_method_call = 79;
    static readonly RULE_array_access = 80;
    static readonly RULE_field_access = 81;
    static readonly RULE_subscriptlist = 82;
    static readonly RULE_subscript = 83;
    static readonly RULE_sliceop = 84;
    static readonly RULE_exprlist = 85;
    static readonly RULE_testlist_array = 86;
    static readonly RULE_testlist = 87;
    static readonly RULE_dictorsetmaker = 88;
    static readonly RULE_classdef = 89;
    static readonly RULE_arglist = 90;
    static readonly RULE_argument = 91;
    static readonly RULE_comp_iter = 92;
    static readonly RULE_comp_for = 93;
    static readonly RULE_comp_if = 94;
    static readonly RULE_encoding_decl = 95;
    static readonly RULE_yield_expr = 96;
    static readonly RULE_yield_arg = 97;
    static readonly RULE_number = 98;
    static readonly RULE_integer = 99;
    static readonly RULE_float = 100;
    static readonly RULE_imaginary = 101;
    static readonly ruleNames: string[];
    private static readonly _LITERAL_NAMES;
    private static readonly _SYMBOLIC_NAMES;
    static readonly VOCABULARY: Vocabulary;
    get vocabulary(): Vocabulary;
    get grammarFileName(): string;
    get ruleNames(): string[];
    get serializedATN(): string;
    constructor(input: TokenStream);
    translationunit(): TranslationunitContext;
    single_input(): Single_inputContext;
    file_input(): File_inputContext;
    decorator(): DecoratorContext;
    decorators(): DecoratorsContext;
    decorated(): DecoratedContext;
    async_funcdef(): Async_funcdefContext;
    funcdef(): FuncdefContext;
    parameters(): ParametersContext;
    typedargslist(): TypedargslistContext;
    tfpdef(): TfpdefContext;
    varargslist(): VarargslistContext;
    vfpdef(): VfpdefContext;
    stmts(): StmtsContext;
    stmt(): StmtContext;
    simple_stmt(): Simple_stmtContext;
    small_stmt(): Small_stmtContext;
    expr_stmt(): Expr_stmtContext;
    expr_stmt_right(): Expr_stmt_rightContext;
    expr_stmt_right(_p: number): Expr_stmt_rightContext;
    test_star_expr(): Test_star_exprContext;
    testlist_star_expr_array(): Testlist_star_expr_arrayContext;
    testlist_star_expr(): Testlist_star_exprContext;
    augassign(): AugassignContext;
    del_stmt(): Del_stmtContext;
    pass_stmt(): Pass_stmtContext;
    flow_stmt(): Flow_stmtContext;
    break_stmt(): Break_stmtContext;
    continue_stmt(): Continue_stmtContext;
    return_stmt(): Return_stmtContext;
    yield_stmt(): Yield_stmtContext;
    raise_stmt(): Raise_stmtContext;
    import_stmt(): Import_stmtContext;
    import_name(): Import_nameContext;
    import_from(): Import_fromContext;
    import_as_name(): Import_as_nameContext;
    dotted_as_name(): Dotted_as_nameContext;
    import_as_names(): Import_as_namesContext;
    dotted_as_names(): Dotted_as_namesContext;
    dotted_name(): Dotted_nameContext;
    global_stmt(): Global_stmtContext;
    nonlocal_stmt(): Nonlocal_stmtContext;
    assert_stmt(): Assert_stmtContext;
    compound_stmt(): Compound_stmtContext;
    async_stmt(): Async_stmtContext;
    if_stmt(): If_stmtContext;
    while_stmt(): While_stmtContext;
    for_stmt(): For_stmtContext;
    try_stmt(): Try_stmtContext;
    with_stmt(): With_stmtContext;
    with_item(): With_itemContext;
    except_clause(): Except_clauseContext;
    suite(): SuiteContext;
    test(): TestContext;
    test_nocond(): Test_nocondContext;
    lambdef(): LambdefContext;
    lambdef_nocond(): Lambdef_nocondContext;
    or_test(): Or_testContext;
    or_test(_p: number): Or_testContext;
    and_test(): And_testContext;
    and_test(_p: number): And_testContext;
    not_test(): Not_testContext;
    comparison(): ComparisonContext;
    comparison(_p: number): ComparisonContext;
    comp_op(): Comp_opContext;
    star_expr(): Star_exprContext;
    expr(): ExprContext;
    expr(_p: number): ExprContext;
    xor_expr(): Xor_exprContext;
    xor_expr(_p: number): Xor_exprContext;
    and_expr(): And_exprContext;
    and_expr(_p: number): And_exprContext;
    shift_expr(): Shift_exprContext;
    shift_expr(_p: number): Shift_exprContext;
    arith_expr(): Arith_exprContext;
    arith_expr(_p: number): Arith_exprContext;
    term(): TermContext;
    term(_p: number): TermContext;
    factor(): FactorContext;
    power(): PowerContext;
    atom_expr(): Atom_exprContext;
    atom(): AtomContext;
    array(): ArrayContext;
    ident(): IdentContext;
    bool(): BoolContext;
    testlist_comp(): Testlist_compContext;
    trailer(): TrailerContext;
    method_call_of_method_return(): Method_call_of_method_returnContext;
    method_call_no_arg(): Method_call_no_argContext;
    method_call(): Method_callContext;
    array_access(): Array_accessContext;
    field_access(): Field_accessContext;
    subscriptlist(): SubscriptlistContext;
    subscript(): SubscriptContext;
    sliceop(): SliceopContext;
    exprlist(): ExprlistContext;
    testlist_array(): Testlist_arrayContext;
    testlist(): TestlistContext;
    dictorsetmaker(): DictorsetmakerContext;
    classdef(): ClassdefContext;
    arglist(): ArglistContext;
    argument(): ArgumentContext;
    comp_iter(): Comp_iterContext;
    comp_for(): Comp_forContext;
    comp_if(): Comp_ifContext;
    encoding_decl(): Encoding_declContext;
    yield_expr(): Yield_exprContext;
    yield_arg(): Yield_argContext;
    number(): NumberContext;
    integer(): IntegerContext;
    float(): FloatContext;
    imaginary(): ImaginaryContext;
    sempred(_localctx: RuleContext, ruleIndex: number, predIndex: number): boolean;
    private expr_stmt_right_sempred;
    private or_test_sempred;
    private and_test_sempred;
    private comparison_sempred;
    private expr_sempred;
    private xor_expr_sempred;
    private and_expr_sempred;
    private shift_expr_sempred;
    private arith_expr_sempred;
    private term_sempred;
    private static readonly _serializedATNSegments;
    private static readonly _serializedATNSegment0;
    private static readonly _serializedATNSegment1;
    private static readonly _serializedATNSegment2;
    static readonly _serializedATN: string;
    static __ATN: ATN;
    static get _ATN(): ATN;
}
export declare class TranslationunitContext extends ParserRuleContext {
    file_input(): File_inputContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Python3Visitor<Result>): Result;
}
export declare class Single_inputContext extends ParserRuleContext {
    NEWLINE(): TerminalNode | undefined;
    simple_stmt(): Simple_stmtContext | undefined;
    compound_stmt(): Compound_stmtContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Python3Visitor<Result>): Result;
}
export declare class File_inputContext extends ParserRuleContext {
    NEWLINE(): TerminalNode[];
    NEWLINE(i: number): TerminalNode;
    stmt(): StmtContext[];
    stmt(i: number): StmtContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Python3Visitor<Result>): Result;
}
export declare class DecoratorContext extends ParserRuleContext {
    dotted_name(): Dotted_nameContext;
    NEWLINE(): TerminalNode;
    arglist(): ArglistContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Python3Visitor<Result>): Result;
}
export declare class DecoratorsContext extends ParserRuleContext {
    decorator(): DecoratorContext[];
    decorator(i: number): DecoratorContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Python3Visitor<Result>): Result;
}
export declare class DecoratedContext extends ParserRuleContext {
    decorators(): DecoratorsContext;
    classdef(): ClassdefContext | undefined;
    funcdef(): FuncdefContext | undefined;
    async_funcdef(): Async_funcdefContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Python3Visitor<Result>): Result;
}
export declare class Async_funcdefContext extends ParserRuleContext {
    ASYNC(): TerminalNode;
    funcdef(): FuncdefContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Python3Visitor<Result>): Result;
}
export declare class FuncdefContext extends ParserRuleContext {
    NAME(): TerminalNode;
    parameters(): ParametersContext;
    suite(): SuiteContext;
    test(): TestContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Python3Visitor<Result>): Result;
}
export declare class ParametersContext extends ParserRuleContext {
    typedargslist(): TypedargslistContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Python3Visitor<Result>): Result;
}
export declare class TypedargslistContext extends ParserRuleContext {
    tfpdef(): TfpdefContext[];
    tfpdef(i: number): TfpdefContext;
    test(): TestContext[];
    test(i: number): TestContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Python3Visitor<Result>): Result;
}
export declare class TfpdefContext extends ParserRuleContext {
    NAME(): TerminalNode;
    test(): TestContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Python3Visitor<Result>): Result;
}
export declare class VarargslistContext extends ParserRuleContext {
    vfpdef(): VfpdefContext[];
    vfpdef(i: number): VfpdefContext;
    test(): TestContext[];
    test(i: number): TestContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Python3Visitor<Result>): Result;
}
export declare class VfpdefContext extends ParserRuleContext {
    NAME(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Python3Visitor<Result>): Result;
}
export declare class StmtsContext extends ParserRuleContext {
    stmt(): StmtContext[];
    stmt(i: number): StmtContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Python3Visitor<Result>): Result;
}
export declare class StmtContext extends ParserRuleContext {
    simple_stmt(): Simple_stmtContext | undefined;
    compound_stmt(): Compound_stmtContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Python3Visitor<Result>): Result;
}
export declare class Simple_stmtContext extends ParserRuleContext {
    small_stmt(): Small_stmtContext[];
    small_stmt(i: number): Small_stmtContext;
    NEWLINE(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Python3Visitor<Result>): Result;
}
export declare class Small_stmtContext extends ParserRuleContext {
    expr_stmt(): Expr_stmtContext | undefined;
    del_stmt(): Del_stmtContext | undefined;
    pass_stmt(): Pass_stmtContext | undefined;
    flow_stmt(): Flow_stmtContext | undefined;
    import_stmt(): Import_stmtContext | undefined;
    global_stmt(): Global_stmtContext | undefined;
    nonlocal_stmt(): Nonlocal_stmtContext | undefined;
    assert_stmt(): Assert_stmtContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Python3Visitor<Result>): Result;
}
export declare class Expr_stmtContext extends ParserRuleContext {
    test_star_expr(): Test_star_exprContext | undefined;
    testlist_star_expr(): Testlist_star_exprContext | undefined;
    augassign(): AugassignContext | undefined;
    expr_stmt_right(): Expr_stmt_rightContext | undefined;
    ASSIGN(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Python3Visitor<Result>): Result;
}
export declare class Expr_stmt_rightContext extends ParserRuleContext {
    test_star_expr(): Test_star_exprContext | undefined;
    expr_stmt_right(): Expr_stmt_rightContext | undefined;
    COLON(): TerminalNode | undefined;
    test(): TestContext | undefined;
    augassign(): AugassignContext | undefined;
    yield_expr(): Yield_exprContext | undefined;
    testlist(): TestlistContext | undefined;
    ASSIGN(): TerminalNode | undefined;
    testlist_star_expr(): Testlist_star_exprContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Python3Visitor<Result>): Result;
}
export declare class Test_star_exprContext extends ParserRuleContext {
    test(): TestContext | undefined;
    star_expr(): Star_exprContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Python3Visitor<Result>): Result;
}
export declare class Testlist_star_expr_arrayContext extends ParserRuleContext {
    test_star_expr(): Test_star_exprContext[];
    test_star_expr(i: number): Test_star_exprContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Python3Visitor<Result>): Result;
}
export declare class Testlist_star_exprContext extends ParserRuleContext {
    test_star_expr(): Test_star_exprContext | undefined;
    testlist_star_expr_array(): Testlist_star_expr_arrayContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Python3Visitor<Result>): Result;
}
export declare class AugassignContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Python3Visitor<Result>): Result;
}
export declare class Del_stmtContext extends ParserRuleContext {
    exprlist(): ExprlistContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Python3Visitor<Result>): Result;
}
export declare class Pass_stmtContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Python3Visitor<Result>): Result;
}
export declare class Flow_stmtContext extends ParserRuleContext {
    break_stmt(): Break_stmtContext | undefined;
    continue_stmt(): Continue_stmtContext | undefined;
    return_stmt(): Return_stmtContext | undefined;
    raise_stmt(): Raise_stmtContext | undefined;
    yield_stmt(): Yield_stmtContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Python3Visitor<Result>): Result;
}
export declare class Break_stmtContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Python3Visitor<Result>): Result;
}
export declare class Continue_stmtContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Python3Visitor<Result>): Result;
}
export declare class Return_stmtContext extends ParserRuleContext {
    testlist(): TestlistContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Python3Visitor<Result>): Result;
}
export declare class Yield_stmtContext extends ParserRuleContext {
    yield_expr(): Yield_exprContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Python3Visitor<Result>): Result;
}
export declare class Raise_stmtContext extends ParserRuleContext {
    test(): TestContext[];
    test(i: number): TestContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Python3Visitor<Result>): Result;
}
export declare class Import_stmtContext extends ParserRuleContext {
    import_name(): Import_nameContext | undefined;
    import_from(): Import_fromContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Python3Visitor<Result>): Result;
}
export declare class Import_nameContext extends ParserRuleContext {
    dotted_as_names(): Dotted_as_namesContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Python3Visitor<Result>): Result;
}
export declare class Import_fromContext extends ParserRuleContext {
    dotted_name(): Dotted_nameContext | undefined;
    import_as_names(): Import_as_namesContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Python3Visitor<Result>): Result;
}
export declare class Import_as_nameContext extends ParserRuleContext {
    NAME(): TerminalNode[];
    NAME(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Python3Visitor<Result>): Result;
}
export declare class Dotted_as_nameContext extends ParserRuleContext {
    dotted_name(): Dotted_nameContext;
    NAME(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Python3Visitor<Result>): Result;
}
export declare class Import_as_namesContext extends ParserRuleContext {
    import_as_name(): Import_as_nameContext[];
    import_as_name(i: number): Import_as_nameContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Python3Visitor<Result>): Result;
}
export declare class Dotted_as_namesContext extends ParserRuleContext {
    dotted_as_name(): Dotted_as_nameContext[];
    dotted_as_name(i: number): Dotted_as_nameContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Python3Visitor<Result>): Result;
}
export declare class Dotted_nameContext extends ParserRuleContext {
    NAME(): TerminalNode[];
    NAME(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Python3Visitor<Result>): Result;
}
export declare class Global_stmtContext extends ParserRuleContext {
    NAME(): TerminalNode[];
    NAME(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Python3Visitor<Result>): Result;
}
export declare class Nonlocal_stmtContext extends ParserRuleContext {
    NAME(): TerminalNode[];
    NAME(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Python3Visitor<Result>): Result;
}
export declare class Assert_stmtContext extends ParserRuleContext {
    test(): TestContext[];
    test(i: number): TestContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Python3Visitor<Result>): Result;
}
export declare class Compound_stmtContext extends ParserRuleContext {
    if_stmt(): If_stmtContext | undefined;
    while_stmt(): While_stmtContext | undefined;
    for_stmt(): For_stmtContext | undefined;
    try_stmt(): Try_stmtContext | undefined;
    with_stmt(): With_stmtContext | undefined;
    funcdef(): FuncdefContext | undefined;
    classdef(): ClassdefContext | undefined;
    decorated(): DecoratedContext | undefined;
    async_stmt(): Async_stmtContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Python3Visitor<Result>): Result;
}
export declare class Async_stmtContext extends ParserRuleContext {
    ASYNC(): TerminalNode;
    funcdef(): FuncdefContext | undefined;
    with_stmt(): With_stmtContext | undefined;
    for_stmt(): For_stmtContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Python3Visitor<Result>): Result;
}
export declare class If_stmtContext extends ParserRuleContext {
    test(): TestContext[];
    test(i: number): TestContext;
    suite(): SuiteContext[];
    suite(i: number): SuiteContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Python3Visitor<Result>): Result;
}
export declare class While_stmtContext extends ParserRuleContext {
    test(): TestContext;
    suite(): SuiteContext[];
    suite(i: number): SuiteContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Python3Visitor<Result>): Result;
}
export declare class For_stmtContext extends ParserRuleContext {
    exprlist(): ExprlistContext;
    testlist(): TestlistContext;
    suite(): SuiteContext[];
    suite(i: number): SuiteContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Python3Visitor<Result>): Result;
}
export declare class Try_stmtContext extends ParserRuleContext {
    suite(): SuiteContext[];
    suite(i: number): SuiteContext;
    except_clause(): Except_clauseContext[];
    except_clause(i: number): Except_clauseContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Python3Visitor<Result>): Result;
}
export declare class With_stmtContext extends ParserRuleContext {
    with_item(): With_itemContext[];
    with_item(i: number): With_itemContext;
    suite(): SuiteContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Python3Visitor<Result>): Result;
}
export declare class With_itemContext extends ParserRuleContext {
    test(): TestContext;
    expr(): ExprContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Python3Visitor<Result>): Result;
}
export declare class Except_clauseContext extends ParserRuleContext {
    test(): TestContext | undefined;
    NAME(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Python3Visitor<Result>): Result;
}
export declare class SuiteContext extends ParserRuleContext {
    simple_stmt(): Simple_stmtContext | undefined;
    NEWLINE(): TerminalNode | undefined;
    INDENT(): TerminalNode | undefined;
    stmts(): StmtsContext | undefined;
    DEDENT(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Python3Visitor<Result>): Result;
}
export declare class TestContext extends ParserRuleContext {
    or_test(): Or_testContext[];
    or_test(i: number): Or_testContext;
    test(): TestContext | undefined;
    lambdef(): LambdefContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Python3Visitor<Result>): Result;
}
export declare class Test_nocondContext extends ParserRuleContext {
    or_test(): Or_testContext | undefined;
    lambdef_nocond(): Lambdef_nocondContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Python3Visitor<Result>): Result;
}
export declare class LambdefContext extends ParserRuleContext {
    test(): TestContext;
    varargslist(): VarargslistContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Python3Visitor<Result>): Result;
}
export declare class Lambdef_nocondContext extends ParserRuleContext {
    test_nocond(): Test_nocondContext;
    varargslist(): VarargslistContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Python3Visitor<Result>): Result;
}
export declare class Or_testContext extends ParserRuleContext {
    and_test(): And_testContext;
    or_test(): Or_testContext | undefined;
    OR(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Python3Visitor<Result>): Result;
}
export declare class And_testContext extends ParserRuleContext {
    not_test(): Not_testContext;
    and_test(): And_testContext | undefined;
    AND(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Python3Visitor<Result>): Result;
}
export declare class Not_testContext extends ParserRuleContext {
    comparison(): ComparisonContext | undefined;
    NOT(): TerminalNode | undefined;
    not_test(): Not_testContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Python3Visitor<Result>): Result;
}
export declare class ComparisonContext extends ParserRuleContext {
    expr(): ExprContext;
    comparison(): ComparisonContext | undefined;
    comp_op(): Comp_opContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Python3Visitor<Result>): Result;
}
export declare class Comp_opContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Python3Visitor<Result>): Result;
}
export declare class Star_exprContext extends ParserRuleContext {
    STAR(): TerminalNode;
    expr(): ExprContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Python3Visitor<Result>): Result;
}
export declare class ExprContext extends ParserRuleContext {
    xor_expr(): Xor_exprContext;
    expr(): ExprContext | undefined;
    OR_OP(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Python3Visitor<Result>): Result;
}
export declare class Xor_exprContext extends ParserRuleContext {
    and_expr(): And_exprContext;
    xor_expr(): Xor_exprContext | undefined;
    XOR(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Python3Visitor<Result>): Result;
}
export declare class And_exprContext extends ParserRuleContext {
    shift_expr(): Shift_exprContext;
    and_expr(): And_exprContext | undefined;
    AND_OP(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Python3Visitor<Result>): Result;
}
export declare class Shift_exprContext extends ParserRuleContext {
    arith_expr(): Arith_exprContext;
    shift_expr(): Shift_exprContext | undefined;
    Shifts(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Python3Visitor<Result>): Result;
}
export declare class Arith_exprContext extends ParserRuleContext {
    term(): TermContext;
    arith_expr(): Arith_exprContext | undefined;
    AddMinus(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Python3Visitor<Result>): Result;
}
export declare class TermContext extends ParserRuleContext {
    factor(): FactorContext;
    term(): TermContext | undefined;
    TermOp(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Python3Visitor<Result>): Result;
}
export declare class FactorContext extends ParserRuleContext {
    power(): PowerContext | undefined;
    FactorOp(): TerminalNode | undefined;
    factor(): FactorContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Python3Visitor<Result>): Result;
}
export declare class PowerContext extends ParserRuleContext {
    atom_expr(): Atom_exprContext;
    POWER(): TerminalNode | undefined;
    factor(): FactorContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Python3Visitor<Result>): Result;
}
export declare class Atom_exprContext extends ParserRuleContext {
    atom(): AtomContext | undefined;
    method_call_of_method_return(): Method_call_of_method_returnContext | undefined;
    method_call_no_arg(): Method_call_no_argContext | undefined;
    trailer(): TrailerContext | undefined;
    AWAIT(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Python3Visitor<Result>): Result;
}
export declare class AtomContext extends ParserRuleContext {
    array(): ArrayContext | undefined;
    ident(): IdentContext | undefined;
    number(): NumberContext | undefined;
    bool(): BoolContext | undefined;
    yield_expr(): Yield_exprContext | undefined;
    testlist_comp(): Testlist_compContext | undefined;
    dictorsetmaker(): DictorsetmakerContext | undefined;
    STRING(): TerminalNode[];
    STRING(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Python3Visitor<Result>): Result;
}
export declare class ArrayContext extends ParserRuleContext {
    testlist_comp(): Testlist_compContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Python3Visitor<Result>): Result;
}
export declare class IdentContext extends ParserRuleContext {
    NAME(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Python3Visitor<Result>): Result;
}
export declare class BoolContext extends ParserRuleContext {
    TRUE(): TerminalNode | undefined;
    FALSE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Python3Visitor<Result>): Result;
}
export declare class Testlist_compContext extends ParserRuleContext {
    test_star_expr(): Test_star_exprContext[];
    test_star_expr(i: number): Test_star_exprContext;
    comp_for(): Comp_forContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Python3Visitor<Result>): Result;
}
export declare class TrailerContext extends ParserRuleContext {
    method_call(): Method_callContext[];
    method_call(i: number): Method_callContext;
    array_access(): Array_accessContext[];
    array_access(i: number): Array_accessContext;
    field_access(): Field_accessContext[];
    field_access(i: number): Field_accessContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Python3Visitor<Result>): Result;
}
export declare class Method_call_of_method_returnContext extends ParserRuleContext {
    method_call_no_arg(): Method_call_no_argContext[];
    method_call_no_arg(i: number): Method_call_no_argContext;
    DOT(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Python3Visitor<Result>): Result;
}
export declare class Method_call_no_argContext extends ParserRuleContext {
    atom(): AtomContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Python3Visitor<Result>): Result;
}
export declare class Method_callContext extends ParserRuleContext {
    arglist(): ArglistContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Python3Visitor<Result>): Result;
}
export declare class Array_accessContext extends ParserRuleContext {
    OPEN_BRACK(): TerminalNode;
    subscriptlist(): SubscriptlistContext;
    CLOSE_BRACK(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Python3Visitor<Result>): Result;
}
export declare class Field_accessContext extends ParserRuleContext {
    DOT(): TerminalNode;
    atom_expr(): Atom_exprContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Python3Visitor<Result>): Result;
}
export declare class SubscriptlistContext extends ParserRuleContext {
    subscript(): SubscriptContext[];
    subscript(i: number): SubscriptContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Python3Visitor<Result>): Result;
}
export declare class SubscriptContext extends ParserRuleContext {
    test(): TestContext[];
    test(i: number): TestContext;
    sliceop(): SliceopContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Python3Visitor<Result>): Result;
}
export declare class SliceopContext extends ParserRuleContext {
    test(): TestContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Python3Visitor<Result>): Result;
}
export declare class ExprlistContext extends ParserRuleContext {
    expr(): ExprContext[];
    expr(i: number): ExprContext;
    star_expr(): Star_exprContext[];
    star_expr(i: number): Star_exprContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Python3Visitor<Result>): Result;
}
export declare class Testlist_arrayContext extends ParserRuleContext {
    test(): TestContext[];
    test(i: number): TestContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Python3Visitor<Result>): Result;
}
export declare class TestlistContext extends ParserRuleContext {
    test(): TestContext | undefined;
    testlist_array(): Testlist_arrayContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Python3Visitor<Result>): Result;
}
export declare class DictorsetmakerContext extends ParserRuleContext {
    test(): TestContext[];
    test(i: number): TestContext;
    expr(): ExprContext[];
    expr(i: number): ExprContext;
    comp_for(): Comp_forContext | undefined;
    star_expr(): Star_exprContext[];
    star_expr(i: number): Star_exprContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Python3Visitor<Result>): Result;
}
export declare class ClassdefContext extends ParserRuleContext {
    NAME(): TerminalNode;
    suite(): SuiteContext;
    arglist(): ArglistContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Python3Visitor<Result>): Result;
}
export declare class ArglistContext extends ParserRuleContext {
    argument(): ArgumentContext[];
    argument(i: number): ArgumentContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Python3Visitor<Result>): Result;
}
export declare class ArgumentContext extends ParserRuleContext {
    test(): TestContext[];
    test(i: number): TestContext;
    comp_for(): Comp_forContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Python3Visitor<Result>): Result;
}
export declare class Comp_iterContext extends ParserRuleContext {
    comp_for(): Comp_forContext | undefined;
    comp_if(): Comp_ifContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Python3Visitor<Result>): Result;
}
export declare class Comp_forContext extends ParserRuleContext {
    exprlist(): ExprlistContext;
    or_test(): Or_testContext;
    ASYNC(): TerminalNode | undefined;
    comp_iter(): Comp_iterContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Python3Visitor<Result>): Result;
}
export declare class Comp_ifContext extends ParserRuleContext {
    test_nocond(): Test_nocondContext;
    comp_iter(): Comp_iterContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Python3Visitor<Result>): Result;
}
export declare class Encoding_declContext extends ParserRuleContext {
    NAME(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Python3Visitor<Result>): Result;
}
export declare class Yield_exprContext extends ParserRuleContext {
    yield_arg(): Yield_argContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Python3Visitor<Result>): Result;
}
export declare class Yield_argContext extends ParserRuleContext {
    test(): TestContext | undefined;
    testlist(): TestlistContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Python3Visitor<Result>): Result;
}
export declare class NumberContext extends ParserRuleContext {
    integer(): IntegerContext | undefined;
    float(): FloatContext | undefined;
    imaginary(): ImaginaryContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Python3Visitor<Result>): Result;
}
export declare class IntegerContext extends ParserRuleContext {
    INTEGER(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Python3Visitor<Result>): Result;
}
export declare class FloatContext extends ParserRuleContext {
    FLOAT_NUMBER(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Python3Visitor<Result>): Result;
}
export declare class ImaginaryContext extends ParserRuleContext {
    IMAG_NUMBER(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Python3Visitor<Result>): Result;
}
