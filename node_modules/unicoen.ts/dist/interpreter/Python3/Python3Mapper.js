"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Python3Mapper = void 0;
// tslint:disable
const antlr4ts_1 = require("antlr4ts");
const TerminalNode_1 = require("antlr4ts/tree/TerminalNode");
const Python3Lexer_1 = require("./Python3Lexer");
const Python3Parser_1 = require("./Python3Parser");
const UniEnhancedFor_1 = require("../../node/UniEnhancedFor");
const UniExpr_1 = require("../../node/UniExpr");
const UniArray_1 = require("../../node/UniArray");
const UniBinOp_1 = require("../../node/UniBinOp");
const UniBlock_1 = require("../../node/UniBlock");
const UniBoolLiteral_1 = require("../../node/UniBoolLiteral");
const UniBreak_1 = require("../../node/UniBreak");
const UniContinue_1 = require("../../node/UniContinue");
const UniDoubleLiteral_1 = require("../../node/UniDoubleLiteral");
const UniIdent_1 = require("../../node/UniIdent");
const UniIf_1 = require("../../node/UniIf");
const UniIntLiteral_1 = require("../../node/UniIntLiteral");
const UniMethodCall_1 = require("../../node/UniMethodCall");
const UniWhile_1 = require("../../node/UniWhile");
const UniUnaryOp_1 = require("../../node/UniUnaryOp");
const UniReturn_1 = require("../../node/UniReturn");
const SyntaxErrorListener_1 = require("../mapper/SyntaxErrorListener");
const Mapper_1 = require("../mapper/Mapper");
require("../../node_helper/Extension");
class Python3Mapper extends Mapper_1.Mapper {
    preProcess(text) {
        return text;
    }
    parseToANTLRTree(code) {
        const preProcessedCode = this.preProcess(code);
        const chars = new antlr4ts_1.ANTLRInputStream(preProcessedCode);
        const lexer = new Python3Lexer_1.Python3Lexer(chars);
        const tokens = new antlr4ts_1.CommonTokenStream(lexer);
        const parser = new Python3Parser_1.Python3Parser(tokens);
        parser.addErrorListener(new SyntaxErrorListener_1.SyntaxErrorListener());
        const tree = parser.translationunit();
        this.parser = parser;
        return tree;
    }
    visitTranslationunit(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const body = [];
        map.set('body', body);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 204:
                        {
                            body.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        const node = this.castTo(map, UniBlock_1.UniBlock);
        return node;
    }
    visitFile_input(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const add = [];
        map.set('add', add);
        const n = ctx.childCount;
        if (0 < n) {
            for (let i = 0; i < n; ++i) {
                const it = ctx.getChild(i);
                if (it instanceof antlr4ts_1.RuleContext) {
                    switch (it.invokingState) {
                        case 215:
                            {
                                const results = this.flatten(this.visit(it));
                                if (Array.isArray(results)) {
                                    for (const result of results)
                                        add.push(result);
                                }
                                else
                                    add.push(results);
                            }
                            break;
                        default:
                            {
                                none.push(this.visit(it));
                            }
                            break;
                    }
                }
                else if (it instanceof TerminalNode_1.TerminalNode) {
                    switch (it.symbol.type) {
                        default:
                            {
                                none.push(this.visit(it));
                            }
                            break;
                    }
                }
            }
        }
        const node = this.castToList(map, UniExpr_1.UniExpr);
        return node;
    }
    visitStmts(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const add = [];
        map.set('add', add);
        const n = ctx.childCount;
        if (0 < n) {
            for (let i = 0; i < n; ++i) {
                const it = ctx.getChild(i);
                if (it instanceof antlr4ts_1.RuleContext) {
                    switch (it.invokingState) {
                        case 435:
                            {
                                const results = this.flatten(this.visit(it));
                                if (Array.isArray(results)) {
                                    for (const result of results)
                                        add.push(result);
                                }
                                else
                                    add.push(results);
                            }
                            break;
                        default:
                            {
                                none.push(this.visit(it));
                            }
                            break;
                    }
                }
                else if (it instanceof TerminalNode_1.TerminalNode) {
                    switch (it.symbol.type) {
                        default:
                            {
                                none.push(this.visit(it));
                            }
                            break;
                    }
                }
            }
        }
        const node = this.castToList(map, UniExpr_1.UniExpr);
        return node;
    }
    visitSimple_stmt(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const ret = [];
        const n = ctx.childCount;
        if (0 < n) {
            for (let i = 0; i < n; ++i) {
                const it = ctx.getChild(i);
                if (it instanceof antlr4ts_1.RuleContext) {
                    switch (it.invokingState) {
                        case 444:
                            {
                                ret.push(this.visit(it));
                            }
                            break;
                        default:
                            {
                                none.push(this.visit(it));
                            }
                            break;
                    }
                }
                else if (it instanceof TerminalNode_1.TerminalNode) {
                    switch (it.symbol.type) {
                        default:
                            {
                                none.push(this.visit(it));
                            }
                            break;
                    }
                }
            }
        }
        if (!ret.isEmpty()) {
            return ret;
        }
        const node = this.castToList(map, UniExpr_1.UniExpr);
        return node;
    }
    visitExpr_stmt(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const ret = [];
        const left = [];
        map.set('left', left);
        const right = [];
        map.set('right', right);
        const operator = [];
        map.set('operator', operator);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 471:
                        {
                            ret.push(this.visit(it));
                        }
                        break;
                    case 472:
                        {
                            left.push(this.visit(it));
                        }
                        break;
                    case 473:
                        {
                            operator.push(this.visit(it));
                        }
                        break;
                    case 474:
                        {
                            right.push(this.visit(it));
                        }
                        break;
                    case 476:
                        {
                            left.push(this.visit(it));
                        }
                        break;
                    case 478:
                        {
                            right.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    case Python3Parser_1.Python3Parser.ASSIGN:
                        {
                            operator.push(this.flatten(this.visit(it)));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        if (!ret.isEmpty()) {
            return ret;
        }
        const node = this.castTo(map, UniBinOp_1.UniBinOp);
        return node;
    }
    visitExpr_stmt_right(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const ret = [];
        const left = [];
        map.set('left', left);
        const right = [];
        map.set('right', right);
        const operator = [];
        map.set('operator', operator);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 483:
                        {
                            ret.push(this.visit(it));
                        }
                        break;
                    case 36:
                        {
                            left.push(this.visit(it));
                        }
                        break;
                    case 487:
                        {
                            right.push(this.visit(it));
                        }
                        break;
                    case 489:
                        {
                            operator.push(this.visit(it));
                        }
                        break;
                    case 491:
                        {
                            right.push(this.visit(it));
                        }
                        break;
                    case 497:
                        {
                            right.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    case Python3Parser_1.Python3Parser.COLON:
                        {
                            operator.push(this.flatten(this.visit(it)));
                        }
                        break;
                    case Python3Parser_1.Python3Parser.ASSIGN:
                        {
                            operator.push(this.flatten(this.visit(it)));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        if (!ret.isEmpty()) {
            return ret;
        }
        const node = this.castTo(map, UniBinOp_1.UniBinOp);
        return node;
    }
    visitTestlist_star_expr_array(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const add = [];
        map.set('add', add);
        const n = ctx.childCount;
        if (0 < n) {
            for (let i = 0; i < n; ++i) {
                const it = ctx.getChild(i);
                if (it instanceof antlr4ts_1.RuleContext) {
                    switch (it.invokingState) {
                        case 509:
                            {
                                const results = this.flatten(this.visit(it));
                                if (Array.isArray(results)) {
                                    for (const result of results)
                                        add.push(result);
                                }
                                else
                                    add.push(results);
                            }
                            break;
                        case 511:
                            {
                                const results = this.flatten(this.visit(it));
                                if (Array.isArray(results)) {
                                    for (const result of results)
                                        add.push(result);
                                }
                                else
                                    add.push(results);
                            }
                            break;
                        default:
                            {
                                none.push(this.visit(it));
                            }
                            break;
                    }
                }
                else if (it instanceof TerminalNode_1.TerminalNode) {
                    switch (it.symbol.type) {
                        default:
                            {
                                none.push(this.visit(it));
                            }
                            break;
                    }
                }
            }
        }
        const node = this.castToList(map, UniExpr_1.UniExpr);
        return node;
    }
    visitTestlist_star_expr(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const ret = [];
        const items = [];
        map.set('items', items);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 520:
                        {
                            ret.push(this.visit(it));
                        }
                        break;
                    case 521:
                        {
                            items.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        if (!ret.isEmpty()) {
            return ret;
        }
        const node = this.castTo(map, UniArray_1.UniArray);
        return node;
    }
    visitBreak_stmt(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        const node = this.castTo(map, UniBreak_1.UniBreak);
        return node;
    }
    visitContinue_stmt(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        const node = this.castTo(map, UniContinue_1.UniContinue);
        return node;
    }
    visitReturn_stmt(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const value = [];
        map.set('value', value);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 543:
                        {
                            value.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        const node = this.castTo(map, UniReturn_1.UniReturn);
        return node;
    }
    visitIf_stmt(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const trueStatement = [];
        map.set('trueStatement', trueStatement);
        const falseStatement = [];
        map.set('falseStatement', falseStatement);
        const cond = [];
        map.set('cond', cond);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 666:
                        {
                            cond.push(this.visit(it));
                        }
                        break;
                    case 668:
                        {
                            trueStatement.push(this.visit(it));
                        }
                        break;
                    case 672:
                        {
                            falseStatement.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        const node = this.castTo(map, UniIf_1.UniIf);
        return node;
    }
    visitWhile_stmt(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const statement = [];
        map.set('statement', statement);
        const cond = [];
        map.set('cond', cond);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 685:
                        {
                            cond.push(this.visit(it));
                        }
                        break;
                    case 687:
                        {
                            statement.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        const node = this.castTo(map, UniWhile_1.UniWhile);
        return node;
    }
    visitFor_stmt(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const container = [];
        map.set('container', container);
        const name = [];
        map.set('name', name);
        const statement = [];
        map.set('statement', statement);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 694:
                        {
                            name.push(this.visit(it));
                        }
                        break;
                    case 696:
                        {
                            container.push(this.visit(it));
                        }
                        break;
                    case 698:
                        {
                            statement.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        const node = this.castTo(map, UniEnhancedFor_1.UniEnhancedFor);
        return node;
    }
    visitSuite(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const ret = [];
        const body = [];
        map.set('body', body);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 755:
                        {
                            ret.push(this.visit(it));
                        }
                        break;
                    case 758:
                        {
                            body.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        if (!ret.isEmpty()) {
            return ret;
        }
        const node = this.castTo(map, UniBlock_1.UniBlock);
        return node;
    }
    visitOr_test(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const ret = [];
        const left = [];
        map.set('left', left);
        const right = [];
        map.set('right', right);
        const operator = [];
        map.set('operator', operator);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 793:
                        {
                            ret.push(this.visit(it));
                        }
                        break;
                    case 112:
                        {
                            left.push(this.visit(it));
                        }
                        break;
                    case 797:
                        {
                            right.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    case Python3Parser_1.Python3Parser.OR:
                        {
                            operator.push(this.flatten(this.visit(it)));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        if (!ret.isEmpty()) {
            return ret;
        }
        const node = this.castTo(map, UniBinOp_1.UniBinOp);
        return node;
    }
    visitAnd_test(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const ret = [];
        const left = [];
        map.set('left', left);
        const right = [];
        map.set('right', right);
        const operator = [];
        map.set('operator', operator);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 804:
                        {
                            ret.push(this.visit(it));
                        }
                        break;
                    case 114:
                        {
                            left.push(this.visit(it));
                        }
                        break;
                    case 808:
                        {
                            right.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    case Python3Parser_1.Python3Parser.AND:
                        {
                            operator.push(this.flatten(this.visit(it)));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        if (!ret.isEmpty()) {
            return ret;
        }
        const node = this.castTo(map, UniBinOp_1.UniBinOp);
        return node;
    }
    visitNot_test(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const ret = [];
        const expr = [];
        map.set('expr', expr);
        const operator = [];
        map.set('operator', operator);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 814:
                        {
                            ret.push(this.visit(it));
                        }
                        break;
                    case 816:
                        {
                            expr.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    case Python3Parser_1.Python3Parser.NOT:
                        {
                            operator.push(this.flatten(this.visit(it)));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        if (!ret.isEmpty()) {
            return ret;
        }
        const node = this.castTo(map, UniUnaryOp_1.UniUnaryOp);
        return node;
    }
    visitComparison(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const ret = [];
        const left = [];
        map.set('left', left);
        const right = [];
        map.set('right', right);
        const operator = [];
        map.set('operator', operator);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 820:
                        {
                            ret.push(this.visit(it));
                        }
                        break;
                    case 118:
                        {
                            left.push(this.visit(it));
                        }
                        break;
                    case 823:
                        {
                            operator.push(this.visit(it));
                        }
                        break;
                    case 824:
                        {
                            right.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        if (!ret.isEmpty()) {
            return ret;
        }
        const node = this.castTo(map, UniBinOp_1.UniBinOp);
        return node;
    }
    visitStar_expr(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const expr = [];
        map.set('expr', expr);
        const operator = [];
        map.set('operator', operator);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 847:
                        {
                            expr.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    case Python3Parser_1.Python3Parser.STAR:
                        {
                            operator.push(this.flatten(this.visit(it)));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        const node = this.castTo(map, UniUnaryOp_1.UniUnaryOp);
        return node;
    }
    visitExpr(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const ret = [];
        const left = [];
        map.set('left', left);
        const right = [];
        map.set('right', right);
        const operator = [];
        map.set('operator', operator);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 850:
                        {
                            ret.push(this.visit(it));
                        }
                        break;
                    case 124:
                        {
                            left.push(this.visit(it));
                        }
                        break;
                    case 854:
                        {
                            right.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    case Python3Parser_1.Python3Parser.OR_OP:
                        {
                            operator.push(this.flatten(this.visit(it)));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        if (!ret.isEmpty()) {
            return ret;
        }
        const node = this.castTo(map, UniBinOp_1.UniBinOp);
        return node;
    }
    visitXor_expr(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const ret = [];
        const left = [];
        map.set('left', left);
        const right = [];
        map.set('right', right);
        const operator = [];
        map.set('operator', operator);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 861:
                        {
                            ret.push(this.visit(it));
                        }
                        break;
                    case 126:
                        {
                            left.push(this.visit(it));
                        }
                        break;
                    case 865:
                        {
                            right.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    case Python3Parser_1.Python3Parser.XOR:
                        {
                            operator.push(this.flatten(this.visit(it)));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        if (!ret.isEmpty()) {
            return ret;
        }
        const node = this.castTo(map, UniBinOp_1.UniBinOp);
        return node;
    }
    visitAnd_expr(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const ret = [];
        const left = [];
        map.set('left', left);
        const right = [];
        map.set('right', right);
        const operator = [];
        map.set('operator', operator);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 872:
                        {
                            ret.push(this.visit(it));
                        }
                        break;
                    case 128:
                        {
                            left.push(this.visit(it));
                        }
                        break;
                    case 876:
                        {
                            right.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    case Python3Parser_1.Python3Parser.AND_OP:
                        {
                            operator.push(this.flatten(this.visit(it)));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        if (!ret.isEmpty()) {
            return ret;
        }
        const node = this.castTo(map, UniBinOp_1.UniBinOp);
        return node;
    }
    visitShift_expr(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const ret = [];
        const left = [];
        map.set('left', left);
        const right = [];
        map.set('right', right);
        const operator = [];
        map.set('operator', operator);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 883:
                        {
                            ret.push(this.visit(it));
                        }
                        break;
                    case 130:
                        {
                            left.push(this.visit(it));
                        }
                        break;
                    case 887:
                        {
                            right.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    case Python3Parser_1.Python3Parser.Shifts:
                        {
                            operator.push(this.flatten(this.visit(it)));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        if (!ret.isEmpty()) {
            return ret;
        }
        const node = this.castTo(map, UniBinOp_1.UniBinOp);
        return node;
    }
    visitArith_expr(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const ret = [];
        const left = [];
        map.set('left', left);
        const right = [];
        map.set('right', right);
        const operator = [];
        map.set('operator', operator);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 894:
                        {
                            ret.push(this.visit(it));
                        }
                        break;
                    case 132:
                        {
                            left.push(this.visit(it));
                        }
                        break;
                    case 898:
                        {
                            right.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    case Python3Parser_1.Python3Parser.AddMinus:
                        {
                            operator.push(this.flatten(this.visit(it)));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        if (!ret.isEmpty()) {
            return ret;
        }
        const node = this.castTo(map, UniBinOp_1.UniBinOp);
        return node;
    }
    visitTerm(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const ret = [];
        const left = [];
        map.set('left', left);
        const right = [];
        map.set('right', right);
        const operator = [];
        map.set('operator', operator);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 905:
                        {
                            ret.push(this.visit(it));
                        }
                        break;
                    case 134:
                        {
                            left.push(this.visit(it));
                        }
                        break;
                    case 909:
                        {
                            right.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    case Python3Parser_1.Python3Parser.TermOp:
                        {
                            operator.push(this.flatten(this.visit(it)));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        if (!ret.isEmpty()) {
            return ret;
        }
        const node = this.castTo(map, UniBinOp_1.UniBinOp);
        return node;
    }
    visitFactor(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const ret = [];
        const expr = [];
        map.set('expr', expr);
        const operator = [];
        map.set('operator', operator);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 915:
                        {
                            ret.push(this.visit(it));
                        }
                        break;
                    case 917:
                        {
                            expr.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    case Python3Parser_1.Python3Parser.FactorOp:
                        {
                            operator.push(this.flatten(this.visit(it)));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        if (!ret.isEmpty()) {
            return ret;
        }
        const node = this.castTo(map, UniUnaryOp_1.UniUnaryOp);
        return node;
    }
    visitPower(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const ret = [];
        const left = [];
        map.set('left', left);
        const right = [];
        map.set('right', right);
        const operator = [];
        map.set('operator', operator);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 920:
                        {
                            ret.push(this.visit(it));
                        }
                        break;
                    case 921:
                        {
                            left.push(this.visit(it));
                        }
                        break;
                    case 923:
                        {
                            right.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    case Python3Parser_1.Python3Parser.POWER:
                        {
                            operator.push(this.flatten(this.visit(it)));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        if (!ret.isEmpty()) {
            return ret;
        }
        const node = this.castTo(map, UniBinOp_1.UniBinOp);
        return node;
    }
    visitAtom_expr(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const ret = [];
        const left = [];
        map.set('left', left);
        const right = [];
        map.set('right', right);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 927:
                        {
                            ret.push(this.visit(it));
                        }
                        break;
                    case 928:
                        {
                            ret.push(this.visit(it));
                        }
                        break;
                    case 929:
                        {
                            ret.push(this.visit(it));
                        }
                        break;
                    case 933:
                        {
                            left.push(this.visit(it));
                        }
                        break;
                    case 934:
                        {
                            right.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        if (!ret.isEmpty()) {
            return ret;
        }
        const node = this.castTo(map, UniBinOp_1.UniBinOp);
        return node;
    }
    visitArray(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const items = [];
        map.set('items', items);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 963:
                        {
                            items.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        const node = this.castTo(map, UniArray_1.UniArray);
        return node;
    }
    visitIdent(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const name = [];
        map.set('name', name);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    case Python3Parser_1.Python3Parser.NAME:
                        {
                            name.push(this.flatten(this.visit(it)));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        const node = this.castTo(map, UniIdent_1.UniIdent);
        return node;
    }
    visitBool(ctx) {
        const findFirst = (ctx) => {
            const n = ctx.childCount;
            for (let i = 0; i < n; ++i) {
                const it = ctx.getChild(i);
                if (it instanceof TerminalNode_1.TerminalNode) {
                    if (it.symbol.type == Python3Parser_1.Python3Parser.TRUE) {
                        return it;
                    }
                    if (it.symbol.type == Python3Parser_1.Python3Parser.FALSE) {
                        return it;
                    }
                }
            }
            return undefined;
        };
        const text = this.visit(findFirst(ctx));
        return new UniBoolLiteral_1.UniBoolLiteral(Boolean(text));
    }
    visitTestlist_comp(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const add = [];
        map.set('add', add);
        const n = ctx.childCount;
        if (0 < n) {
            for (let i = 0; i < n; ++i) {
                const it = ctx.getChild(i);
                if (it instanceof antlr4ts_1.RuleContext) {
                    switch (it.invokingState) {
                        case 974:
                            {
                                const results = this.flatten(this.visit(it));
                                if (Array.isArray(results)) {
                                    for (const result of results)
                                        add.push(result);
                                }
                                else
                                    add.push(results);
                            }
                            break;
                        case 977:
                            {
                                const results = this.flatten(this.visit(it));
                                if (Array.isArray(results)) {
                                    for (const result of results)
                                        add.push(result);
                                }
                                else
                                    add.push(results);
                            }
                            break;
                        default:
                            {
                                none.push(this.visit(it));
                            }
                            break;
                    }
                }
                else if (it instanceof TerminalNode_1.TerminalNode) {
                    switch (it.symbol.type) {
                        default:
                            {
                                none.push(this.visit(it));
                            }
                            break;
                    }
                }
            }
        }
        const node = this.castToList(map, UniExpr_1.UniExpr);
        return node;
    }
    visitTrailer(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const add = [];
        map.set('add', add);
        const n = ctx.childCount;
        if (0 < n) {
            for (let i = 0; i < n; ++i) {
                const it = ctx.getChild(i);
                if (it instanceof antlr4ts_1.RuleContext) {
                    switch (it.invokingState) {
                        case 988:
                            {
                                const results = this.flatten(this.visit(it));
                                if (Array.isArray(results)) {
                                    for (const result of results)
                                        add.push(result);
                                }
                                else
                                    add.push(results);
                            }
                            break;
                        case 989:
                            {
                                const results = this.flatten(this.visit(it));
                                if (Array.isArray(results)) {
                                    for (const result of results)
                                        add.push(result);
                                }
                                else
                                    add.push(results);
                            }
                            break;
                        case 990:
                            {
                                const results = this.flatten(this.visit(it));
                                if (Array.isArray(results)) {
                                    for (const result of results)
                                        add.push(result);
                                }
                                else
                                    add.push(results);
                            }
                            break;
                        default:
                            {
                                none.push(this.visit(it));
                            }
                            break;
                    }
                }
                else if (it instanceof TerminalNode_1.TerminalNode) {
                    switch (it.symbol.type) {
                        default:
                            {
                                none.push(this.visit(it));
                            }
                            break;
                    }
                }
            }
        }
        const node = this.castToList(map, UniExpr_1.UniExpr);
        return node;
    }
    visitMethod_call_of_method_return(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const left = [];
        map.set('left', left);
        const right = [];
        map.set('right', right);
        const operator = [];
        map.set('operator', operator);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 996:
                        {
                            left.push(this.visit(it));
                        }
                        break;
                    case 998:
                        {
                            right.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    case Python3Parser_1.Python3Parser.DOT:
                        {
                            operator.push(this.flatten(this.visit(it)));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        const node = this.castTo(map, UniBinOp_1.UniBinOp);
        return node;
    }
    visitMethod_call_no_arg(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const methodName = [];
        map.set('methodName', methodName);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 1000:
                        {
                            methodName.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        const node = this.castTo(map, UniMethodCall_1.UniMethodCall);
        return node;
    }
    visitMethod_call(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const args = [];
        map.set('args', args);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 1005:
                        {
                            args.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        const node = this.castTo(map, UniMethodCall_1.UniMethodCall);
        return node;
    }
    visitArray_access(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const right = [];
        map.set('right', right);
        const operator = [];
        map.set('operator', operator);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 1009:
                        {
                            right.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    case Python3Parser_1.Python3Parser.OPEN_BRACK:
                        {
                            operator.push(this.flatten(this.visit(it)));
                        }
                        break;
                    case Python3Parser_1.Python3Parser.CLOSE_BRACK:
                        {
                            operator.push(this.flatten(this.visit(it)));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        const node = this.castTo(map, UniBinOp_1.UniBinOp);
        return node;
    }
    visitField_access(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const right = [];
        map.set('right', right);
        const operator = [];
        map.set('operator', operator);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 1013:
                        {
                            right.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    case Python3Parser_1.Python3Parser.DOT:
                        {
                            operator.push(this.flatten(this.visit(it)));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        const node = this.castTo(map, UniBinOp_1.UniBinOp);
        return node;
    }
    visitTestlist_array(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const add = [];
        map.set('add', add);
        const n = ctx.childCount;
        if (0 < n) {
            for (let i = 0; i < n; ++i) {
                const it = ctx.getChild(i);
                if (it instanceof antlr4ts_1.RuleContext) {
                    switch (it.invokingState) {
                        case 1060:
                            {
                                const results = this.flatten(this.visit(it));
                                if (Array.isArray(results)) {
                                    for (const result of results)
                                        add.push(result);
                                }
                                else
                                    add.push(results);
                            }
                            break;
                        case 1062:
                            {
                                const results = this.flatten(this.visit(it));
                                if (Array.isArray(results)) {
                                    for (const result of results)
                                        add.push(result);
                                }
                                else
                                    add.push(results);
                            }
                            break;
                        default:
                            {
                                none.push(this.visit(it));
                            }
                            break;
                    }
                }
                else if (it instanceof TerminalNode_1.TerminalNode) {
                    switch (it.symbol.type) {
                        default:
                            {
                                none.push(this.visit(it));
                            }
                            break;
                    }
                }
            }
        }
        const node = this.castToList(map, UniExpr_1.UniExpr);
        return node;
    }
    visitTestlist(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const ret = [];
        const items = [];
        map.set('items', items);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 1071:
                        {
                            ret.push(this.visit(it));
                        }
                        break;
                    case 1072:
                        {
                            items.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        if (!ret.isEmpty()) {
            return ret;
        }
        const node = this.castTo(map, UniArray_1.UniArray);
        return node;
    }
    visitArglist(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const add = [];
        map.set('add', add);
        const n = ctx.childCount;
        if (0 < n) {
            for (let i = 0; i < n; ++i) {
                const it = ctx.getChild(i);
                if (it instanceof antlr4ts_1.RuleContext) {
                    switch (it.invokingState) {
                        case 1137:
                            {
                                const results = this.flatten(this.visit(it));
                                if (Array.isArray(results)) {
                                    for (const result of results)
                                        add.push(result);
                                }
                                else
                                    add.push(results);
                            }
                            break;
                        case 1139:
                            {
                                const results = this.flatten(this.visit(it));
                                if (Array.isArray(results)) {
                                    for (const result of results)
                                        add.push(result);
                                }
                                else
                                    add.push(results);
                            }
                            break;
                        default:
                            {
                                none.push(this.visit(it));
                            }
                            break;
                    }
                }
                else if (it instanceof TerminalNode_1.TerminalNode) {
                    switch (it.symbol.type) {
                        default:
                            {
                                none.push(this.visit(it));
                            }
                            break;
                    }
                }
            }
        }
        const node = this.castToList(map, UniExpr_1.UniExpr);
        return node;
    }
    visitInteger(ctx) {
        const findFirst = (ctx) => {
            const n = ctx.childCount;
            for (let i = 0; i < n; ++i) {
                const it = ctx.getChild(i);
                if (it instanceof TerminalNode_1.TerminalNode) {
                    if (it.symbol.type == Python3Parser_1.Python3Parser.INTEGER) {
                        return it;
                    }
                }
            }
            return undefined;
        };
        const text = this.visit(findFirst(ctx));
        return new UniIntLiteral_1.UniIntLiteral(Number(text));
    }
    visitFloat(ctx) {
        const findFirst = (ctx) => {
            const n = ctx.childCount;
            for (let i = 0; i < n; ++i) {
                const it = ctx.getChild(i);
                if (it instanceof TerminalNode_1.TerminalNode) {
                    if (it.symbol.type == Python3Parser_1.Python3Parser.FLOAT_NUMBER) {
                        return it;
                    }
                }
            }
            return undefined;
        };
        const text = this.visit(findFirst(ctx));
        return new UniDoubleLiteral_1.UniDoubleLiteral(Number(text));
    }
    visitImaginary(ctx) {
        const findFirst = (ctx) => {
            const n = ctx.childCount;
            for (let i = 0; i < n; ++i) {
                const it = ctx.getChild(i);
                if (it instanceof TerminalNode_1.TerminalNode) {
                    if (it.symbol.type == Python3Parser_1.Python3Parser.IMAG_NUMBER) {
                        return it;
                    }
                }
            }
            return undefined;
        };
        const text = this.visit(findFirst(ctx));
        return new UniDoubleLiteral_1.UniDoubleLiteral(Number(text));
    }
}
exports.Python3Mapper = Python3Mapper;
//# sourceMappingURL=Python3Mapper.js.map