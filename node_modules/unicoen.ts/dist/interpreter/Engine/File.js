"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.File = void 0;
class File {
    constructor(name, data, mode) {
        this.name = name;
        this.data = data;
        this.mode = mode;
        this.pos = 0;
        this.toBeFlush = false;
        this.buf = new Uint8Array(this.data);
    }
    static setFilelist(filelist) {
        File.filelist = filelist;
    }
    static getFileFromFileList(filename) {
        return File.filelist.get(filename);
    }
    static addFileToFileList(name, file) {
        return File.filelist.set(name, file);
    }
    flush() {
        const newBuf = new Uint8Array(new ArrayBuffer(this.pos));
        for (let i = 0; i < newBuf.length; ++i) {
            newBuf[i] = this.buf[i];
        }
        File.filelist.set(this.name, newBuf);
    }
    fclose() {
        if (this.isWriteMode()) {
            this.flush();
        }
    }
    fputc(c) {
        if (this.isEOF()) {
            this.resize();
        }
        this.buf[this.pos++] = c;
        return c;
    }
    fgetc() {
        if (this.isEOF()) {
            return -1;
        }
        const ret = this.buf[this.pos++];
        if (!this.isBinaryMode()) {
            if (ret === 0x0d && this.buf[this.pos] === 0x0a) {
                return this.fgetc();
            }
        }
        return ret;
    }
    fgets(n) {
        if (this.isEOF()) {
            return null;
        }
        const bytes = [];
        for (let i = 0; i < n - 1; ++i) {
            const c = this.fgetc();
            if (c === -1) {
                break;
            }
            bytes.push(c);
            if (c === '\n'.charCodeAt(0)) {
                break;
            }
        }
        bytes.push(0); // 終端文字
        return bytes;
    }
    resize() {
        const newBuf = new Uint8Array(new ArrayBuffer(2 * this.buf.length));
        for (let i = 0; i < this.buf.length; ++i) {
            newBuf[i] = this.buf[i];
        }
        this.buf = newBuf;
    }
    isBinaryMode() {
        return this.mode.includes('b');
    }
    isWriteMode() {
        return this.mode.includes('w');
    }
    isEOF() {
        return this.buf.length <= this.pos;
    }
}
exports.File = File;
//# sourceMappingURL=File.js.map