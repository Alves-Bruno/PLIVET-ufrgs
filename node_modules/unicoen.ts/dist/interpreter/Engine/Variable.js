"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Variable = void 0;
class Variable {
    constructor(type, name, // p1.x
    value, address, depth, parentName) {
        this.type = type;
        this.name = name;
        this.value = value;
        this.address = address;
        this.depth = depth;
        this.parentName = parentName;
        this.setValue(value);
    }
    // 構造体や配列の場合はvalueそのままでなくArrayList<Variable> valuesなど
    getName() {
        return this.parentName ? this.parentName + '.' + this.name : this.name;
    }
    getValue() {
        return this.value;
    }
    hasValue(name) {
        if (this.name === name) {
            return true;
        }
        if (this.value instanceof Array) {
            const varArray = this.value;
            for (const varInArray of varArray) {
                if (varInArray.hasValue(this.name)) {
                    return true;
                }
            }
            return false;
        }
    }
    setValue(value, name) {
        if (name !== undefined) {
            if (this.name === name) {
                this.value = value;
            }
            else {
                if (this.value instanceof Array) {
                    const varArray = this.value;
                    for (const varInArray of varArray) {
                        if (varInArray.name === name) {
                            varInArray.setValue(this.value, name);
                            break;
                        }
                    }
                }
            }
        }
        if (value instanceof Array) {
            const varArray = value;
            const vars = [];
            for (let i = 0; i < varArray.length; ++i) {
                let lastAddress = this.address;
                if (vars.length !== 0) {
                    const lastVar = vars[vars.length - 1];
                    lastAddress = lastVar.address;
                    lastAddress += lastVar.getByteSize();
                }
                const element = varArray[i];
                const parentName = this.parentName ? this.parentName + '.' : '';
                if (element instanceof Variable) {
                    if (element.type != null) {
                        // 構造体の場合
                        const tempvar = element;
                        const varInArray = new Variable(tempvar.type, tempvar.name, tempvar.value, lastAddress, this.depth, parentName + this.name);
                        vars.push(varInArray);
                    }
                    else {
                        // 多次元配列の場合
                        const baseType = this.type.substring(0, this.type.indexOf('['));
                        const suffix = this.type.substring(this.type.indexOf(']') + 1);
                        const varInArray = new Variable(baseType + suffix, this.name + '[' + i + ']', element.value, element.address, this.depth);
                        vars.push(varInArray);
                    }
                }
                else {
                    // 1次元配列配列の場合
                    const baseType = this.type.substring(0, this.type.indexOf('['));
                    const suffix = this.type.substring(this.type.indexOf(']') + 1);
                    const varInArray = new Variable(baseType + suffix, this.name + '[' + i + ']', element, lastAddress, this.depth);
                    vars.push(varInArray);
                }
            }
            this.value = vars;
        }
        else {
            this.value = value;
        }
    }
    getByteSize() {
        if (this.value instanceof Array) {
            const vars = this.value;
            const size = vars.length;
            return vars[size - 1].getByteSize() * size;
        }
        // 処理系依存かもしれないが、リテラルのサイズ、構造体はメンバ変数のsize合計、配列の場合は型*size()などを考慮する必要がある。
        return Variable.sizeof(this.type);
    }
    toString() {
        return ('Variable [type=' +
            this.type +
            ', name=' +
            this.getName() +
            ', value=' +
            this.value +
            ', ' +
            'address=' +
            this.address +
            ', depth=' +
            this.depth +
            ']');
    }
}
exports.Variable = Variable;
//# sourceMappingURL=Variable.js.map