import { UniImportDec } from '../../node/UniImportDec';
declare enum Type {
    GLOBAL = 0,
    OBJECT = 1,
    LOCAL = 2
}
declare class Address {
    codeAddress: number;
    staticAddress: number;
    heapAddress: number;
    stackAddress: number;
    constructor(codeAddress: number, staticAddress: number, heapAddress: number, stackAddress: number);
}
interface VariableNotFoundListener {
    variableNotFound(key: string, setDefault: Consumer<any>): any;
}
interface Consumer<T> {
    accept(t: T): void;
}
declare class Import {
    readonly names: string[];
    readonly isOndemand: boolean;
    constructor(names: string[], isOndemand: boolean);
}
export declare class Scope {
    static sizeof: (type: string) => number;
    static structInfoSize: number;
    static createGlobal(): Scope;
    static createObject(global: Scope): Scope;
    static createLocal(parent: Scope): Scope;
    private static assertNotUnicoen;
    name: string;
    depth: number;
    address: Address;
    type: Type;
    parent: Scope;
    global: Scope;
    children: Scope[];
    readonly variableAddress: Map<string, number>;
    readonly variableTypes: Map<string, string>;
    readonly functionAddress: Map<string, number>;
    readonly typedefList: Map<string, string>;
    readonly mallocData: Map<number, number>;
    readonly objectOnMemory: Map<number, any>;
    readonly typeOnMemory: Map<number, string>;
    private listeners;
    private tempAddressForListener;
    private toReturnAddress;
    private ImportsList;
    private constructor();
    setListener(listener: VariableNotFoundListener): void;
    hasType(key: string | number): boolean;
    isStructType(type: string): boolean;
    setTypedef(oldType: string, newType: string): void;
    getTypedef(newType: string): string;
    hasValue(key: string): boolean;
    get(key: string): any;
    getValue(key: number): any;
    getStr(name: string): string;
    getRawType(key: string | number): string;
    getType(key: string | number): string;
    getAddress(key: string): number;
    setMallocSize(address: number, size: number): void;
    isMallocArea(address: number): boolean;
    getMallocSize(address: number): number;
    removeOnMemory(address: number, size: number): boolean;
    setHeap(value: any, type: string): number;
    setStatic(value: any, type: string): number;
    setCode(value: any, type: string): number;
    setSystemVariable(type: string, name: string, value: any): number;
    setStruct(key: string, value: any, type: string): void;
    getArrayDims(arrObjOrTypeStr: any[] | string): number[];
    /** 現在のスコープに新しい変数を定義し、代入します */
    setTop(key: string, value: any, type: string): void;
    /** 指定したメモリアドレスに値を書き込みます */
    set(addr: number, value: any): void;
    removeChild(scope: Scope): boolean;
    getNextName(funcName: string): string;
    closeAllFiles(): void;
    addImport(im: UniImportDec): void;
    getImportList(): Import[];
    private getValueImple;
    private setAreaImple;
    private setArray;
    private setStringOnCode;
    private setImple;
    private setPrimitive;
    private setPrimitiveOnCode;
    private setPrimitiveOnHeap;
    private setPrimitiveOnStatic;
    private hasName;
}
export {};
