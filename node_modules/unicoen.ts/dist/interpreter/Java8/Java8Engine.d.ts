import { UniBinOp } from '../../node/UniBinOp';
import { UniCast } from '../../node/UniCast';
import { UniCharacterLiteral } from '../../node/UniCharacterLiteral';
import { UniExpr } from '../../node/UniExpr';
import { UniStringLiteral } from '../../node/UniStringLiteral';
import { UniUnaryOp } from '../../node/UniUnaryOp';
import { UniVariableDec } from '../../node/UniVariableDec';
import { Engine } from '../Engine/Engine';
import { Scope } from '../Engine/Scope';
export declare class Java8Engine extends Engine {
    static strToBytes(str: string): number[];
    static getCharArrAsByte(objectOnMemory: Map<number, any>, beginArg: number): number[];
    static charArrToStr(objectOnMemory: Map<number, any>, beginArg: number): string;
    constructor();
    execUnaryOp(uniOp: UniUnaryOp, scope: Scope): any;
    sizeof(type: string): number;
    protected loadLibarary(global: Scope): void;
    protected importJavaLang(global: Scope): void;
    protected importJavaUtil(global: Scope): void;
    protected includeMath(global: Scope): void;
    protected _execExpr(expr: UniExpr, scope: Scope): any;
    protected execBinOp(arg: string | UniBinOp, scope: Scope, left?: UniExpr, right?: UniExpr): any;
    protected execBinOpImple(op: string, l: any, r: any): any;
    protected execVariableDec(decVar: UniVariableDec, scope: Scope): Generator<any, any, any>;
    protected execCast(expr: UniCast, scope: Scope): any;
    protected _execCast(type: string, value: any): any;
    protected execCharLiteral(expr: UniCharacterLiteral, scope: Scope): any;
    protected execStringLiteral(expr: UniStringLiteral, scope: Scope): any;
    private execNewArray;
    private execNew;
}
