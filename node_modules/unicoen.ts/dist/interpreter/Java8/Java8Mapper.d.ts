import { ParserRuleContext } from 'antlr4ts';
import { Java8Visitor } from './Java8Visitor';
import { TranslationunitContext, IntegerLiteralContext, FloatingPointLiteralContext, BooleanLiteralContext, StringLiteralContext, PrimitiveTypeContext, ClassOrInterfaceTypeContext, ClassTypeContext, InterfaceTypeContext, DimsContext, TypeNameIdentContext, ExpressionNameContext, CompilationUnitContext, SingleTypeImportDeclarationContext, TypeImportOnDemandDeclarationContext, SingleStaticImportDeclarationContext, StaticImportOnDemandDeclarationContext, TypeDeclarationContext, ClassDeclarationContext, NormalClassDeclarationContext, ClassNameContext, ClassModifiersContext, ClassModifierContext, SuperclassContext, SuperinterfacesContext, InterfaceTypeListContext, ClassBodyContext, ClassBodyDeclarationContext, ClassMemberDeclarationContext, FieldDeclarationContext, FieldModifiersContext, FieldModifierContext, VariableDeclaratorListContext, VariableDeclaratorContext, VariableDeclaratorIdContext, UnannTypeContext, MethodDeclarationContext, MethodModifierContext, MethodHeaderContext, ResultContext, MethodDeclaratorContext, MethodNameContext, FormalParameterListContext, FormalParametersContext, FormalParameterContext, ParameterDeclaratorIdsContext, ParameterDeclaratorIdContext, ParameterNameContext, MethodBodyContext, ConstructorDeclarationContext, ConstructorModifierContext, ConstructorDeclaratorContext, SimpleTypeNameContext, InterfaceDeclarationContext, NormalInterfaceDeclarationContext, InterfaceModifiersContext, InterfaceNameContext, InterfaceModifierContext, ExtendsInterfacesContext, InterfaceBodyContext, InterfaceMemberDeclarationContext, ConstantDeclarationContext, ConstantModifiersContext, ConstantModifierContext, InterfaceMethodDeclarationContext, InterfaceMethodModifiersContext, InterfaceMethodModifierContext, ArrayInitializerContext, VariableInitializerListContext, BlockContext, BlockStatementsContext, LocalVariableDeclarationStatementContext, LocalVariableDeclarationContext, ExpressionStatementContext, IfThenStatementContext, IfThenElseStatementContext, IfThenElseStatementNoShortIfContext, WhileStatementContext, WhileStatementNoShortIfContext, BasicForStatementContext, BasicForStatementNoShortIfContext, BreakStatementContext, ContinueStatementContext, ReturnStatementContext, ClassInstanceCreationExpression_lfno_primaryContext, ArrayAccessContext, ArrayAccess_lf_primaryContext, ArrayAccess_lfno_primaryContext, MethodInvocationContext, ReceiversContext, ReceiverContext, IdentContext, MethodInvocation_lfno_primaryContext, ArgumentListContext, ArrayCreationExpressionContext, DimExprsContext, DimExprContext, AssignmentContext, AssignmentOperatorContext, ConditionalExpressionContext, ConditionalOrExpressionContext, ConditionalAndExpressionContext, InclusiveOrExpressionContext, ExclusiveOrExpressionContext, AndExpressionContext, EqualityExpressionContext, RelationalExpressionContext, ShiftExpressionContext, AdditiveExpressionContext, MultiplicativeExpressionContext, UnaryExpressionContext, PreIncrementExpressionContext, PreDecrementExpressionContext, UnaryExpressionNotPlusMinusContext, PostfixExpressionContext, PostIncrementExpressionContext, PostDecrementExpressionContext } from './Java8Parser';
import { UniParam } from '../../node/UniParam';
import { UniExpr } from '../../node/UniExpr';
import { UniBoolLiteral } from '../../node/UniBoolLiteral';
import { UniDecralation } from '../../node/UniDecralation';
import { UniDoubleLiteral } from '../../node/UniDoubleLiteral';
import { UniIdent } from '../../node/UniIdent';
import { UniIntLiteral } from '../../node/UniIntLiteral';
import { UniStatement } from '../../node/UniStatement';
import { UniStringLiteral } from '../../node/UniStringLiteral';
import { UniVariableDec } from '../../node/UniVariableDec';
import { UniVariableDef } from '../../node/UniVariableDef';
import { Mapper } from '../mapper/Mapper';
import '../../node_helper/Extension';
export declare class Java8Mapper extends Mapper implements Java8Visitor<any> {
    preProcess(text: string): string;
    parseToANTLRTree(code: any): ParserRuleContext;
    visitTranslationunit(ctx: TranslationunitContext): any;
    visitIntegerLiteral(ctx: IntegerLiteralContext): UniIntLiteral;
    visitFloatingPointLiteral(ctx: FloatingPointLiteralContext): UniDoubleLiteral;
    visitBooleanLiteral(ctx: BooleanLiteralContext): UniBoolLiteral;
    visitStringLiteral(ctx: StringLiteralContext): UniStringLiteral;
    visitPrimitiveType(ctx: PrimitiveTypeContext): any;
    visitClassOrInterfaceType(ctx: ClassOrInterfaceTypeContext): any;
    visitClassType(ctx: ClassTypeContext): any;
    visitInterfaceType(ctx: InterfaceTypeContext): any;
    visitDims(ctx: DimsContext): any;
    visitTypeNameIdent(ctx: TypeNameIdentContext): any;
    visitExpressionName(ctx: ExpressionNameContext): any;
    visitCompilationUnit(ctx: CompilationUnitContext): (typeof UniStatement)[];
    visitSingleTypeImportDeclaration(ctx: SingleTypeImportDeclarationContext): any;
    visitTypeImportOnDemandDeclaration(ctx: TypeImportOnDemandDeclarationContext): any;
    visitSingleStaticImportDeclaration(ctx: SingleStaticImportDeclarationContext): any;
    visitStaticImportOnDemandDeclaration(ctx: StaticImportOnDemandDeclarationContext): any;
    visitTypeDeclaration(ctx: TypeDeclarationContext): any;
    visitClassDeclaration(ctx: ClassDeclarationContext): any;
    visitNormalClassDeclaration(ctx: NormalClassDeclarationContext): any;
    visitClassName(ctx: ClassNameContext): any;
    visitClassModifiers(ctx: ClassModifiersContext): StringConstructor[];
    visitClassModifier(ctx: ClassModifierContext): any;
    visitSuperclass(ctx: SuperclassContext): StringConstructor[];
    visitSuperinterfaces(ctx: SuperinterfacesContext): StringConstructor[];
    visitInterfaceTypeList(ctx: InterfaceTypeListContext): StringConstructor[];
    visitClassBody(ctx: ClassBodyContext): (typeof UniDecralation)[];
    visitClassBodyDeclaration(ctx: ClassBodyDeclarationContext): (typeof UniDecralation)[];
    visitClassMemberDeclaration(ctx: ClassMemberDeclarationContext): (typeof UniDecralation)[];
    visitFieldDeclaration(ctx: FieldDeclarationContext): (typeof UniVariableDec)[];
    visitFieldModifiers(ctx: FieldModifiersContext): StringConstructor[];
    visitFieldModifier(ctx: FieldModifierContext): any;
    visitVariableDeclaratorList(ctx: VariableDeclaratorListContext): (typeof UniVariableDef)[];
    visitVariableDeclarator(ctx: VariableDeclaratorContext): any;
    visitVariableDeclaratorId(ctx: VariableDeclaratorIdContext): any;
    visitUnannType(ctx: UnannTypeContext): any;
    visitMethodDeclaration(ctx: MethodDeclarationContext): any;
    visitMethodModifier(ctx: MethodModifierContext): any;
    visitMethodHeader(ctx: MethodHeaderContext): any;
    visitResult(ctx: ResultContext): any;
    visitMethodDeclarator(ctx: MethodDeclaratorContext): any;
    visitMethodName(ctx: MethodNameContext): any;
    visitFormalParameterList(ctx: FormalParameterListContext): (typeof UniParam)[];
    visitFormalParameters(ctx: FormalParametersContext): (typeof UniParam)[];
    visitFormalParameter(ctx: FormalParameterContext): any;
    visitParameterDeclaratorIds(ctx: ParameterDeclaratorIdsContext): (typeof UniVariableDef)[];
    visitParameterDeclaratorId(ctx: ParameterDeclaratorIdContext): any;
    visitParameterName(ctx: ParameterNameContext): any;
    visitMethodBody(ctx: MethodBodyContext): any;
    visitConstructorDeclaration(ctx: ConstructorDeclarationContext): any;
    visitConstructorModifier(ctx: ConstructorModifierContext): any;
    visitConstructorDeclarator(ctx: ConstructorDeclaratorContext): any;
    visitSimpleTypeName(ctx: SimpleTypeNameContext): any;
    visitInterfaceDeclaration(ctx: InterfaceDeclarationContext): any;
    visitNormalInterfaceDeclaration(ctx: NormalInterfaceDeclarationContext): any;
    visitInterfaceModifiers(ctx: InterfaceModifiersContext): StringConstructor[];
    visitInterfaceName(ctx: InterfaceNameContext): any;
    visitInterfaceModifier(ctx: InterfaceModifierContext): any;
    visitExtendsInterfaces(ctx: ExtendsInterfacesContext): StringConstructor[];
    visitInterfaceBody(ctx: InterfaceBodyContext): (typeof UniDecralation)[];
    visitInterfaceMemberDeclaration(ctx: InterfaceMemberDeclarationContext): (typeof UniDecralation)[];
    visitConstantDeclaration(ctx: ConstantDeclarationContext): (typeof UniVariableDec)[];
    visitConstantModifiers(ctx: ConstantModifiersContext): StringConstructor[];
    visitConstantModifier(ctx: ConstantModifierContext): any;
    visitInterfaceMethodDeclaration(ctx: InterfaceMethodDeclarationContext): any;
    visitInterfaceMethodModifiers(ctx: InterfaceMethodModifiersContext): StringConstructor[];
    visitInterfaceMethodModifier(ctx: InterfaceMethodModifierContext): any;
    visitArrayInitializer(ctx: ArrayInitializerContext): any;
    visitVariableInitializerList(ctx: VariableInitializerListContext): (typeof UniExpr)[];
    visitBlock(ctx: BlockContext): any;
    visitBlockStatements(ctx: BlockStatementsContext): (typeof UniStatement)[];
    visitLocalVariableDeclarationStatement(ctx: LocalVariableDeclarationStatementContext): any;
    visitLocalVariableDeclaration(ctx: LocalVariableDeclarationContext): any;
    visitExpressionStatement(ctx: ExpressionStatementContext): any;
    visitIfThenStatement(ctx: IfThenStatementContext): any;
    visitIfThenElseStatement(ctx: IfThenElseStatementContext): any;
    visitIfThenElseStatementNoShortIf(ctx: IfThenElseStatementNoShortIfContext): any;
    visitWhileStatement(ctx: WhileStatementContext): any;
    visitWhileStatementNoShortIf(ctx: WhileStatementNoShortIfContext): any;
    visitBasicForStatement(ctx: BasicForStatementContext): any;
    visitBasicForStatementNoShortIf(ctx: BasicForStatementNoShortIfContext): any;
    visitBreakStatement(ctx: BreakStatementContext): any;
    visitContinueStatement(ctx: ContinueStatementContext): any;
    visitReturnStatement(ctx: ReturnStatementContext): any;
    visitClassInstanceCreationExpression_lfno_primary(ctx: ClassInstanceCreationExpression_lfno_primaryContext): any;
    visitArrayAccess(ctx: ArrayAccessContext): any;
    visitArrayAccess_lf_primary(ctx: ArrayAccess_lf_primaryContext): Map<string, any>;
    visitArrayAccess_lfno_primary(ctx: ArrayAccess_lfno_primaryContext): any;
    visitMethodInvocation(ctx: MethodInvocationContext): any;
    visitReceivers(ctx: ReceiversContext): any;
    visitReceiver(ctx: ReceiverContext): (typeof UniIdent)[];
    visitIdent(ctx: IdentContext): any;
    visitMethodInvocation_lfno_primary(ctx: MethodInvocation_lfno_primaryContext): any;
    visitArgumentList(ctx: ArgumentListContext): (typeof UniExpr)[];
    visitArrayCreationExpression(ctx: ArrayCreationExpressionContext): any;
    visitDimExprs(ctx: DimExprsContext): (typeof UniExpr)[];
    visitDimExpr(ctx: DimExprContext): (typeof UniExpr)[];
    visitAssignment(ctx: AssignmentContext): any;
    visitAssignmentOperator(ctx: AssignmentOperatorContext): any;
    visitConditionalExpression(ctx: ConditionalExpressionContext): any;
    visitConditionalOrExpression(ctx: ConditionalOrExpressionContext): any;
    visitConditionalAndExpression(ctx: ConditionalAndExpressionContext): any;
    visitInclusiveOrExpression(ctx: InclusiveOrExpressionContext): any;
    visitExclusiveOrExpression(ctx: ExclusiveOrExpressionContext): any;
    visitAndExpression(ctx: AndExpressionContext): any;
    visitEqualityExpression(ctx: EqualityExpressionContext): any;
    visitRelationalExpression(ctx: RelationalExpressionContext): any;
    visitShiftExpression(ctx: ShiftExpressionContext): any;
    visitAdditiveExpression(ctx: AdditiveExpressionContext): any;
    visitMultiplicativeExpression(ctx: MultiplicativeExpressionContext): any;
    visitUnaryExpression(ctx: UnaryExpressionContext): any;
    visitPreIncrementExpression(ctx: PreIncrementExpressionContext): any;
    visitPreDecrementExpression(ctx: PreDecrementExpressionContext): any;
    visitUnaryExpressionNotPlusMinus(ctx: UnaryExpressionNotPlusMinusContext): any;
    visitPostfixExpression(ctx: PostfixExpressionContext): any;
    visitPostIncrementExpression(ctx: PostIncrementExpressionContext): any;
    visitPostDecrementExpression(ctx: PostDecrementExpressionContext): any;
}
