import { ATN } from 'antlr4ts/atn/ATN';
import { Parser } from 'antlr4ts/Parser';
import { ParserRuleContext } from 'antlr4ts/ParserRuleContext';
import { RuleContext } from 'antlr4ts/RuleContext';
import { TerminalNode } from 'antlr4ts/tree/TerminalNode';
import { TokenStream } from 'antlr4ts/TokenStream';
import { Vocabulary } from 'antlr4ts/Vocabulary';
import { Java8Visitor } from './Java8Visitor';
export declare class Java8Parser extends Parser {
    static readonly ABSTRACT = 1;
    static readonly ASSERT = 2;
    static readonly BOOLEAN = 3;
    static readonly BREAK = 4;
    static readonly BYTE = 5;
    static readonly CASE = 6;
    static readonly CATCH = 7;
    static readonly CHAR = 8;
    static readonly CLASS = 9;
    static readonly CONST = 10;
    static readonly CONTINUE = 11;
    static readonly DEFAULT = 12;
    static readonly DO = 13;
    static readonly DOUBLE = 14;
    static readonly ELSE = 15;
    static readonly ENUM = 16;
    static readonly EXTENDS = 17;
    static readonly FINAL = 18;
    static readonly FINALLY = 19;
    static readonly FLOAT = 20;
    static readonly FOR = 21;
    static readonly IF = 22;
    static readonly GOTO = 23;
    static readonly IMPLEMENTS = 24;
    static readonly IMPORT = 25;
    static readonly INSTANCEOF = 26;
    static readonly INT = 27;
    static readonly INTERFACE = 28;
    static readonly LONG = 29;
    static readonly NATIVE = 30;
    static readonly NEW = 31;
    static readonly PACKAGE = 32;
    static readonly PRIVATE = 33;
    static readonly PROTECTED = 34;
    static readonly PUBLIC = 35;
    static readonly RETURN = 36;
    static readonly SHORT = 37;
    static readonly STATIC = 38;
    static readonly STRICTFP = 39;
    static readonly SUPER = 40;
    static readonly SWITCH = 41;
    static readonly SYNCHRONIZED = 42;
    static readonly THIS = 43;
    static readonly THROW = 44;
    static readonly THROWS = 45;
    static readonly TRANSIENT = 46;
    static readonly TRY = 47;
    static readonly VOID = 48;
    static readonly VOLATILE = 49;
    static readonly WHILE = 50;
    static readonly IntegerLiteral = 51;
    static readonly FloatingPointLiteral = 52;
    static readonly BooleanLiteral = 53;
    static readonly CharacterLiteral = 54;
    static readonly StringLiteral = 55;
    static readonly NullLiteral = 56;
    static readonly LPAREN = 57;
    static readonly RPAREN = 58;
    static readonly LBRACE = 59;
    static readonly RBRACE = 60;
    static readonly LBRACK = 61;
    static readonly RBRACK = 62;
    static readonly SEMI = 63;
    static readonly COMMA = 64;
    static readonly DOT = 65;
    static readonly ASSIGN = 66;
    static readonly GT = 67;
    static readonly LT = 68;
    static readonly BANG = 69;
    static readonly TILDE = 70;
    static readonly QUESTION = 71;
    static readonly COLON = 72;
    static readonly EQUAL = 73;
    static readonly LE = 74;
    static readonly GE = 75;
    static readonly NOTEQUAL = 76;
    static readonly AND = 77;
    static readonly OR = 78;
    static readonly INC = 79;
    static readonly DEC = 80;
    static readonly ADD = 81;
    static readonly SUB = 82;
    static readonly MUL = 83;
    static readonly DIV = 84;
    static readonly BITAND = 85;
    static readonly BITOR = 86;
    static readonly CARET = 87;
    static readonly MOD = 88;
    static readonly ARROW = 89;
    static readonly COLONCOLON = 90;
    static readonly ADD_ASSIGN = 91;
    static readonly SUB_ASSIGN = 92;
    static readonly MUL_ASSIGN = 93;
    static readonly DIV_ASSIGN = 94;
    static readonly AND_ASSIGN = 95;
    static readonly OR_ASSIGN = 96;
    static readonly XOR_ASSIGN = 97;
    static readonly MOD_ASSIGN = 98;
    static readonly LSHIFT_ASSIGN = 99;
    static readonly RSHIFT_ASSIGN = 100;
    static readonly URSHIFT_ASSIGN = 101;
    static readonly Identifier = 102;
    static readonly AT = 103;
    static readonly ELLIPSIS = 104;
    static readonly WS = 105;
    static readonly COMMENT = 106;
    static readonly LINE_COMMENT = 107;
    static readonly RULE_translationunit = 0;
    static readonly RULE_literal = 1;
    static readonly RULE_integerLiteral = 2;
    static readonly RULE_floatingPointLiteral = 3;
    static readonly RULE_booleanLiteral = 4;
    static readonly RULE_stringLiteral = 5;
    static readonly RULE_characterLiteral = 6;
    static readonly RULE_nullLiteral = 7;
    static readonly RULE_type = 8;
    static readonly RULE_primitiveType = 9;
    static readonly RULE_numericType = 10;
    static readonly RULE_integralType = 11;
    static readonly RULE_floatingPointType = 12;
    static readonly RULE_referenceType = 13;
    static readonly RULE_classOrInterfaceType = 14;
    static readonly RULE_classType = 15;
    static readonly RULE_classType_lf_classOrInterfaceType = 16;
    static readonly RULE_classType_lfno_classOrInterfaceType = 17;
    static readonly RULE_interfaceType = 18;
    static readonly RULE_interfaceType_lf_classOrInterfaceType = 19;
    static readonly RULE_interfaceType_lfno_classOrInterfaceType = 20;
    static readonly RULE_typeVariable = 21;
    static readonly RULE_arrayType = 22;
    static readonly RULE_dims = 23;
    static readonly RULE_typeParameter = 24;
    static readonly RULE_typeParameterModifier = 25;
    static readonly RULE_typeBound = 26;
    static readonly RULE_additionalBound = 27;
    static readonly RULE_typeArguments = 28;
    static readonly RULE_typeArgumentList = 29;
    static readonly RULE_typeArgument = 30;
    static readonly RULE_wildcard = 31;
    static readonly RULE_wildcardBounds = 32;
    static readonly RULE_packageName = 33;
    static readonly RULE_typeName = 34;
    static readonly RULE_typeNameIdent = 35;
    static readonly RULE_packageOrTypeName = 36;
    static readonly RULE_expressionName = 37;
    static readonly RULE_ambiguousName = 38;
    static readonly RULE_compilationUnit = 39;
    static readonly RULE_packageDeclaration = 40;
    static readonly RULE_packageModifier = 41;
    static readonly RULE_importDeclaration = 42;
    static readonly RULE_singleTypeImportDeclaration = 43;
    static readonly RULE_typeImportOnDemandDeclaration = 44;
    static readonly RULE_singleStaticImportDeclaration = 45;
    static readonly RULE_staticImportOnDemandDeclaration = 46;
    static readonly RULE_typeDeclaration = 47;
    static readonly RULE_classDeclaration = 48;
    static readonly RULE_normalClassDeclaration = 49;
    static readonly RULE_className = 50;
    static readonly RULE_classModifiers = 51;
    static readonly RULE_classModifier = 52;
    static readonly RULE_typeParameters = 53;
    static readonly RULE_typeParameterList = 54;
    static readonly RULE_superclass = 55;
    static readonly RULE_superinterfaces = 56;
    static readonly RULE_interfaceTypeList = 57;
    static readonly RULE_classBody = 58;
    static readonly RULE_classBodyDeclaration = 59;
    static readonly RULE_classMemberDeclaration = 60;
    static readonly RULE_fieldDeclaration = 61;
    static readonly RULE_fieldModifiers = 62;
    static readonly RULE_fieldModifier = 63;
    static readonly RULE_variableDeclaratorList = 64;
    static readonly RULE_variableDeclarator = 65;
    static readonly RULE_variableDeclaratorId = 66;
    static readonly RULE_variableInitializer = 67;
    static readonly RULE_unannType = 68;
    static readonly RULE_unannPrimitiveType = 69;
    static readonly RULE_unannReferenceType = 70;
    static readonly RULE_unannClassOrInterfaceType = 71;
    static readonly RULE_unannClassType = 72;
    static readonly RULE_unannClassType_lf_unannClassOrInterfaceType = 73;
    static readonly RULE_unannClassType_lfno_unannClassOrInterfaceType = 74;
    static readonly RULE_unannInterfaceType = 75;
    static readonly RULE_unannInterfaceType_lf_unannClassOrInterfaceType = 76;
    static readonly RULE_unannInterfaceType_lfno_unannClassOrInterfaceType = 77;
    static readonly RULE_unannTypeVariable = 78;
    static readonly RULE_unannArrayType = 79;
    static readonly RULE_methodDeclaration = 80;
    static readonly RULE_methodModifier = 81;
    static readonly RULE_methodHeader = 82;
    static readonly RULE_result = 83;
    static readonly RULE_methodDeclarator = 84;
    static readonly RULE_methodName = 85;
    static readonly RULE_formalParameterList = 86;
    static readonly RULE_formalParameters = 87;
    static readonly RULE_formalParameter = 88;
    static readonly RULE_parameterDeclaratorIds = 89;
    static readonly RULE_parameterDeclaratorId = 90;
    static readonly RULE_parameterName = 91;
    static readonly RULE_variableModifier = 92;
    static readonly RULE_lastFormalParameter = 93;
    static readonly RULE_receiverParameter = 94;
    static readonly RULE_throws_ = 95;
    static readonly RULE_exceptionTypeList = 96;
    static readonly RULE_exceptionType = 97;
    static readonly RULE_methodBody = 98;
    static readonly RULE_instanceInitializer = 99;
    static readonly RULE_staticInitializer = 100;
    static readonly RULE_constructorDeclaration = 101;
    static readonly RULE_constructorModifier = 102;
    static readonly RULE_constructorDeclarator = 103;
    static readonly RULE_simpleTypeName = 104;
    static readonly RULE_constructorBody = 105;
    static readonly RULE_explicitConstructorInvocation = 106;
    static readonly RULE_enumDeclaration = 107;
    static readonly RULE_enumBody = 108;
    static readonly RULE_enumConstantList = 109;
    static readonly RULE_enumConstant = 110;
    static readonly RULE_enumConstantModifier = 111;
    static readonly RULE_enumBodyDeclarations = 112;
    static readonly RULE_interfaceDeclaration = 113;
    static readonly RULE_normalInterfaceDeclaration = 114;
    static readonly RULE_interfaceModifiers = 115;
    static readonly RULE_interfaceName = 116;
    static readonly RULE_interfaceModifier = 117;
    static readonly RULE_extendsInterfaces = 118;
    static readonly RULE_interfaceBody = 119;
    static readonly RULE_interfaceMemberDeclaration = 120;
    static readonly RULE_constantDeclaration = 121;
    static readonly RULE_constantModifiers = 122;
    static readonly RULE_constantModifier = 123;
    static readonly RULE_interfaceMethodDeclaration = 124;
    static readonly RULE_interfaceMethodModifiers = 125;
    static readonly RULE_interfaceMethodModifier = 126;
    static readonly RULE_annotationTypeDeclaration = 127;
    static readonly RULE_annotationTypeBody = 128;
    static readonly RULE_annotationTypeMemberDeclaration = 129;
    static readonly RULE_annotationTypeElementDeclaration = 130;
    static readonly RULE_annotationTypeElementModifier = 131;
    static readonly RULE_defaultValue = 132;
    static readonly RULE_annotation = 133;
    static readonly RULE_normalAnnotation = 134;
    static readonly RULE_elementValuePairList = 135;
    static readonly RULE_elementValuePair = 136;
    static readonly RULE_elementValue = 137;
    static readonly RULE_elementValueArrayInitializer = 138;
    static readonly RULE_elementValueList = 139;
    static readonly RULE_markerAnnotation = 140;
    static readonly RULE_singleElementAnnotation = 141;
    static readonly RULE_arrayInitializer = 142;
    static readonly RULE_variableInitializerList = 143;
    static readonly RULE_block = 144;
    static readonly RULE_blockStatements = 145;
    static readonly RULE_blockStatement = 146;
    static readonly RULE_localVariableDeclarationStatement = 147;
    static readonly RULE_localVariableDeclaration = 148;
    static readonly RULE_statement = 149;
    static readonly RULE_statementNoShortIf = 150;
    static readonly RULE_statementWithoutTrailingSubstatement = 151;
    static readonly RULE_emptyStatement = 152;
    static readonly RULE_labeledStatement = 153;
    static readonly RULE_labeledStatementNoShortIf = 154;
    static readonly RULE_expressionStatement = 155;
    static readonly RULE_statementExpression = 156;
    static readonly RULE_ifThenStatement = 157;
    static readonly RULE_ifThenElseStatement = 158;
    static readonly RULE_ifThenElseStatementNoShortIf = 159;
    static readonly RULE_assertStatement = 160;
    static readonly RULE_switchStatement = 161;
    static readonly RULE_switchBlock = 162;
    static readonly RULE_switchBlockStatementGroup = 163;
    static readonly RULE_switchLabels = 164;
    static readonly RULE_switchLabel = 165;
    static readonly RULE_enumConstantName = 166;
    static readonly RULE_whileStatement = 167;
    static readonly RULE_whileStatementNoShortIf = 168;
    static readonly RULE_doStatement = 169;
    static readonly RULE_forStatement = 170;
    static readonly RULE_forStatementNoShortIf = 171;
    static readonly RULE_basicForStatement = 172;
    static readonly RULE_basicForStatementNoShortIf = 173;
    static readonly RULE_forInit = 174;
    static readonly RULE_forUpdate = 175;
    static readonly RULE_statementExpressionList = 176;
    static readonly RULE_enhancedForStatement = 177;
    static readonly RULE_enhancedForStatementNoShortIf = 178;
    static readonly RULE_breakStatement = 179;
    static readonly RULE_continueStatement = 180;
    static readonly RULE_returnStatement = 181;
    static readonly RULE_throwStatement = 182;
    static readonly RULE_synchronizedStatement = 183;
    static readonly RULE_tryStatement = 184;
    static readonly RULE_catches = 185;
    static readonly RULE_catchClause = 186;
    static readonly RULE_catchFormalParameter = 187;
    static readonly RULE_catchType = 188;
    static readonly RULE_finally_ = 189;
    static readonly RULE_tryWithResourcesStatement = 190;
    static readonly RULE_resourceSpecification = 191;
    static readonly RULE_resourceList = 192;
    static readonly RULE_resource = 193;
    static readonly RULE_primary = 194;
    static readonly RULE_primaryNoNewArray = 195;
    static readonly RULE_primaryNoNewArray_lf_arrayAccess = 196;
    static readonly RULE_primaryNoNewArray_lfno_arrayAccess = 197;
    static readonly RULE_primaryNoNewArray_lf_primary = 198;
    static readonly RULE_primaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary = 199;
    static readonly RULE_primaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary = 200;
    static readonly RULE_primaryNoNewArray_lfno_primary = 201;
    static readonly RULE_primaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary = 202;
    static readonly RULE_primaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary = 203;
    static readonly RULE_classInstanceCreationExpression = 204;
    static readonly RULE_classInstanceCreationExpression_lf_primary = 205;
    static readonly RULE_classInstanceCreationExpression_lfno_primary = 206;
    static readonly RULE_typeArgumentsOrDiamond = 207;
    static readonly RULE_fieldAccess = 208;
    static readonly RULE_fieldAccess_lf_primary = 209;
    static readonly RULE_fieldAccess_lfno_primary = 210;
    static readonly RULE_arrayAccess = 211;
    static readonly RULE_arrayAccess_lf_primary = 212;
    static readonly RULE_arrayAccess_lfno_primary = 213;
    static readonly RULE_methodInvocation = 214;
    static readonly RULE_receivers = 215;
    static readonly RULE_receiver = 216;
    static readonly RULE_ident = 217;
    static readonly RULE_methodInvocation_lf_primary = 218;
    static readonly RULE_methodInvocation_lfno_primary = 219;
    static readonly RULE_argumentList = 220;
    static readonly RULE_methodReference = 221;
    static readonly RULE_methodReference_lf_primary = 222;
    static readonly RULE_methodReference_lfno_primary = 223;
    static readonly RULE_arrayCreationExpression = 224;
    static readonly RULE_dimExprs = 225;
    static readonly RULE_dimExpr = 226;
    static readonly RULE_constantExpression = 227;
    static readonly RULE_expression = 228;
    static readonly RULE_lambdaExpression = 229;
    static readonly RULE_lambdaParameters = 230;
    static readonly RULE_inferredFormalParameterList = 231;
    static readonly RULE_lambdaBody = 232;
    static readonly RULE_assignmentExpression = 233;
    static readonly RULE_assignment = 234;
    static readonly RULE_leftHandSide = 235;
    static readonly RULE_assignmentOperator = 236;
    static readonly RULE_conditionalExpression = 237;
    static readonly RULE_or = 238;
    static readonly RULE_conditionalOrExpression = 239;
    static readonly RULE_and = 240;
    static readonly RULE_conditionalAndExpression = 241;
    static readonly RULE_bitor = 242;
    static readonly RULE_inclusiveOrExpression = 243;
    static readonly RULE_caret = 244;
    static readonly RULE_exclusiveOrExpression = 245;
    static readonly RULE_bitand = 246;
    static readonly RULE_andExpression = 247;
    static readonly RULE_equal = 248;
    static readonly RULE_notequal = 249;
    static readonly RULE_equalityExpression = 250;
    static readonly RULE_lt = 251;
    static readonly RULE_gt = 252;
    static readonly RULE_le = 253;
    static readonly RULE_ge = 254;
    static readonly RULE_instanceof = 255;
    static readonly RULE_relationalExpression = 256;
    static readonly RULE_ltlt = 257;
    static readonly RULE_gtgt = 258;
    static readonly RULE_gtgtgt = 259;
    static readonly RULE_shiftExpression = 260;
    static readonly RULE_additiveExpression = 261;
    static readonly RULE_mul = 262;
    static readonly RULE_div = 263;
    static readonly RULE_mod = 264;
    static readonly RULE_multiplicativeExpression = 265;
    static readonly RULE_add = 266;
    static readonly RULE_sub = 267;
    static readonly RULE_unaryExpression = 268;
    static readonly RULE_inc = 269;
    static readonly RULE_preIncrementExpression = 270;
    static readonly RULE_dec = 271;
    static readonly RULE_preDecrementExpression = 272;
    static readonly RULE_tilde = 273;
    static readonly RULE_bang = 274;
    static readonly RULE_unaryExpressionNotPlusMinus = 275;
    static readonly RULE_postfixExpression = 276;
    static readonly RULE_postIncrementExpression = 277;
    static readonly RULE_postIncrementExpression_lf_postfixExpression = 278;
    static readonly RULE_postDecrementExpression = 279;
    static readonly RULE_postDecrementExpression_lf_postfixExpression = 280;
    static readonly RULE_castExpression = 281;
    static readonly ruleNames: string[];
    private static readonly _LITERAL_NAMES;
    private static readonly _SYMBOLIC_NAMES;
    static readonly VOCABULARY: Vocabulary;
    get vocabulary(): Vocabulary;
    get grammarFileName(): string;
    get ruleNames(): string[];
    get serializedATN(): string;
    constructor(input: TokenStream);
    translationunit(): TranslationunitContext;
    literal(): LiteralContext;
    integerLiteral(): IntegerLiteralContext;
    floatingPointLiteral(): FloatingPointLiteralContext;
    booleanLiteral(): BooleanLiteralContext;
    stringLiteral(): StringLiteralContext;
    characterLiteral(): CharacterLiteralContext;
    nullLiteral(): NullLiteralContext;
    type(): TypeContext;
    primitiveType(): PrimitiveTypeContext;
    numericType(): NumericTypeContext;
    integralType(): IntegralTypeContext;
    floatingPointType(): FloatingPointTypeContext;
    referenceType(): ReferenceTypeContext;
    classOrInterfaceType(): ClassOrInterfaceTypeContext;
    classType(): ClassTypeContext;
    classType_lf_classOrInterfaceType(): ClassType_lf_classOrInterfaceTypeContext;
    classType_lfno_classOrInterfaceType(): ClassType_lfno_classOrInterfaceTypeContext;
    interfaceType(): InterfaceTypeContext;
    interfaceType_lf_classOrInterfaceType(): InterfaceType_lf_classOrInterfaceTypeContext;
    interfaceType_lfno_classOrInterfaceType(): InterfaceType_lfno_classOrInterfaceTypeContext;
    typeVariable(): TypeVariableContext;
    arrayType(): ArrayTypeContext;
    dims(): DimsContext;
    typeParameter(): TypeParameterContext;
    typeParameterModifier(): TypeParameterModifierContext;
    typeBound(): TypeBoundContext;
    additionalBound(): AdditionalBoundContext;
    typeArguments(): TypeArgumentsContext;
    typeArgumentList(): TypeArgumentListContext;
    typeArgument(): TypeArgumentContext;
    wildcard(): WildcardContext;
    wildcardBounds(): WildcardBoundsContext;
    packageName(): PackageNameContext;
    packageName(_p: number): PackageNameContext;
    typeName(): TypeNameContext;
    typeNameIdent(): TypeNameIdentContext;
    packageOrTypeName(): PackageOrTypeNameContext;
    packageOrTypeName(_p: number): PackageOrTypeNameContext;
    expressionName(): ExpressionNameContext;
    ambiguousName(): AmbiguousNameContext;
    ambiguousName(_p: number): AmbiguousNameContext;
    compilationUnit(): CompilationUnitContext;
    packageDeclaration(): PackageDeclarationContext;
    packageModifier(): PackageModifierContext;
    importDeclaration(): ImportDeclarationContext;
    singleTypeImportDeclaration(): SingleTypeImportDeclarationContext;
    typeImportOnDemandDeclaration(): TypeImportOnDemandDeclarationContext;
    singleStaticImportDeclaration(): SingleStaticImportDeclarationContext;
    staticImportOnDemandDeclaration(): StaticImportOnDemandDeclarationContext;
    typeDeclaration(): TypeDeclarationContext;
    classDeclaration(): ClassDeclarationContext;
    normalClassDeclaration(): NormalClassDeclarationContext;
    className(): ClassNameContext;
    classModifiers(): ClassModifiersContext;
    classModifier(): ClassModifierContext;
    typeParameters(): TypeParametersContext;
    typeParameterList(): TypeParameterListContext;
    superclass(): SuperclassContext;
    superinterfaces(): SuperinterfacesContext;
    interfaceTypeList(): InterfaceTypeListContext;
    classBody(): ClassBodyContext;
    classBodyDeclaration(): ClassBodyDeclarationContext;
    classMemberDeclaration(): ClassMemberDeclarationContext;
    fieldDeclaration(): FieldDeclarationContext;
    fieldModifiers(): FieldModifiersContext;
    fieldModifier(): FieldModifierContext;
    variableDeclaratorList(): VariableDeclaratorListContext;
    variableDeclarator(): VariableDeclaratorContext;
    variableDeclaratorId(): VariableDeclaratorIdContext;
    variableInitializer(): VariableInitializerContext;
    unannType(): UnannTypeContext;
    unannPrimitiveType(): UnannPrimitiveTypeContext;
    unannReferenceType(): UnannReferenceTypeContext;
    unannClassOrInterfaceType(): UnannClassOrInterfaceTypeContext;
    unannClassType(): UnannClassTypeContext;
    unannClassType_lf_unannClassOrInterfaceType(): UnannClassType_lf_unannClassOrInterfaceTypeContext;
    unannClassType_lfno_unannClassOrInterfaceType(): UnannClassType_lfno_unannClassOrInterfaceTypeContext;
    unannInterfaceType(): UnannInterfaceTypeContext;
    unannInterfaceType_lf_unannClassOrInterfaceType(): UnannInterfaceType_lf_unannClassOrInterfaceTypeContext;
    unannInterfaceType_lfno_unannClassOrInterfaceType(): UnannInterfaceType_lfno_unannClassOrInterfaceTypeContext;
    unannTypeVariable(): UnannTypeVariableContext;
    unannArrayType(): UnannArrayTypeContext;
    methodDeclaration(): MethodDeclarationContext;
    methodModifier(): MethodModifierContext;
    methodHeader(): MethodHeaderContext;
    result(): ResultContext;
    methodDeclarator(): MethodDeclaratorContext;
    methodName(): MethodNameContext;
    formalParameterList(): FormalParameterListContext;
    formalParameters(): FormalParametersContext;
    formalParameter(): FormalParameterContext;
    parameterDeclaratorIds(): ParameterDeclaratorIdsContext;
    parameterDeclaratorId(): ParameterDeclaratorIdContext;
    parameterName(): ParameterNameContext;
    variableModifier(): VariableModifierContext;
    lastFormalParameter(): LastFormalParameterContext;
    receiverParameter(): ReceiverParameterContext;
    throws_(): Throws_Context;
    exceptionTypeList(): ExceptionTypeListContext;
    exceptionType(): ExceptionTypeContext;
    methodBody(): MethodBodyContext;
    instanceInitializer(): InstanceInitializerContext;
    staticInitializer(): StaticInitializerContext;
    constructorDeclaration(): ConstructorDeclarationContext;
    constructorModifier(): ConstructorModifierContext;
    constructorDeclarator(): ConstructorDeclaratorContext;
    simpleTypeName(): SimpleTypeNameContext;
    constructorBody(): ConstructorBodyContext;
    explicitConstructorInvocation(): ExplicitConstructorInvocationContext;
    enumDeclaration(): EnumDeclarationContext;
    enumBody(): EnumBodyContext;
    enumConstantList(): EnumConstantListContext;
    enumConstant(): EnumConstantContext;
    enumConstantModifier(): EnumConstantModifierContext;
    enumBodyDeclarations(): EnumBodyDeclarationsContext;
    interfaceDeclaration(): InterfaceDeclarationContext;
    normalInterfaceDeclaration(): NormalInterfaceDeclarationContext;
    interfaceModifiers(): InterfaceModifiersContext;
    interfaceName(): InterfaceNameContext;
    interfaceModifier(): InterfaceModifierContext;
    extendsInterfaces(): ExtendsInterfacesContext;
    interfaceBody(): InterfaceBodyContext;
    interfaceMemberDeclaration(): InterfaceMemberDeclarationContext;
    constantDeclaration(): ConstantDeclarationContext;
    constantModifiers(): ConstantModifiersContext;
    constantModifier(): ConstantModifierContext;
    interfaceMethodDeclaration(): InterfaceMethodDeclarationContext;
    interfaceMethodModifiers(): InterfaceMethodModifiersContext;
    interfaceMethodModifier(): InterfaceMethodModifierContext;
    annotationTypeDeclaration(): AnnotationTypeDeclarationContext;
    annotationTypeBody(): AnnotationTypeBodyContext;
    annotationTypeMemberDeclaration(): AnnotationTypeMemberDeclarationContext;
    annotationTypeElementDeclaration(): AnnotationTypeElementDeclarationContext;
    annotationTypeElementModifier(): AnnotationTypeElementModifierContext;
    defaultValue(): DefaultValueContext;
    annotation(): AnnotationContext;
    normalAnnotation(): NormalAnnotationContext;
    elementValuePairList(): ElementValuePairListContext;
    elementValuePair(): ElementValuePairContext;
    elementValue(): ElementValueContext;
    elementValueArrayInitializer(): ElementValueArrayInitializerContext;
    elementValueList(): ElementValueListContext;
    markerAnnotation(): MarkerAnnotationContext;
    singleElementAnnotation(): SingleElementAnnotationContext;
    arrayInitializer(): ArrayInitializerContext;
    variableInitializerList(): VariableInitializerListContext;
    block(): BlockContext;
    blockStatements(): BlockStatementsContext;
    blockStatement(): BlockStatementContext;
    localVariableDeclarationStatement(): LocalVariableDeclarationStatementContext;
    localVariableDeclaration(): LocalVariableDeclarationContext;
    statement(): StatementContext;
    statementNoShortIf(): StatementNoShortIfContext;
    statementWithoutTrailingSubstatement(): StatementWithoutTrailingSubstatementContext;
    emptyStatement(): EmptyStatementContext;
    labeledStatement(): LabeledStatementContext;
    labeledStatementNoShortIf(): LabeledStatementNoShortIfContext;
    expressionStatement(): ExpressionStatementContext;
    statementExpression(): StatementExpressionContext;
    ifThenStatement(): IfThenStatementContext;
    ifThenElseStatement(): IfThenElseStatementContext;
    ifThenElseStatementNoShortIf(): IfThenElseStatementNoShortIfContext;
    assertStatement(): AssertStatementContext;
    switchStatement(): SwitchStatementContext;
    switchBlock(): SwitchBlockContext;
    switchBlockStatementGroup(): SwitchBlockStatementGroupContext;
    switchLabels(): SwitchLabelsContext;
    switchLabel(): SwitchLabelContext;
    enumConstantName(): EnumConstantNameContext;
    whileStatement(): WhileStatementContext;
    whileStatementNoShortIf(): WhileStatementNoShortIfContext;
    doStatement(): DoStatementContext;
    forStatement(): ForStatementContext;
    forStatementNoShortIf(): ForStatementNoShortIfContext;
    basicForStatement(): BasicForStatementContext;
    basicForStatementNoShortIf(): BasicForStatementNoShortIfContext;
    forInit(): ForInitContext;
    forUpdate(): ForUpdateContext;
    statementExpressionList(): StatementExpressionListContext;
    enhancedForStatement(): EnhancedForStatementContext;
    enhancedForStatementNoShortIf(): EnhancedForStatementNoShortIfContext;
    breakStatement(): BreakStatementContext;
    continueStatement(): ContinueStatementContext;
    returnStatement(): ReturnStatementContext;
    throwStatement(): ThrowStatementContext;
    synchronizedStatement(): SynchronizedStatementContext;
    tryStatement(): TryStatementContext;
    catches(): CatchesContext;
    catchClause(): CatchClauseContext;
    catchFormalParameter(): CatchFormalParameterContext;
    catchType(): CatchTypeContext;
    finally_(): Finally_Context;
    tryWithResourcesStatement(): TryWithResourcesStatementContext;
    resourceSpecification(): ResourceSpecificationContext;
    resourceList(): ResourceListContext;
    resource(): ResourceContext;
    primary(): PrimaryContext;
    primaryNoNewArray(): PrimaryNoNewArrayContext;
    primaryNoNewArray_lf_arrayAccess(): PrimaryNoNewArray_lf_arrayAccessContext;
    primaryNoNewArray_lfno_arrayAccess(): PrimaryNoNewArray_lfno_arrayAccessContext;
    primaryNoNewArray_lf_primary(): PrimaryNoNewArray_lf_primaryContext;
    primaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary(): PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext;
    primaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary(): PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext;
    primaryNoNewArray_lfno_primary(): PrimaryNoNewArray_lfno_primaryContext;
    primaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary(): PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext;
    primaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary(): PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext;
    classInstanceCreationExpression(): ClassInstanceCreationExpressionContext;
    classInstanceCreationExpression_lf_primary(): ClassInstanceCreationExpression_lf_primaryContext;
    classInstanceCreationExpression_lfno_primary(): ClassInstanceCreationExpression_lfno_primaryContext;
    typeArgumentsOrDiamond(): TypeArgumentsOrDiamondContext;
    fieldAccess(): FieldAccessContext;
    fieldAccess_lf_primary(): FieldAccess_lf_primaryContext;
    fieldAccess_lfno_primary(): FieldAccess_lfno_primaryContext;
    arrayAccess(): ArrayAccessContext;
    arrayAccess_lf_primary(): ArrayAccess_lf_primaryContext;
    arrayAccess_lfno_primary(): ArrayAccess_lfno_primaryContext;
    methodInvocation(): MethodInvocationContext;
    receivers(): ReceiversContext;
    receiver(): ReceiverContext;
    ident(): IdentContext;
    methodInvocation_lf_primary(): MethodInvocation_lf_primaryContext;
    methodInvocation_lfno_primary(): MethodInvocation_lfno_primaryContext;
    argumentList(): ArgumentListContext;
    methodReference(): MethodReferenceContext;
    methodReference_lf_primary(): MethodReference_lf_primaryContext;
    methodReference_lfno_primary(): MethodReference_lfno_primaryContext;
    arrayCreationExpression(): ArrayCreationExpressionContext;
    dimExprs(): DimExprsContext;
    dimExpr(): DimExprContext;
    constantExpression(): ConstantExpressionContext;
    expression(): ExpressionContext;
    lambdaExpression(): LambdaExpressionContext;
    lambdaParameters(): LambdaParametersContext;
    inferredFormalParameterList(): InferredFormalParameterListContext;
    lambdaBody(): LambdaBodyContext;
    assignmentExpression(): AssignmentExpressionContext;
    assignment(): AssignmentContext;
    leftHandSide(): LeftHandSideContext;
    assignmentOperator(): AssignmentOperatorContext;
    conditionalExpression(): ConditionalExpressionContext;
    or(): OrContext;
    conditionalOrExpression(): ConditionalOrExpressionContext;
    conditionalOrExpression(_p: number): ConditionalOrExpressionContext;
    and(): AndContext;
    conditionalAndExpression(): ConditionalAndExpressionContext;
    conditionalAndExpression(_p: number): ConditionalAndExpressionContext;
    bitor(): BitorContext;
    inclusiveOrExpression(): InclusiveOrExpressionContext;
    inclusiveOrExpression(_p: number): InclusiveOrExpressionContext;
    caret(): CaretContext;
    exclusiveOrExpression(): ExclusiveOrExpressionContext;
    exclusiveOrExpression(_p: number): ExclusiveOrExpressionContext;
    bitand(): BitandContext;
    andExpression(): AndExpressionContext;
    andExpression(_p: number): AndExpressionContext;
    equal(): EqualContext;
    notequal(): NotequalContext;
    equalityExpression(): EqualityExpressionContext;
    equalityExpression(_p: number): EqualityExpressionContext;
    lt(): LtContext;
    gt(): GtContext;
    le(): LeContext;
    ge(): GeContext;
    instanceof(): InstanceofContext;
    relationalExpression(): RelationalExpressionContext;
    relationalExpression(_p: number): RelationalExpressionContext;
    ltlt(): LtltContext;
    gtgt(): GtgtContext;
    gtgtgt(): GtgtgtContext;
    shiftExpression(): ShiftExpressionContext;
    shiftExpression(_p: number): ShiftExpressionContext;
    additiveExpression(): AdditiveExpressionContext;
    additiveExpression(_p: number): AdditiveExpressionContext;
    mul(): MulContext;
    div(): DivContext;
    mod(): ModContext;
    multiplicativeExpression(): MultiplicativeExpressionContext;
    multiplicativeExpression(_p: number): MultiplicativeExpressionContext;
    add(): AddContext;
    sub(): SubContext;
    unaryExpression(): UnaryExpressionContext;
    inc(): IncContext;
    preIncrementExpression(): PreIncrementExpressionContext;
    dec(): DecContext;
    preDecrementExpression(): PreDecrementExpressionContext;
    tilde(): TildeContext;
    bang(): BangContext;
    unaryExpressionNotPlusMinus(): UnaryExpressionNotPlusMinusContext;
    postfixExpression(): PostfixExpressionContext;
    postIncrementExpression(): PostIncrementExpressionContext;
    postIncrementExpression_lf_postfixExpression(): PostIncrementExpression_lf_postfixExpressionContext;
    postDecrementExpression(): PostDecrementExpressionContext;
    postDecrementExpression_lf_postfixExpression(): PostDecrementExpression_lf_postfixExpressionContext;
    castExpression(): CastExpressionContext;
    sempred(_localctx: RuleContext, ruleIndex: number, predIndex: number): boolean;
    private packageName_sempred;
    private packageOrTypeName_sempred;
    private ambiguousName_sempred;
    private conditionalOrExpression_sempred;
    private conditionalAndExpression_sempred;
    private inclusiveOrExpression_sempred;
    private exclusiveOrExpression_sempred;
    private andExpression_sempred;
    private equalityExpression_sempred;
    private relationalExpression_sempred;
    private shiftExpression_sempred;
    private additiveExpression_sempred;
    private multiplicativeExpression_sempred;
    private static readonly _serializedATNSegments;
    private static readonly _serializedATNSegment0;
    private static readonly _serializedATNSegment1;
    private static readonly _serializedATNSegment2;
    private static readonly _serializedATNSegment3;
    private static readonly _serializedATNSegment4;
    private static readonly _serializedATNSegment5;
    static readonly _serializedATN: string;
    static __ATN: ATN;
    static get _ATN(): ATN;
}
export declare class TranslationunitContext extends ParserRuleContext {
    compilationUnit(): CompilationUnitContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class LiteralContext extends ParserRuleContext {
    integerLiteral(): IntegerLiteralContext | undefined;
    floatingPointLiteral(): FloatingPointLiteralContext | undefined;
    booleanLiteral(): BooleanLiteralContext | undefined;
    characterLiteral(): CharacterLiteralContext | undefined;
    stringLiteral(): StringLiteralContext | undefined;
    nullLiteral(): NullLiteralContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class IntegerLiteralContext extends ParserRuleContext {
    IntegerLiteral(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class FloatingPointLiteralContext extends ParserRuleContext {
    FloatingPointLiteral(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class BooleanLiteralContext extends ParserRuleContext {
    BooleanLiteral(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class StringLiteralContext extends ParserRuleContext {
    StringLiteral(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class CharacterLiteralContext extends ParserRuleContext {
    CharacterLiteral(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class NullLiteralContext extends ParserRuleContext {
    NullLiteral(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class TypeContext extends ParserRuleContext {
    primitiveType(): PrimitiveTypeContext | undefined;
    referenceType(): ReferenceTypeContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class PrimitiveTypeContext extends ParserRuleContext {
    numericType(): NumericTypeContext | undefined;
    annotation(): AnnotationContext[];
    annotation(i: number): AnnotationContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class NumericTypeContext extends ParserRuleContext {
    integralType(): IntegralTypeContext | undefined;
    floatingPointType(): FloatingPointTypeContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class IntegralTypeContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class FloatingPointTypeContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class ReferenceTypeContext extends ParserRuleContext {
    classOrInterfaceType(): ClassOrInterfaceTypeContext | undefined;
    typeVariable(): TypeVariableContext | undefined;
    arrayType(): ArrayTypeContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class ClassOrInterfaceTypeContext extends ParserRuleContext {
    classType_lfno_classOrInterfaceType(): ClassType_lfno_classOrInterfaceTypeContext | undefined;
    interfaceType_lfno_classOrInterfaceType(): InterfaceType_lfno_classOrInterfaceTypeContext | undefined;
    classType_lf_classOrInterfaceType(): ClassType_lf_classOrInterfaceTypeContext[];
    classType_lf_classOrInterfaceType(i: number): ClassType_lf_classOrInterfaceTypeContext;
    interfaceType_lf_classOrInterfaceType(): InterfaceType_lf_classOrInterfaceTypeContext[];
    interfaceType_lf_classOrInterfaceType(i: number): InterfaceType_lf_classOrInterfaceTypeContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class ClassTypeContext extends ParserRuleContext {
    Identifier(): TerminalNode;
    annotation(): AnnotationContext[];
    annotation(i: number): AnnotationContext;
    typeArguments(): TypeArgumentsContext | undefined;
    classOrInterfaceType(): ClassOrInterfaceTypeContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class ClassType_lf_classOrInterfaceTypeContext extends ParserRuleContext {
    Identifier(): TerminalNode;
    annotation(): AnnotationContext[];
    annotation(i: number): AnnotationContext;
    typeArguments(): TypeArgumentsContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class ClassType_lfno_classOrInterfaceTypeContext extends ParserRuleContext {
    Identifier(): TerminalNode;
    annotation(): AnnotationContext[];
    annotation(i: number): AnnotationContext;
    typeArguments(): TypeArgumentsContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class InterfaceTypeContext extends ParserRuleContext {
    classType(): ClassTypeContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class InterfaceType_lf_classOrInterfaceTypeContext extends ParserRuleContext {
    classType_lf_classOrInterfaceType(): ClassType_lf_classOrInterfaceTypeContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class InterfaceType_lfno_classOrInterfaceTypeContext extends ParserRuleContext {
    classType_lfno_classOrInterfaceType(): ClassType_lfno_classOrInterfaceTypeContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class TypeVariableContext extends ParserRuleContext {
    Identifier(): TerminalNode;
    annotation(): AnnotationContext[];
    annotation(i: number): AnnotationContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class ArrayTypeContext extends ParserRuleContext {
    primitiveType(): PrimitiveTypeContext | undefined;
    dims(): DimsContext;
    classOrInterfaceType(): ClassOrInterfaceTypeContext | undefined;
    typeVariable(): TypeVariableContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class DimsContext extends ParserRuleContext {
    annotation(): AnnotationContext[];
    annotation(i: number): AnnotationContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class TypeParameterContext extends ParserRuleContext {
    Identifier(): TerminalNode;
    typeParameterModifier(): TypeParameterModifierContext[];
    typeParameterModifier(i: number): TypeParameterModifierContext;
    typeBound(): TypeBoundContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class TypeParameterModifierContext extends ParserRuleContext {
    annotation(): AnnotationContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class TypeBoundContext extends ParserRuleContext {
    typeVariable(): TypeVariableContext | undefined;
    classOrInterfaceType(): ClassOrInterfaceTypeContext | undefined;
    additionalBound(): AdditionalBoundContext[];
    additionalBound(i: number): AdditionalBoundContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class AdditionalBoundContext extends ParserRuleContext {
    interfaceType(): InterfaceTypeContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class TypeArgumentsContext extends ParserRuleContext {
    typeArgumentList(): TypeArgumentListContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class TypeArgumentListContext extends ParserRuleContext {
    typeArgument(): TypeArgumentContext[];
    typeArgument(i: number): TypeArgumentContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class TypeArgumentContext extends ParserRuleContext {
    referenceType(): ReferenceTypeContext | undefined;
    wildcard(): WildcardContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class WildcardContext extends ParserRuleContext {
    annotation(): AnnotationContext[];
    annotation(i: number): AnnotationContext;
    wildcardBounds(): WildcardBoundsContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class WildcardBoundsContext extends ParserRuleContext {
    referenceType(): ReferenceTypeContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class PackageNameContext extends ParserRuleContext {
    Identifier(): TerminalNode;
    packageName(): PackageNameContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class TypeNameContext extends ParserRuleContext {
    Identifier(): TerminalNode;
    packageOrTypeName(): PackageOrTypeNameContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class TypeNameIdentContext extends ParserRuleContext {
    typeName(): TypeNameContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class PackageOrTypeNameContext extends ParserRuleContext {
    Identifier(): TerminalNode;
    packageOrTypeName(): PackageOrTypeNameContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class ExpressionNameContext extends ParserRuleContext {
    Identifier(): TerminalNode;
    ambiguousName(): AmbiguousNameContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class AmbiguousNameContext extends ParserRuleContext {
    Identifier(): TerminalNode;
    ambiguousName(): AmbiguousNameContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class CompilationUnitContext extends ParserRuleContext {
    packageDeclaration(): PackageDeclarationContext | undefined;
    importDeclaration(): ImportDeclarationContext[];
    importDeclaration(i: number): ImportDeclarationContext;
    typeDeclaration(): TypeDeclarationContext[];
    typeDeclaration(i: number): TypeDeclarationContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class PackageDeclarationContext extends ParserRuleContext {
    Identifier(): TerminalNode[];
    Identifier(i: number): TerminalNode;
    packageModifier(): PackageModifierContext[];
    packageModifier(i: number): PackageModifierContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class PackageModifierContext extends ParserRuleContext {
    annotation(): AnnotationContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class ImportDeclarationContext extends ParserRuleContext {
    singleTypeImportDeclaration(): SingleTypeImportDeclarationContext | undefined;
    typeImportOnDemandDeclaration(): TypeImportOnDemandDeclarationContext | undefined;
    singleStaticImportDeclaration(): SingleStaticImportDeclarationContext | undefined;
    staticImportOnDemandDeclaration(): StaticImportOnDemandDeclarationContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class SingleTypeImportDeclarationContext extends ParserRuleContext {
    typeName(): TypeNameContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class TypeImportOnDemandDeclarationContext extends ParserRuleContext {
    packageOrTypeName(): PackageOrTypeNameContext;
    mul(): MulContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class SingleStaticImportDeclarationContext extends ParserRuleContext {
    typeName(): TypeNameContext;
    Identifier(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class StaticImportOnDemandDeclarationContext extends ParserRuleContext {
    typeName(): TypeNameContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class TypeDeclarationContext extends ParserRuleContext {
    classDeclaration(): ClassDeclarationContext | undefined;
    interfaceDeclaration(): InterfaceDeclarationContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class ClassDeclarationContext extends ParserRuleContext {
    normalClassDeclaration(): NormalClassDeclarationContext | undefined;
    enumDeclaration(): EnumDeclarationContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class NormalClassDeclarationContext extends ParserRuleContext {
    classModifiers(): ClassModifiersContext;
    className(): ClassNameContext;
    classBody(): ClassBodyContext;
    typeParameters(): TypeParametersContext | undefined;
    superclass(): SuperclassContext | undefined;
    superinterfaces(): SuperinterfacesContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class ClassNameContext extends ParserRuleContext {
    Identifier(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class ClassModifiersContext extends ParserRuleContext {
    classModifier(): ClassModifierContext[];
    classModifier(i: number): ClassModifierContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class ClassModifierContext extends ParserRuleContext {
    annotation(): AnnotationContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class TypeParametersContext extends ParserRuleContext {
    typeParameterList(): TypeParameterListContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class TypeParameterListContext extends ParserRuleContext {
    typeParameter(): TypeParameterContext[];
    typeParameter(i: number): TypeParameterContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class SuperclassContext extends ParserRuleContext {
    classType(): ClassTypeContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class SuperinterfacesContext extends ParserRuleContext {
    interfaceTypeList(): InterfaceTypeListContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class InterfaceTypeListContext extends ParserRuleContext {
    interfaceType(): InterfaceTypeContext[];
    interfaceType(i: number): InterfaceTypeContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class ClassBodyContext extends ParserRuleContext {
    classBodyDeclaration(): ClassBodyDeclarationContext[];
    classBodyDeclaration(i: number): ClassBodyDeclarationContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class ClassBodyDeclarationContext extends ParserRuleContext {
    classMemberDeclaration(): ClassMemberDeclarationContext | undefined;
    instanceInitializer(): InstanceInitializerContext | undefined;
    staticInitializer(): StaticInitializerContext | undefined;
    constructorDeclaration(): ConstructorDeclarationContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class ClassMemberDeclarationContext extends ParserRuleContext {
    fieldDeclaration(): FieldDeclarationContext | undefined;
    methodDeclaration(): MethodDeclarationContext | undefined;
    classDeclaration(): ClassDeclarationContext | undefined;
    interfaceDeclaration(): InterfaceDeclarationContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class FieldDeclarationContext extends ParserRuleContext {
    fieldModifiers(): FieldModifiersContext;
    unannType(): UnannTypeContext;
    variableDeclaratorList(): VariableDeclaratorListContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class FieldModifiersContext extends ParserRuleContext {
    fieldModifier(): FieldModifierContext[];
    fieldModifier(i: number): FieldModifierContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class FieldModifierContext extends ParserRuleContext {
    annotation(): AnnotationContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class VariableDeclaratorListContext extends ParserRuleContext {
    variableDeclarator(): VariableDeclaratorContext[];
    variableDeclarator(i: number): VariableDeclaratorContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class VariableDeclaratorContext extends ParserRuleContext {
    variableDeclaratorId(): VariableDeclaratorIdContext;
    variableInitializer(): VariableInitializerContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class VariableDeclaratorIdContext extends ParserRuleContext {
    Identifier(): TerminalNode;
    dims(): DimsContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class VariableInitializerContext extends ParserRuleContext {
    expression(): ExpressionContext | undefined;
    arrayInitializer(): ArrayInitializerContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class UnannTypeContext extends ParserRuleContext {
    unannPrimitiveType(): UnannPrimitiveTypeContext | undefined;
    unannReferenceType(): UnannReferenceTypeContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class UnannPrimitiveTypeContext extends ParserRuleContext {
    numericType(): NumericTypeContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class UnannReferenceTypeContext extends ParserRuleContext {
    unannClassOrInterfaceType(): UnannClassOrInterfaceTypeContext | undefined;
    unannTypeVariable(): UnannTypeVariableContext | undefined;
    unannArrayType(): UnannArrayTypeContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class UnannClassOrInterfaceTypeContext extends ParserRuleContext {
    unannClassType_lfno_unannClassOrInterfaceType(): UnannClassType_lfno_unannClassOrInterfaceTypeContext | undefined;
    unannInterfaceType_lfno_unannClassOrInterfaceType(): UnannInterfaceType_lfno_unannClassOrInterfaceTypeContext | undefined;
    unannClassType_lf_unannClassOrInterfaceType(): UnannClassType_lf_unannClassOrInterfaceTypeContext[];
    unannClassType_lf_unannClassOrInterfaceType(i: number): UnannClassType_lf_unannClassOrInterfaceTypeContext;
    unannInterfaceType_lf_unannClassOrInterfaceType(): UnannInterfaceType_lf_unannClassOrInterfaceTypeContext[];
    unannInterfaceType_lf_unannClassOrInterfaceType(i: number): UnannInterfaceType_lf_unannClassOrInterfaceTypeContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class UnannClassTypeContext extends ParserRuleContext {
    Identifier(): TerminalNode;
    typeArguments(): TypeArgumentsContext | undefined;
    unannClassOrInterfaceType(): UnannClassOrInterfaceTypeContext | undefined;
    annotation(): AnnotationContext[];
    annotation(i: number): AnnotationContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class UnannClassType_lf_unannClassOrInterfaceTypeContext extends ParserRuleContext {
    Identifier(): TerminalNode;
    annotation(): AnnotationContext[];
    annotation(i: number): AnnotationContext;
    typeArguments(): TypeArgumentsContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class UnannClassType_lfno_unannClassOrInterfaceTypeContext extends ParserRuleContext {
    Identifier(): TerminalNode;
    typeArguments(): TypeArgumentsContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class UnannInterfaceTypeContext extends ParserRuleContext {
    unannClassType(): UnannClassTypeContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class UnannInterfaceType_lf_unannClassOrInterfaceTypeContext extends ParserRuleContext {
    unannClassType_lf_unannClassOrInterfaceType(): UnannClassType_lf_unannClassOrInterfaceTypeContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class UnannInterfaceType_lfno_unannClassOrInterfaceTypeContext extends ParserRuleContext {
    unannClassType_lfno_unannClassOrInterfaceType(): UnannClassType_lfno_unannClassOrInterfaceTypeContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class UnannTypeVariableContext extends ParserRuleContext {
    Identifier(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class UnannArrayTypeContext extends ParserRuleContext {
    unannPrimitiveType(): UnannPrimitiveTypeContext | undefined;
    dims(): DimsContext;
    unannClassOrInterfaceType(): UnannClassOrInterfaceTypeContext | undefined;
    unannTypeVariable(): UnannTypeVariableContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class MethodDeclarationContext extends ParserRuleContext {
    methodHeader(): MethodHeaderContext;
    methodBody(): MethodBodyContext;
    methodModifier(): MethodModifierContext[];
    methodModifier(i: number): MethodModifierContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class MethodModifierContext extends ParserRuleContext {
    annotation(): AnnotationContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class MethodHeaderContext extends ParserRuleContext {
    result(): ResultContext;
    methodDeclarator(): MethodDeclaratorContext;
    throws_(): Throws_Context | undefined;
    typeParameters(): TypeParametersContext | undefined;
    annotation(): AnnotationContext[];
    annotation(i: number): AnnotationContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class ResultContext extends ParserRuleContext {
    unannType(): UnannTypeContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class MethodDeclaratorContext extends ParserRuleContext {
    methodName(): MethodNameContext;
    formalParameterList(): FormalParameterListContext | undefined;
    dims(): DimsContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class MethodNameContext extends ParserRuleContext {
    Identifier(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class FormalParameterListContext extends ParserRuleContext {
    formalParameters(): FormalParametersContext | undefined;
    lastFormalParameter(): LastFormalParameterContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class FormalParametersContext extends ParserRuleContext {
    formalParameter(): FormalParameterContext[];
    formalParameter(i: number): FormalParameterContext;
    receiverParameter(): ReceiverParameterContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class FormalParameterContext extends ParserRuleContext {
    unannType(): UnannTypeContext;
    parameterDeclaratorIds(): ParameterDeclaratorIdsContext;
    variableModifier(): VariableModifierContext[];
    variableModifier(i: number): VariableModifierContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class ParameterDeclaratorIdsContext extends ParserRuleContext {
    parameterDeclaratorId(): ParameterDeclaratorIdContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class ParameterDeclaratorIdContext extends ParserRuleContext {
    parameterName(): ParameterNameContext;
    dims(): DimsContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class ParameterNameContext extends ParserRuleContext {
    Identifier(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class VariableModifierContext extends ParserRuleContext {
    annotation(): AnnotationContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class LastFormalParameterContext extends ParserRuleContext {
    unannType(): UnannTypeContext | undefined;
    variableDeclaratorId(): VariableDeclaratorIdContext | undefined;
    variableModifier(): VariableModifierContext[];
    variableModifier(i: number): VariableModifierContext;
    annotation(): AnnotationContext[];
    annotation(i: number): AnnotationContext;
    formalParameter(): FormalParameterContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class ReceiverParameterContext extends ParserRuleContext {
    unannType(): UnannTypeContext;
    annotation(): AnnotationContext[];
    annotation(i: number): AnnotationContext;
    Identifier(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class Throws_Context extends ParserRuleContext {
    exceptionTypeList(): ExceptionTypeListContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class ExceptionTypeListContext extends ParserRuleContext {
    exceptionType(): ExceptionTypeContext[];
    exceptionType(i: number): ExceptionTypeContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class ExceptionTypeContext extends ParserRuleContext {
    classType(): ClassTypeContext | undefined;
    typeVariable(): TypeVariableContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class MethodBodyContext extends ParserRuleContext {
    block(): BlockContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class InstanceInitializerContext extends ParserRuleContext {
    block(): BlockContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class StaticInitializerContext extends ParserRuleContext {
    block(): BlockContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class ConstructorDeclarationContext extends ParserRuleContext {
    constructorDeclarator(): ConstructorDeclaratorContext;
    constructorBody(): ConstructorBodyContext;
    constructorModifier(): ConstructorModifierContext[];
    constructorModifier(i: number): ConstructorModifierContext;
    throws_(): Throws_Context | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class ConstructorModifierContext extends ParserRuleContext {
    annotation(): AnnotationContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class ConstructorDeclaratorContext extends ParserRuleContext {
    simpleTypeName(): SimpleTypeNameContext;
    typeParameters(): TypeParametersContext | undefined;
    formalParameterList(): FormalParameterListContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class SimpleTypeNameContext extends ParserRuleContext {
    Identifier(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class ConstructorBodyContext extends ParserRuleContext {
    explicitConstructorInvocation(): ExplicitConstructorInvocationContext | undefined;
    blockStatements(): BlockStatementsContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class ExplicitConstructorInvocationContext extends ParserRuleContext {
    typeArguments(): TypeArgumentsContext | undefined;
    argumentList(): ArgumentListContext | undefined;
    expressionName(): ExpressionNameContext | undefined;
    primary(): PrimaryContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class EnumDeclarationContext extends ParserRuleContext {
    Identifier(): TerminalNode;
    enumBody(): EnumBodyContext;
    classModifier(): ClassModifierContext[];
    classModifier(i: number): ClassModifierContext;
    superinterfaces(): SuperinterfacesContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class EnumBodyContext extends ParserRuleContext {
    enumConstantList(): EnumConstantListContext | undefined;
    enumBodyDeclarations(): EnumBodyDeclarationsContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class EnumConstantListContext extends ParserRuleContext {
    enumConstant(): EnumConstantContext[];
    enumConstant(i: number): EnumConstantContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class EnumConstantContext extends ParserRuleContext {
    Identifier(): TerminalNode;
    enumConstantModifier(): EnumConstantModifierContext[];
    enumConstantModifier(i: number): EnumConstantModifierContext;
    classBody(): ClassBodyContext | undefined;
    argumentList(): ArgumentListContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class EnumConstantModifierContext extends ParserRuleContext {
    annotation(): AnnotationContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class EnumBodyDeclarationsContext extends ParserRuleContext {
    classBodyDeclaration(): ClassBodyDeclarationContext[];
    classBodyDeclaration(i: number): ClassBodyDeclarationContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class InterfaceDeclarationContext extends ParserRuleContext {
    normalInterfaceDeclaration(): NormalInterfaceDeclarationContext | undefined;
    annotationTypeDeclaration(): AnnotationTypeDeclarationContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class NormalInterfaceDeclarationContext extends ParserRuleContext {
    interfaceModifiers(): InterfaceModifiersContext;
    interfaceName(): InterfaceNameContext;
    interfaceBody(): InterfaceBodyContext;
    typeParameters(): TypeParametersContext | undefined;
    extendsInterfaces(): ExtendsInterfacesContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class InterfaceModifiersContext extends ParserRuleContext {
    interfaceModifier(): InterfaceModifierContext[];
    interfaceModifier(i: number): InterfaceModifierContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class InterfaceNameContext extends ParserRuleContext {
    Identifier(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class InterfaceModifierContext extends ParserRuleContext {
    annotation(): AnnotationContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class ExtendsInterfacesContext extends ParserRuleContext {
    interfaceTypeList(): InterfaceTypeListContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class InterfaceBodyContext extends ParserRuleContext {
    interfaceMemberDeclaration(): InterfaceMemberDeclarationContext[];
    interfaceMemberDeclaration(i: number): InterfaceMemberDeclarationContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class InterfaceMemberDeclarationContext extends ParserRuleContext {
    constantDeclaration(): ConstantDeclarationContext | undefined;
    interfaceMethodDeclaration(): InterfaceMethodDeclarationContext | undefined;
    classDeclaration(): ClassDeclarationContext | undefined;
    interfaceDeclaration(): InterfaceDeclarationContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class ConstantDeclarationContext extends ParserRuleContext {
    constantModifiers(): ConstantModifiersContext;
    unannType(): UnannTypeContext;
    variableDeclaratorList(): VariableDeclaratorListContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class ConstantModifiersContext extends ParserRuleContext {
    constantModifier(): ConstantModifierContext[];
    constantModifier(i: number): ConstantModifierContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class ConstantModifierContext extends ParserRuleContext {
    annotation(): AnnotationContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class InterfaceMethodDeclarationContext extends ParserRuleContext {
    interfaceMethodModifiers(): InterfaceMethodModifiersContext;
    methodHeader(): MethodHeaderContext;
    methodBody(): MethodBodyContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class InterfaceMethodModifiersContext extends ParserRuleContext {
    interfaceMethodModifier(): InterfaceMethodModifierContext[];
    interfaceMethodModifier(i: number): InterfaceMethodModifierContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class InterfaceMethodModifierContext extends ParserRuleContext {
    annotation(): AnnotationContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class AnnotationTypeDeclarationContext extends ParserRuleContext {
    Identifier(): TerminalNode;
    annotationTypeBody(): AnnotationTypeBodyContext;
    interfaceModifier(): InterfaceModifierContext[];
    interfaceModifier(i: number): InterfaceModifierContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class AnnotationTypeBodyContext extends ParserRuleContext {
    annotationTypeMemberDeclaration(): AnnotationTypeMemberDeclarationContext[];
    annotationTypeMemberDeclaration(i: number): AnnotationTypeMemberDeclarationContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class AnnotationTypeMemberDeclarationContext extends ParserRuleContext {
    annotationTypeElementDeclaration(): AnnotationTypeElementDeclarationContext | undefined;
    constantDeclaration(): ConstantDeclarationContext | undefined;
    classDeclaration(): ClassDeclarationContext | undefined;
    interfaceDeclaration(): InterfaceDeclarationContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class AnnotationTypeElementDeclarationContext extends ParserRuleContext {
    unannType(): UnannTypeContext;
    Identifier(): TerminalNode;
    annotationTypeElementModifier(): AnnotationTypeElementModifierContext[];
    annotationTypeElementModifier(i: number): AnnotationTypeElementModifierContext;
    dims(): DimsContext | undefined;
    defaultValue(): DefaultValueContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class AnnotationTypeElementModifierContext extends ParserRuleContext {
    annotation(): AnnotationContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class DefaultValueContext extends ParserRuleContext {
    elementValue(): ElementValueContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class AnnotationContext extends ParserRuleContext {
    normalAnnotation(): NormalAnnotationContext | undefined;
    markerAnnotation(): MarkerAnnotationContext | undefined;
    singleElementAnnotation(): SingleElementAnnotationContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class NormalAnnotationContext extends ParserRuleContext {
    typeName(): TypeNameContext;
    elementValuePairList(): ElementValuePairListContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class ElementValuePairListContext extends ParserRuleContext {
    elementValuePair(): ElementValuePairContext[];
    elementValuePair(i: number): ElementValuePairContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class ElementValuePairContext extends ParserRuleContext {
    Identifier(): TerminalNode;
    elementValue(): ElementValueContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class ElementValueContext extends ParserRuleContext {
    conditionalExpression(): ConditionalExpressionContext | undefined;
    elementValueArrayInitializer(): ElementValueArrayInitializerContext | undefined;
    annotation(): AnnotationContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class ElementValueArrayInitializerContext extends ParserRuleContext {
    elementValueList(): ElementValueListContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class ElementValueListContext extends ParserRuleContext {
    elementValue(): ElementValueContext[];
    elementValue(i: number): ElementValueContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class MarkerAnnotationContext extends ParserRuleContext {
    typeName(): TypeNameContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class SingleElementAnnotationContext extends ParserRuleContext {
    typeName(): TypeNameContext;
    elementValue(): ElementValueContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class ArrayInitializerContext extends ParserRuleContext {
    variableInitializerList(): VariableInitializerListContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class VariableInitializerListContext extends ParserRuleContext {
    variableInitializer(): VariableInitializerContext[];
    variableInitializer(i: number): VariableInitializerContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class BlockContext extends ParserRuleContext {
    blockStatements(): BlockStatementsContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class BlockStatementsContext extends ParserRuleContext {
    blockStatement(): BlockStatementContext[];
    blockStatement(i: number): BlockStatementContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class BlockStatementContext extends ParserRuleContext {
    localVariableDeclarationStatement(): LocalVariableDeclarationStatementContext | undefined;
    classDeclaration(): ClassDeclarationContext | undefined;
    statement(): StatementContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class LocalVariableDeclarationStatementContext extends ParserRuleContext {
    localVariableDeclaration(): LocalVariableDeclarationContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class LocalVariableDeclarationContext extends ParserRuleContext {
    unannType(): UnannTypeContext;
    variableDeclaratorList(): VariableDeclaratorListContext;
    variableModifier(): VariableModifierContext[];
    variableModifier(i: number): VariableModifierContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class StatementContext extends ParserRuleContext {
    statementWithoutTrailingSubstatement(): StatementWithoutTrailingSubstatementContext | undefined;
    labeledStatement(): LabeledStatementContext | undefined;
    ifThenStatement(): IfThenStatementContext | undefined;
    ifThenElseStatement(): IfThenElseStatementContext | undefined;
    whileStatement(): WhileStatementContext | undefined;
    forStatement(): ForStatementContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class StatementNoShortIfContext extends ParserRuleContext {
    statementWithoutTrailingSubstatement(): StatementWithoutTrailingSubstatementContext | undefined;
    labeledStatementNoShortIf(): LabeledStatementNoShortIfContext | undefined;
    ifThenElseStatementNoShortIf(): IfThenElseStatementNoShortIfContext | undefined;
    whileStatementNoShortIf(): WhileStatementNoShortIfContext | undefined;
    forStatementNoShortIf(): ForStatementNoShortIfContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class StatementWithoutTrailingSubstatementContext extends ParserRuleContext {
    block(): BlockContext | undefined;
    emptyStatement(): EmptyStatementContext | undefined;
    expressionStatement(): ExpressionStatementContext | undefined;
    assertStatement(): AssertStatementContext | undefined;
    switchStatement(): SwitchStatementContext | undefined;
    doStatement(): DoStatementContext | undefined;
    breakStatement(): BreakStatementContext | undefined;
    continueStatement(): ContinueStatementContext | undefined;
    returnStatement(): ReturnStatementContext | undefined;
    synchronizedStatement(): SynchronizedStatementContext | undefined;
    throwStatement(): ThrowStatementContext | undefined;
    tryStatement(): TryStatementContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class EmptyStatementContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class LabeledStatementContext extends ParserRuleContext {
    Identifier(): TerminalNode;
    statement(): StatementContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class LabeledStatementNoShortIfContext extends ParserRuleContext {
    Identifier(): TerminalNode;
    statementNoShortIf(): StatementNoShortIfContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class ExpressionStatementContext extends ParserRuleContext {
    statementExpression(): StatementExpressionContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class StatementExpressionContext extends ParserRuleContext {
    assignment(): AssignmentContext | undefined;
    preIncrementExpression(): PreIncrementExpressionContext | undefined;
    preDecrementExpression(): PreDecrementExpressionContext | undefined;
    postIncrementExpression(): PostIncrementExpressionContext | undefined;
    postDecrementExpression(): PostDecrementExpressionContext | undefined;
    methodInvocation(): MethodInvocationContext | undefined;
    classInstanceCreationExpression(): ClassInstanceCreationExpressionContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class IfThenStatementContext extends ParserRuleContext {
    expression(): ExpressionContext;
    statement(): StatementContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class IfThenElseStatementContext extends ParserRuleContext {
    expression(): ExpressionContext;
    statementNoShortIf(): StatementNoShortIfContext;
    statement(): StatementContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class IfThenElseStatementNoShortIfContext extends ParserRuleContext {
    expression(): ExpressionContext;
    statementNoShortIf(): StatementNoShortIfContext[];
    statementNoShortIf(i: number): StatementNoShortIfContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class AssertStatementContext extends ParserRuleContext {
    expression(): ExpressionContext[];
    expression(i: number): ExpressionContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class SwitchStatementContext extends ParserRuleContext {
    expression(): ExpressionContext;
    switchBlock(): SwitchBlockContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class SwitchBlockContext extends ParserRuleContext {
    switchBlockStatementGroup(): SwitchBlockStatementGroupContext[];
    switchBlockStatementGroup(i: number): SwitchBlockStatementGroupContext;
    switchLabel(): SwitchLabelContext[];
    switchLabel(i: number): SwitchLabelContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class SwitchBlockStatementGroupContext extends ParserRuleContext {
    switchLabels(): SwitchLabelsContext;
    blockStatements(): BlockStatementsContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class SwitchLabelsContext extends ParserRuleContext {
    switchLabel(): SwitchLabelContext[];
    switchLabel(i: number): SwitchLabelContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class SwitchLabelContext extends ParserRuleContext {
    constantExpression(): ConstantExpressionContext | undefined;
    enumConstantName(): EnumConstantNameContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class EnumConstantNameContext extends ParserRuleContext {
    Identifier(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class WhileStatementContext extends ParserRuleContext {
    expression(): ExpressionContext;
    statement(): StatementContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class WhileStatementNoShortIfContext extends ParserRuleContext {
    expression(): ExpressionContext;
    statementNoShortIf(): StatementNoShortIfContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class DoStatementContext extends ParserRuleContext {
    statement(): StatementContext;
    expression(): ExpressionContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class ForStatementContext extends ParserRuleContext {
    basicForStatement(): BasicForStatementContext | undefined;
    enhancedForStatement(): EnhancedForStatementContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class ForStatementNoShortIfContext extends ParserRuleContext {
    basicForStatementNoShortIf(): BasicForStatementNoShortIfContext | undefined;
    enhancedForStatementNoShortIf(): EnhancedForStatementNoShortIfContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class BasicForStatementContext extends ParserRuleContext {
    statement(): StatementContext;
    forInit(): ForInitContext | undefined;
    expression(): ExpressionContext | undefined;
    forUpdate(): ForUpdateContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class BasicForStatementNoShortIfContext extends ParserRuleContext {
    statementNoShortIf(): StatementNoShortIfContext;
    forInit(): ForInitContext | undefined;
    expression(): ExpressionContext | undefined;
    forUpdate(): ForUpdateContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class ForInitContext extends ParserRuleContext {
    statementExpressionList(): StatementExpressionListContext | undefined;
    localVariableDeclaration(): LocalVariableDeclarationContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class ForUpdateContext extends ParserRuleContext {
    statementExpressionList(): StatementExpressionListContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class StatementExpressionListContext extends ParserRuleContext {
    statementExpression(): StatementExpressionContext[];
    statementExpression(i: number): StatementExpressionContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class EnhancedForStatementContext extends ParserRuleContext {
    unannType(): UnannTypeContext;
    variableDeclaratorId(): VariableDeclaratorIdContext;
    expression(): ExpressionContext;
    statement(): StatementContext;
    variableModifier(): VariableModifierContext[];
    variableModifier(i: number): VariableModifierContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class EnhancedForStatementNoShortIfContext extends ParserRuleContext {
    unannType(): UnannTypeContext;
    variableDeclaratorId(): VariableDeclaratorIdContext;
    expression(): ExpressionContext;
    statementNoShortIf(): StatementNoShortIfContext;
    variableModifier(): VariableModifierContext[];
    variableModifier(i: number): VariableModifierContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class BreakStatementContext extends ParserRuleContext {
    Identifier(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class ContinueStatementContext extends ParserRuleContext {
    Identifier(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class ReturnStatementContext extends ParserRuleContext {
    expression(): ExpressionContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class ThrowStatementContext extends ParserRuleContext {
    expression(): ExpressionContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class SynchronizedStatementContext extends ParserRuleContext {
    expression(): ExpressionContext;
    block(): BlockContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class TryStatementContext extends ParserRuleContext {
    block(): BlockContext | undefined;
    catches(): CatchesContext | undefined;
    finally_(): Finally_Context | undefined;
    tryWithResourcesStatement(): TryWithResourcesStatementContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class CatchesContext extends ParserRuleContext {
    catchClause(): CatchClauseContext[];
    catchClause(i: number): CatchClauseContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class CatchClauseContext extends ParserRuleContext {
    catchFormalParameter(): CatchFormalParameterContext;
    block(): BlockContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class CatchFormalParameterContext extends ParserRuleContext {
    catchType(): CatchTypeContext;
    variableDeclaratorId(): VariableDeclaratorIdContext;
    variableModifier(): VariableModifierContext[];
    variableModifier(i: number): VariableModifierContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class CatchTypeContext extends ParserRuleContext {
    unannClassType(): UnannClassTypeContext;
    classType(): ClassTypeContext[];
    classType(i: number): ClassTypeContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class Finally_Context extends ParserRuleContext {
    block(): BlockContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class TryWithResourcesStatementContext extends ParserRuleContext {
    resourceSpecification(): ResourceSpecificationContext;
    block(): BlockContext;
    catches(): CatchesContext | undefined;
    finally_(): Finally_Context | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class ResourceSpecificationContext extends ParserRuleContext {
    resourceList(): ResourceListContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class ResourceListContext extends ParserRuleContext {
    resource(): ResourceContext[];
    resource(i: number): ResourceContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class ResourceContext extends ParserRuleContext {
    unannType(): UnannTypeContext;
    variableDeclaratorId(): VariableDeclaratorIdContext;
    expression(): ExpressionContext;
    variableModifier(): VariableModifierContext[];
    variableModifier(i: number): VariableModifierContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class PrimaryContext extends ParserRuleContext {
    primaryNoNewArray_lfno_primary(): PrimaryNoNewArray_lfno_primaryContext | undefined;
    arrayCreationExpression(): ArrayCreationExpressionContext | undefined;
    primaryNoNewArray_lf_primary(): PrimaryNoNewArray_lf_primaryContext[];
    primaryNoNewArray_lf_primary(i: number): PrimaryNoNewArray_lf_primaryContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class PrimaryNoNewArrayContext extends ParserRuleContext {
    literal(): LiteralContext | undefined;
    typeName(): TypeNameContext | undefined;
    expression(): ExpressionContext | undefined;
    classInstanceCreationExpression(): ClassInstanceCreationExpressionContext | undefined;
    fieldAccess(): FieldAccessContext | undefined;
    arrayAccess(): ArrayAccessContext | undefined;
    methodInvocation(): MethodInvocationContext | undefined;
    methodReference(): MethodReferenceContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class PrimaryNoNewArray_lf_arrayAccessContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class PrimaryNoNewArray_lfno_arrayAccessContext extends ParserRuleContext {
    literal(): LiteralContext | undefined;
    typeName(): TypeNameContext | undefined;
    expression(): ExpressionContext | undefined;
    classInstanceCreationExpression(): ClassInstanceCreationExpressionContext | undefined;
    fieldAccess(): FieldAccessContext | undefined;
    methodInvocation(): MethodInvocationContext | undefined;
    methodReference(): MethodReferenceContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class PrimaryNoNewArray_lf_primaryContext extends ParserRuleContext {
    classInstanceCreationExpression_lf_primary(): ClassInstanceCreationExpression_lf_primaryContext | undefined;
    fieldAccess_lf_primary(): FieldAccess_lf_primaryContext | undefined;
    arrayAccess_lf_primary(): ArrayAccess_lf_primaryContext | undefined;
    methodInvocation_lf_primary(): MethodInvocation_lf_primaryContext | undefined;
    methodReference_lf_primary(): MethodReference_lf_primaryContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext extends ParserRuleContext {
    classInstanceCreationExpression_lf_primary(): ClassInstanceCreationExpression_lf_primaryContext | undefined;
    fieldAccess_lf_primary(): FieldAccess_lf_primaryContext | undefined;
    methodInvocation_lf_primary(): MethodInvocation_lf_primaryContext | undefined;
    methodReference_lf_primary(): MethodReference_lf_primaryContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class PrimaryNoNewArray_lfno_primaryContext extends ParserRuleContext {
    literal(): LiteralContext | undefined;
    typeName(): TypeNameContext | undefined;
    unannPrimitiveType(): UnannPrimitiveTypeContext | undefined;
    expression(): ExpressionContext | undefined;
    classInstanceCreationExpression_lfno_primary(): ClassInstanceCreationExpression_lfno_primaryContext | undefined;
    fieldAccess_lfno_primary(): FieldAccess_lfno_primaryContext | undefined;
    arrayAccess_lfno_primary(): ArrayAccess_lfno_primaryContext | undefined;
    methodInvocation_lfno_primary(): MethodInvocation_lfno_primaryContext | undefined;
    methodReference_lfno_primary(): MethodReference_lfno_primaryContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext extends ParserRuleContext {
    literal(): LiteralContext | undefined;
    typeName(): TypeNameContext | undefined;
    unannPrimitiveType(): UnannPrimitiveTypeContext | undefined;
    expression(): ExpressionContext | undefined;
    classInstanceCreationExpression_lfno_primary(): ClassInstanceCreationExpression_lfno_primaryContext | undefined;
    fieldAccess_lfno_primary(): FieldAccess_lfno_primaryContext | undefined;
    methodInvocation_lfno_primary(): MethodInvocation_lfno_primaryContext | undefined;
    methodReference_lfno_primary(): MethodReference_lfno_primaryContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class ClassInstanceCreationExpressionContext extends ParserRuleContext {
    Identifier(): TerminalNode[];
    Identifier(i: number): TerminalNode;
    typeArguments(): TypeArgumentsContext | undefined;
    annotation(): AnnotationContext[];
    annotation(i: number): AnnotationContext;
    typeArgumentsOrDiamond(): TypeArgumentsOrDiamondContext | undefined;
    argumentList(): ArgumentListContext | undefined;
    classBody(): ClassBodyContext | undefined;
    expressionName(): ExpressionNameContext | undefined;
    primary(): PrimaryContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class ClassInstanceCreationExpression_lf_primaryContext extends ParserRuleContext {
    Identifier(): TerminalNode;
    typeArguments(): TypeArgumentsContext | undefined;
    annotation(): AnnotationContext[];
    annotation(i: number): AnnotationContext;
    typeArgumentsOrDiamond(): TypeArgumentsOrDiamondContext | undefined;
    argumentList(): ArgumentListContext | undefined;
    classBody(): ClassBodyContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class ClassInstanceCreationExpression_lfno_primaryContext extends ParserRuleContext {
    Identifier(): TerminalNode[];
    Identifier(i: number): TerminalNode;
    typeArguments(): TypeArgumentsContext | undefined;
    annotation(): AnnotationContext[];
    annotation(i: number): AnnotationContext;
    typeArgumentsOrDiamond(): TypeArgumentsOrDiamondContext | undefined;
    argumentList(): ArgumentListContext | undefined;
    classBody(): ClassBodyContext | undefined;
    expressionName(): ExpressionNameContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class TypeArgumentsOrDiamondContext extends ParserRuleContext {
    typeArguments(): TypeArgumentsContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class FieldAccessContext extends ParserRuleContext {
    primary(): PrimaryContext | undefined;
    Identifier(): TerminalNode;
    typeName(): TypeNameContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class FieldAccess_lf_primaryContext extends ParserRuleContext {
    Identifier(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class FieldAccess_lfno_primaryContext extends ParserRuleContext {
    Identifier(): TerminalNode;
    typeName(): TypeNameContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class ArrayAccessContext extends ParserRuleContext {
    expressionName(): ExpressionNameContext | undefined;
    LBRACK(): TerminalNode[];
    LBRACK(i: number): TerminalNode;
    expression(): ExpressionContext[];
    expression(i: number): ExpressionContext;
    RBRACK(): TerminalNode[];
    RBRACK(i: number): TerminalNode;
    primaryNoNewArray_lfno_arrayAccess(): PrimaryNoNewArray_lfno_arrayAccessContext | undefined;
    primaryNoNewArray_lf_arrayAccess(): PrimaryNoNewArray_lf_arrayAccessContext[];
    primaryNoNewArray_lf_arrayAccess(i: number): PrimaryNoNewArray_lf_arrayAccessContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class ArrayAccess_lf_primaryContext extends ParserRuleContext {
    primaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary(): PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext | undefined;
    LBRACK(): TerminalNode[];
    LBRACK(i: number): TerminalNode;
    expression(): ExpressionContext[];
    expression(i: number): ExpressionContext;
    RBRACK(): TerminalNode[];
    RBRACK(i: number): TerminalNode;
    primaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary(): PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext[];
    primaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary(i: number): PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class ArrayAccess_lfno_primaryContext extends ParserRuleContext {
    expressionName(): ExpressionNameContext | undefined;
    LBRACK(): TerminalNode[];
    LBRACK(i: number): TerminalNode;
    expression(): ExpressionContext[];
    expression(i: number): ExpressionContext;
    RBRACK(): TerminalNode[];
    RBRACK(i: number): TerminalNode;
    primaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary(): PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext | undefined;
    primaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary(): PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext[];
    primaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary(i: number): PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class MethodInvocationContext extends ParserRuleContext {
    ident(): IdentContext | undefined;
    argumentList(): ArgumentListContext | undefined;
    receivers(): ReceiversContext | undefined;
    typeArguments(): TypeArgumentsContext | undefined;
    expressionName(): ExpressionNameContext | undefined;
    primary(): PrimaryContext | undefined;
    Identifier(): TerminalNode | undefined;
    typeName(): TypeNameContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class ReceiversContext extends ParserRuleContext {
    receiver(): ReceiverContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class ReceiverContext extends ParserRuleContext {
    ident(): IdentContext[];
    ident(i: number): IdentContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class IdentContext extends ParserRuleContext {
    Identifier(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class MethodInvocation_lf_primaryContext extends ParserRuleContext {
    Identifier(): TerminalNode;
    typeArguments(): TypeArgumentsContext | undefined;
    argumentList(): ArgumentListContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class MethodInvocation_lfno_primaryContext extends ParserRuleContext {
    methodName(): MethodNameContext | undefined;
    argumentList(): ArgumentListContext | undefined;
    typeNameIdent(): TypeNameIdentContext | undefined;
    ident(): IdentContext | undefined;
    typeArguments(): TypeArgumentsContext | undefined;
    expressionName(): ExpressionNameContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class ArgumentListContext extends ParserRuleContext {
    expression(): ExpressionContext[];
    expression(i: number): ExpressionContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class MethodReferenceContext extends ParserRuleContext {
    expressionName(): ExpressionNameContext | undefined;
    Identifier(): TerminalNode | undefined;
    typeArguments(): TypeArgumentsContext | undefined;
    referenceType(): ReferenceTypeContext | undefined;
    primary(): PrimaryContext | undefined;
    typeName(): TypeNameContext | undefined;
    classType(): ClassTypeContext | undefined;
    arrayType(): ArrayTypeContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class MethodReference_lf_primaryContext extends ParserRuleContext {
    Identifier(): TerminalNode;
    typeArguments(): TypeArgumentsContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class MethodReference_lfno_primaryContext extends ParserRuleContext {
    expressionName(): ExpressionNameContext | undefined;
    Identifier(): TerminalNode | undefined;
    typeArguments(): TypeArgumentsContext | undefined;
    referenceType(): ReferenceTypeContext | undefined;
    typeName(): TypeNameContext | undefined;
    classType(): ClassTypeContext | undefined;
    arrayType(): ArrayTypeContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class ArrayCreationExpressionContext extends ParserRuleContext {
    primitiveType(): PrimitiveTypeContext | undefined;
    dimExprs(): DimExprsContext | undefined;
    dims(): DimsContext | undefined;
    classOrInterfaceType(): ClassOrInterfaceTypeContext | undefined;
    arrayInitializer(): ArrayInitializerContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class DimExprsContext extends ParserRuleContext {
    dimExpr(): DimExprContext[];
    dimExpr(i: number): DimExprContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class DimExprContext extends ParserRuleContext {
    expression(): ExpressionContext;
    annotation(): AnnotationContext[];
    annotation(i: number): AnnotationContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class ConstantExpressionContext extends ParserRuleContext {
    expression(): ExpressionContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class ExpressionContext extends ParserRuleContext {
    lambdaExpression(): LambdaExpressionContext | undefined;
    assignmentExpression(): AssignmentExpressionContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class LambdaExpressionContext extends ParserRuleContext {
    lambdaParameters(): LambdaParametersContext;
    lambdaBody(): LambdaBodyContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class LambdaParametersContext extends ParserRuleContext {
    Identifier(): TerminalNode | undefined;
    formalParameterList(): FormalParameterListContext | undefined;
    inferredFormalParameterList(): InferredFormalParameterListContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class InferredFormalParameterListContext extends ParserRuleContext {
    Identifier(): TerminalNode[];
    Identifier(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class LambdaBodyContext extends ParserRuleContext {
    expression(): ExpressionContext | undefined;
    block(): BlockContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class AssignmentExpressionContext extends ParserRuleContext {
    conditionalExpression(): ConditionalExpressionContext | undefined;
    assignment(): AssignmentContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class AssignmentContext extends ParserRuleContext {
    leftHandSide(): LeftHandSideContext;
    assignmentOperator(): AssignmentOperatorContext;
    expression(): ExpressionContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class LeftHandSideContext extends ParserRuleContext {
    expressionName(): ExpressionNameContext | undefined;
    fieldAccess(): FieldAccessContext | undefined;
    arrayAccess(): ArrayAccessContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class AssignmentOperatorContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class ConditionalExpressionContext extends ParserRuleContext {
    conditionalOrExpression(): ConditionalOrExpressionContext;
    expression(): ExpressionContext | undefined;
    conditionalExpression(): ConditionalExpressionContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class OrContext extends ParserRuleContext {
    OR(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class ConditionalOrExpressionContext extends ParserRuleContext {
    conditionalAndExpression(): ConditionalAndExpressionContext;
    conditionalOrExpression(): ConditionalOrExpressionContext | undefined;
    or(): OrContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class AndContext extends ParserRuleContext {
    AND(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class ConditionalAndExpressionContext extends ParserRuleContext {
    inclusiveOrExpression(): InclusiveOrExpressionContext;
    conditionalAndExpression(): ConditionalAndExpressionContext | undefined;
    and(): AndContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class BitorContext extends ParserRuleContext {
    BITOR(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class InclusiveOrExpressionContext extends ParserRuleContext {
    exclusiveOrExpression(): ExclusiveOrExpressionContext;
    inclusiveOrExpression(): InclusiveOrExpressionContext | undefined;
    bitor(): BitorContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class CaretContext extends ParserRuleContext {
    CARET(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class ExclusiveOrExpressionContext extends ParserRuleContext {
    andExpression(): AndExpressionContext;
    exclusiveOrExpression(): ExclusiveOrExpressionContext | undefined;
    caret(): CaretContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class BitandContext extends ParserRuleContext {
    BITAND(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class AndExpressionContext extends ParserRuleContext {
    equalityExpression(): EqualityExpressionContext;
    andExpression(): AndExpressionContext | undefined;
    bitand(): BitandContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class EqualContext extends ParserRuleContext {
    EQUAL(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class NotequalContext extends ParserRuleContext {
    NOTEQUAL(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class EqualityExpressionContext extends ParserRuleContext {
    relationalExpression(): RelationalExpressionContext;
    equalityExpression(): EqualityExpressionContext | undefined;
    equal(): EqualContext | undefined;
    notequal(): NotequalContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class LtContext extends ParserRuleContext {
    LT(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class GtContext extends ParserRuleContext {
    GT(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class LeContext extends ParserRuleContext {
    LE(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class GeContext extends ParserRuleContext {
    GE(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class InstanceofContext extends ParserRuleContext {
    INSTANCEOF(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class RelationalExpressionContext extends ParserRuleContext {
    shiftExpression(): ShiftExpressionContext | undefined;
    relationalExpression(): RelationalExpressionContext | undefined;
    lt(): LtContext | undefined;
    gt(): GtContext | undefined;
    le(): LeContext | undefined;
    ge(): GeContext | undefined;
    instanceof(): InstanceofContext | undefined;
    referenceType(): ReferenceTypeContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class LtltContext extends ParserRuleContext {
    LT(): TerminalNode[];
    LT(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class GtgtContext extends ParserRuleContext {
    GT(): TerminalNode[];
    GT(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class GtgtgtContext extends ParserRuleContext {
    GT(): TerminalNode[];
    GT(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class ShiftExpressionContext extends ParserRuleContext {
    additiveExpression(): AdditiveExpressionContext;
    shiftExpression(): ShiftExpressionContext | undefined;
    ltlt(): LtltContext | undefined;
    gtgt(): GtgtContext | undefined;
    gtgtgt(): GtgtgtContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class AdditiveExpressionContext extends ParserRuleContext {
    multiplicativeExpression(): MultiplicativeExpressionContext;
    additiveExpression(): AdditiveExpressionContext | undefined;
    add(): AddContext | undefined;
    sub(): SubContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class MulContext extends ParserRuleContext {
    MUL(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class DivContext extends ParserRuleContext {
    DIV(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class ModContext extends ParserRuleContext {
    MOD(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class MultiplicativeExpressionContext extends ParserRuleContext {
    unaryExpression(): UnaryExpressionContext;
    multiplicativeExpression(): MultiplicativeExpressionContext | undefined;
    mul(): MulContext | undefined;
    div(): DivContext | undefined;
    mod(): ModContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class AddContext extends ParserRuleContext {
    ADD(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class SubContext extends ParserRuleContext {
    SUB(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class UnaryExpressionContext extends ParserRuleContext {
    preIncrementExpression(): PreIncrementExpressionContext | undefined;
    preDecrementExpression(): PreDecrementExpressionContext | undefined;
    add(): AddContext | undefined;
    unaryExpression(): UnaryExpressionContext | undefined;
    sub(): SubContext | undefined;
    unaryExpressionNotPlusMinus(): UnaryExpressionNotPlusMinusContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class IncContext extends ParserRuleContext {
    INC(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class PreIncrementExpressionContext extends ParserRuleContext {
    inc(): IncContext;
    unaryExpression(): UnaryExpressionContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class DecContext extends ParserRuleContext {
    DEC(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class PreDecrementExpressionContext extends ParserRuleContext {
    dec(): DecContext;
    unaryExpression(): UnaryExpressionContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class TildeContext extends ParserRuleContext {
    TILDE(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class BangContext extends ParserRuleContext {
    BANG(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class UnaryExpressionNotPlusMinusContext extends ParserRuleContext {
    postfixExpression(): PostfixExpressionContext | undefined;
    tilde(): TildeContext | undefined;
    unaryExpression(): UnaryExpressionContext | undefined;
    bang(): BangContext | undefined;
    castExpression(): CastExpressionContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class PostfixExpressionContext extends ParserRuleContext {
    primary(): PrimaryContext | undefined;
    expressionName(): ExpressionNameContext | undefined;
    postIncrementExpression_lf_postfixExpression(): PostIncrementExpression_lf_postfixExpressionContext[];
    postIncrementExpression_lf_postfixExpression(i: number): PostIncrementExpression_lf_postfixExpressionContext;
    postDecrementExpression_lf_postfixExpression(): PostDecrementExpression_lf_postfixExpressionContext[];
    postDecrementExpression_lf_postfixExpression(i: number): PostDecrementExpression_lf_postfixExpressionContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class PostIncrementExpressionContext extends ParserRuleContext {
    postfixExpression(): PostfixExpressionContext;
    inc(): IncContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class PostIncrementExpression_lf_postfixExpressionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class PostDecrementExpressionContext extends ParserRuleContext {
    postfixExpression(): PostfixExpressionContext;
    dec(): DecContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class PostDecrementExpression_lf_postfixExpressionContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
export declare class CastExpressionContext extends ParserRuleContext {
    primitiveType(): PrimitiveTypeContext | undefined;
    unaryExpression(): UnaryExpressionContext | undefined;
    referenceType(): ReferenceTypeContext | undefined;
    unaryExpressionNotPlusMinus(): UnaryExpressionNotPlusMinusContext | undefined;
    additionalBound(): AdditionalBoundContext[];
    additionalBound(i: number): AdditionalBoundContext;
    lambdaExpression(): LambdaExpressionContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    accept<Result>(visitor: Java8Visitor<Result>): Result;
}
