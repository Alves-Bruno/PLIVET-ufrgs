"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Java8Mapper = void 0;
// tslint:disable
const antlr4ts_1 = require("antlr4ts");
const TerminalNode_1 = require("antlr4ts/tree/TerminalNode");
const Java8Lexer_1 = require("./Java8Lexer");
const Java8Parser_1 = require("./Java8Parser");
const UniParam_1 = require("../../node/UniParam");
const UniExpr_1 = require("../../node/UniExpr");
const UniArray_1 = require("../../node/UniArray");
const UniBinOp_1 = require("../../node/UniBinOp");
const UniBlock_1 = require("../../node/UniBlock");
const UniBoolLiteral_1 = require("../../node/UniBoolLiteral");
const UniBreak_1 = require("../../node/UniBreak");
const UniContinue_1 = require("../../node/UniContinue");
const UniClassDec_1 = require("../../node/UniClassDec");
const UniDecralation_1 = require("../../node/UniDecralation");
const UniDoubleLiteral_1 = require("../../node/UniDoubleLiteral");
const UniFunctionDec_1 = require("../../node/UniFunctionDec");
const UniFor_1 = require("../../node/UniFor");
const UniIdent_1 = require("../../node/UniIdent");
const UniIf_1 = require("../../node/UniIf");
const UniImportDec_1 = require("../../node/UniImportDec");
const UniIntLiteral_1 = require("../../node/UniIntLiteral");
const UniMethodCall_1 = require("../../node/UniMethodCall");
const UniNew_1 = require("../../node/UniNew");
const UniNewArray_1 = require("../../node/UniNewArray");
const UniWhile_1 = require("../../node/UniWhile");
const UniUnaryOp_1 = require("../../node/UniUnaryOp");
const UniTernaryOp_1 = require("../../node/UniTernaryOp");
const UniStatement_1 = require("../../node/UniStatement");
const UniStringLiteral_1 = require("../../node/UniStringLiteral");
const UniReturn_1 = require("../../node/UniReturn");
const UniVariableDec_1 = require("../../node/UniVariableDec");
const UniVariableDef_1 = require("../../node/UniVariableDef");
const SyntaxErrorListener_1 = require("../mapper/SyntaxErrorListener");
const Mapper_1 = require("../mapper/Mapper");
require("../../node_helper/Extension");
class Java8Mapper extends Mapper_1.Mapper {
    preProcess(text) {
        return text;
    }
    parseToANTLRTree(code) {
        const preProcessedCode = this.preProcess(code);
        const chars = new antlr4ts_1.ANTLRInputStream(preProcessedCode);
        const lexer = new Java8Lexer_1.Java8Lexer(chars);
        const tokens = new antlr4ts_1.CommonTokenStream(lexer);
        const parser = new Java8Parser_1.Java8Parser(tokens);
        parser.addErrorListener(new SyntaxErrorListener_1.SyntaxErrorListener());
        const tree = parser.translationunit();
        this.parser = parser;
        return tree;
    }
    visitTranslationunit(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const body = [];
        map.set('body', body);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 564:
                        {
                            body.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        const node = this.castTo(map, UniBlock_1.UniBlock);
        return node;
    }
    visitIntegerLiteral(ctx) {
        const findFirst = (ctx) => {
            const n = ctx.childCount;
            for (let i = 0; i < n; ++i) {
                const it = ctx.getChild(i);
                if (it instanceof TerminalNode_1.TerminalNode) {
                    if (it.symbol.type == Java8Parser_1.Java8Parser.IntegerLiteral) {
                        return it;
                    }
                }
            }
            return undefined;
        };
        const text = this.visit(findFirst(ctx));
        return new UniIntLiteral_1.UniIntLiteral(Number(text));
    }
    visitFloatingPointLiteral(ctx) {
        const findFirst = (ctx) => {
            const n = ctx.childCount;
            for (let i = 0; i < n; ++i) {
                const it = ctx.getChild(i);
                if (it instanceof TerminalNode_1.TerminalNode) {
                    if (it.symbol.type == Java8Parser_1.Java8Parser.FloatingPointLiteral) {
                        return it;
                    }
                }
            }
            return undefined;
        };
        const text = this.visit(findFirst(ctx));
        return new UniDoubleLiteral_1.UniDoubleLiteral(Number(text));
    }
    visitBooleanLiteral(ctx) {
        const findFirst = (ctx) => {
            const n = ctx.childCount;
            for (let i = 0; i < n; ++i) {
                const it = ctx.getChild(i);
                if (it instanceof TerminalNode_1.TerminalNode) {
                    if (it.symbol.type == Java8Parser_1.Java8Parser.BooleanLiteral) {
                        return it;
                    }
                }
            }
            return undefined;
        };
        const text = this.visit(findFirst(ctx));
        return new UniBoolLiteral_1.UniBoolLiteral(Boolean(text));
    }
    visitStringLiteral(ctx) {
        const findFirst = (ctx) => {
            const n = ctx.childCount;
            for (let i = 0; i < n; ++i) {
                const it = ctx.getChild(i);
                if (it instanceof TerminalNode_1.TerminalNode) {
                    if (it.symbol.type == Java8Parser_1.Java8Parser.StringLiteral) {
                        return it;
                    }
                }
            }
            return undefined;
        };
        const text = this.visit(findFirst(ctx));
        return new UniStringLiteral_1.UniStringLiteral(text.substring(1, text.length - 1));
    }
    visitPrimitiveType(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        const node = this.castTo(map, String);
        return node;
    }
    visitClassOrInterfaceType(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        const node = this.castTo(map, String);
        return node;
    }
    visitClassType(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        const node = this.castTo(map, String);
        return node;
    }
    visitInterfaceType(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        const node = this.castTo(map, String);
        return node;
    }
    visitDims(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        const node = this.castTo(map, String);
        return node;
    }
    visitTypeNameIdent(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const name = [];
        map.set('name', name);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 799:
                        {
                            name.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        const node = this.castTo(map, UniIdent_1.UniIdent);
        return node;
    }
    visitExpressionName(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const name = [];
        map.set('name', name);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    case Java8Parser_1.Java8Parser.Identifier:
                        {
                            name.push(this.flatten(this.visit(it)));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        const node = this.castTo(map, UniIdent_1.UniIdent);
        return node;
    }
    visitCompilationUnit(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const add = [];
        map.set('add', add);
        const n = ctx.childCount;
        if (0 < n) {
            for (let i = 0; i < n; ++i) {
                const it = ctx.getChild(i);
                if (it instanceof antlr4ts_1.RuleContext) {
                    switch (it.invokingState) {
                        case 830:
                            {
                                const results = this.flatten(this.visit(it));
                                if (Array.isArray(results)) {
                                    for (const result of results)
                                        add.push(result);
                                }
                                else
                                    add.push(results);
                            }
                            break;
                        case 833:
                            {
                                const results = this.flatten(this.visit(it));
                                if (Array.isArray(results)) {
                                    for (const result of results)
                                        add.push(result);
                                }
                                else
                                    add.push(results);
                            }
                            break;
                        case 839:
                            {
                                const results = this.flatten(this.visit(it));
                                if (Array.isArray(results)) {
                                    for (const result of results)
                                        add.push(result);
                                }
                                else
                                    add.push(results);
                            }
                            break;
                        default:
                            {
                                none.push(this.visit(it));
                            }
                            break;
                    }
                }
                else if (it instanceof TerminalNode_1.TerminalNode) {
                    switch (it.symbol.type) {
                        default:
                            {
                                none.push(this.visit(it));
                            }
                            break;
                    }
                }
            }
        }
        const node = this.castToList(map, UniStatement_1.UniStatement);
        return node;
    }
    visitSingleTypeImportDeclaration(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const name = [];
        map.set('name', name);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 871:
                        {
                            name.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        const node = this.castTo(map, UniImportDec_1.UniImportDec);
        return node;
    }
    visitTypeImportOnDemandDeclaration(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const name = [];
        map.set('name', name);
        const ondemand = [];
        map.set('ondemand', ondemand);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 875:
                        {
                            name.push(this.visit(it));
                        }
                        break;
                    case 877:
                        {
                            ondemand.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        const node = this.castTo(map, UniImportDec_1.UniImportDec);
        return node;
    }
    visitSingleStaticImportDeclaration(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        const node = this.castTo(map, UniImportDec_1.UniImportDec);
        return node;
    }
    visitStaticImportOnDemandDeclaration(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        const node = this.castTo(map, UniImportDec_1.UniImportDec);
        return node;
    }
    visitTypeDeclaration(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const merge = [];
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 894:
                        {
                            merge.push(this.visit(it));
                        }
                        break;
                    case 895:
                        {
                            merge.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        let node = this.castTo(map, UniClassDec_1.UniClassDec);
        if (typeof node === 'object' && 'merge' in node) {
            merge.forEach((it) => {
                node.merge(this.castTo(it, UniClassDec_1.UniClassDec));
            });
        }
        else {
            node = new UniClassDec_1.UniClassDec();
            merge.forEach((it) => {
                node.merge(this.castTo(it, UniClassDec_1.UniClassDec));
            });
        }
        return node;
    }
    visitClassDeclaration(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const merge = [];
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 899:
                        {
                            merge.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        let node = this.castTo(map, UniClassDec_1.UniClassDec);
        if (typeof node === 'object' && 'merge' in node) {
            merge.forEach((it) => {
                node.merge(this.castTo(it, UniClassDec_1.UniClassDec));
            });
        }
        else {
            node = new UniClassDec_1.UniClassDec();
            merge.forEach((it) => {
                node.merge(this.castTo(it, UniClassDec_1.UniClassDec));
            });
        }
        return node;
    }
    visitNormalClassDeclaration(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const interfaces = [];
        map.set('interfaces', interfaces);
        const superClass = [];
        map.set('superClass', superClass);
        const members = [];
        map.set('members', members);
        const className = [];
        map.set('className', className);
        const modifiers = [];
        map.set('modifiers', modifiers);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 903:
                        {
                            modifiers.push(this.visit(it));
                        }
                        break;
                    case 905:
                        {
                            className.push(this.visit(it));
                        }
                        break;
                    case 909:
                        {
                            superClass.push(this.visit(it));
                        }
                        break;
                    case 912:
                        {
                            interfaces.push(this.visit(it));
                        }
                        break;
                    case 915:
                        {
                            members.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        const node = this.castTo(map, UniClassDec_1.UniClassDec);
        return node;
    }
    visitClassName(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        const node = this.castTo(map, String);
        return node;
    }
    visitClassModifiers(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const add = [];
        map.set('add', add);
        const n = ctx.childCount;
        if (0 < n) {
            for (let i = 0; i < n; ++i) {
                const it = ctx.getChild(i);
                if (it instanceof antlr4ts_1.RuleContext) {
                    switch (it.invokingState) {
                        case 919:
                            {
                                const results = this.flatten(this.visit(it));
                                if (Array.isArray(results)) {
                                    for (const result of results)
                                        add.push(result);
                                }
                                else
                                    add.push(results);
                            }
                            break;
                        default:
                            {
                                none.push(this.visit(it));
                            }
                            break;
                    }
                }
                else if (it instanceof TerminalNode_1.TerminalNode) {
                    switch (it.symbol.type) {
                        default:
                            {
                                none.push(this.visit(it));
                            }
                            break;
                    }
                }
            }
        }
        const node = this.castToList(map, String);
        return node;
    }
    visitClassModifier(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        const node = this.castTo(map, String);
        return node;
    }
    visitSuperclass(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const add = [];
        map.set('add', add);
        const n = ctx.childCount;
        if (0 < n) {
            for (let i = 0; i < n; ++i) {
                const it = ctx.getChild(i);
                if (it instanceof antlr4ts_1.RuleContext) {
                    switch (it.invokingState) {
                        case 948:
                            {
                                const results = this.flatten(this.visit(it));
                                if (Array.isArray(results)) {
                                    for (const result of results)
                                        add.push(result);
                                }
                                else
                                    add.push(results);
                            }
                            break;
                        default:
                            {
                                none.push(this.visit(it));
                            }
                            break;
                    }
                }
                else if (it instanceof TerminalNode_1.TerminalNode) {
                    switch (it.symbol.type) {
                        default:
                            {
                                none.push(this.visit(it));
                            }
                            break;
                    }
                }
            }
        }
        const node = this.castToList(map, String);
        return node;
    }
    visitSuperinterfaces(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const add = [];
        map.set('add', add);
        const n = ctx.childCount;
        if (0 < n) {
            for (let i = 0; i < n; ++i) {
                const it = ctx.getChild(i);
                if (it instanceof antlr4ts_1.RuleContext) {
                    switch (it.invokingState) {
                        case 951:
                            {
                                const results = this.flatten(this.visit(it));
                                if (Array.isArray(results)) {
                                    for (const result of results)
                                        add.push(result);
                                }
                                else
                                    add.push(results);
                            }
                            break;
                        default:
                            {
                                none.push(this.visit(it));
                            }
                            break;
                    }
                }
                else if (it instanceof TerminalNode_1.TerminalNode) {
                    switch (it.symbol.type) {
                        default:
                            {
                                none.push(this.visit(it));
                            }
                            break;
                    }
                }
            }
        }
        const node = this.castToList(map, String);
        return node;
    }
    visitInterfaceTypeList(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const add = [];
        map.set('add', add);
        const n = ctx.childCount;
        if (0 < n) {
            for (let i = 0; i < n; ++i) {
                const it = ctx.getChild(i);
                if (it instanceof antlr4ts_1.RuleContext) {
                    switch (it.invokingState) {
                        case 953:
                            {
                                const results = this.flatten(this.visit(it));
                                if (Array.isArray(results)) {
                                    for (const result of results)
                                        add.push(result);
                                }
                                else
                                    add.push(results);
                            }
                            break;
                        case 955:
                            {
                                const results = this.flatten(this.visit(it));
                                if (Array.isArray(results)) {
                                    for (const result of results)
                                        add.push(result);
                                }
                                else
                                    add.push(results);
                            }
                            break;
                        default:
                            {
                                none.push(this.visit(it));
                            }
                            break;
                    }
                }
                else if (it instanceof TerminalNode_1.TerminalNode) {
                    switch (it.symbol.type) {
                        default:
                            {
                                none.push(this.visit(it));
                            }
                            break;
                    }
                }
            }
        }
        const node = this.castToList(map, String);
        return node;
    }
    visitClassBody(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const add = [];
        map.set('add', add);
        const n = ctx.childCount;
        if (0 < n) {
            for (let i = 0; i < n; ++i) {
                const it = ctx.getChild(i);
                if (it instanceof antlr4ts_1.RuleContext) {
                    switch (it.invokingState) {
                        case 962:
                            {
                                const results = this.flatten(this.visit(it));
                                if (Array.isArray(results)) {
                                    for (const result of results)
                                        add.push(result);
                                }
                                else
                                    add.push(results);
                            }
                            break;
                        default:
                            {
                                none.push(this.visit(it));
                            }
                            break;
                    }
                }
                else if (it instanceof TerminalNode_1.TerminalNode) {
                    switch (it.symbol.type) {
                        default:
                            {
                                none.push(this.visit(it));
                            }
                            break;
                    }
                }
            }
        }
        const node = this.castToList(map, UniDecralation_1.UniDecralation);
        return node;
    }
    visitClassBodyDeclaration(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const add = [];
        map.set('add', add);
        const n = ctx.childCount;
        if (0 < n) {
            for (let i = 0; i < n; ++i) {
                const it = ctx.getChild(i);
                if (it instanceof antlr4ts_1.RuleContext) {
                    switch (it.invokingState) {
                        case 970:
                            {
                                const results = this.flatten(this.visit(it));
                                if (Array.isArray(results)) {
                                    for (const result of results)
                                        add.push(result);
                                }
                                else
                                    add.push(results);
                            }
                            break;
                        case 973:
                            {
                                const results = this.flatten(this.visit(it));
                                if (Array.isArray(results)) {
                                    for (const result of results)
                                        add.push(result);
                                }
                                else
                                    add.push(results);
                            }
                            break;
                        default:
                            {
                                none.push(this.visit(it));
                            }
                            break;
                    }
                }
                else if (it instanceof TerminalNode_1.TerminalNode) {
                    switch (it.symbol.type) {
                        default:
                            {
                                none.push(this.visit(it));
                            }
                            break;
                    }
                }
            }
        }
        const node = this.castToList(map, UniDecralation_1.UniDecralation);
        return node;
    }
    visitClassMemberDeclaration(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const add = [];
        map.set('add', add);
        const n = ctx.childCount;
        if (0 < n) {
            for (let i = 0; i < n; ++i) {
                const it = ctx.getChild(i);
                if (it instanceof antlr4ts_1.RuleContext) {
                    switch (it.invokingState) {
                        case 976:
                            {
                                const results = this.flatten(this.visit(it));
                                if (Array.isArray(results)) {
                                    for (const result of results)
                                        add.push(result);
                                }
                                else
                                    add.push(results);
                            }
                            break;
                        case 977:
                            {
                                const results = this.flatten(this.visit(it));
                                if (Array.isArray(results)) {
                                    for (const result of results)
                                        add.push(result);
                                }
                                else
                                    add.push(results);
                            }
                            break;
                        default:
                            {
                                none.push(this.visit(it));
                            }
                            break;
                    }
                }
                else if (it instanceof TerminalNode_1.TerminalNode) {
                    switch (it.symbol.type) {
                        default:
                            {
                                none.push(this.visit(it));
                            }
                            break;
                    }
                }
            }
        }
        const node = this.castToList(map, UniDecralation_1.UniDecralation);
        return node;
    }
    visitFieldDeclaration(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const add = [];
        map.set('add', add);
        const modifiers = [];
        map.set('modifiers', modifiers);
        const type = [];
        map.set('type', type);
        const n = ctx.childCount;
        if (0 < n) {
            for (let i = 0; i < n; ++i) {
                const it = ctx.getChild(i);
                if (it instanceof antlr4ts_1.RuleContext) {
                    switch (it.invokingState) {
                        case 983:
                            {
                                modifiers.push(this.visit(it));
                            }
                            break;
                        case 984:
                            {
                                type.push(this.visit(it));
                            }
                            break;
                        case 985:
                            {
                                const results = this.flatten(this.visit(it));
                                if (Array.isArray(results)) {
                                    for (const result of results)
                                        add.push(result);
                                }
                                else
                                    add.push(results);
                            }
                            break;
                        default:
                            {
                                none.push(this.visit(it));
                            }
                            break;
                    }
                }
                else if (it instanceof TerminalNode_1.TerminalNode) {
                    switch (it.symbol.type) {
                        default:
                            {
                                none.push(this.visit(it));
                            }
                            break;
                    }
                }
            }
        }
        const node = this.castToList(map, UniVariableDec_1.UniVariableDec);
        return node;
    }
    visitFieldModifiers(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const add = [];
        map.set('add', add);
        const n = ctx.childCount;
        if (0 < n) {
            for (let i = 0; i < n; ++i) {
                const it = ctx.getChild(i);
                if (it instanceof antlr4ts_1.RuleContext) {
                    switch (it.invokingState) {
                        case 988:
                            {
                                const results = this.flatten(this.visit(it));
                                if (Array.isArray(results)) {
                                    for (const result of results)
                                        add.push(result);
                                }
                                else
                                    add.push(results);
                            }
                            break;
                        default:
                            {
                                none.push(this.visit(it));
                            }
                            break;
                    }
                }
                else if (it instanceof TerminalNode_1.TerminalNode) {
                    switch (it.symbol.type) {
                        default:
                            {
                                none.push(this.visit(it));
                            }
                            break;
                    }
                }
            }
        }
        const node = this.castToList(map, String);
        return node;
    }
    visitFieldModifier(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        const node = this.castTo(map, String);
        return node;
    }
    visitVariableDeclaratorList(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const add = [];
        map.set('add', add);
        const n = ctx.childCount;
        if (0 < n) {
            for (let i = 0; i < n; ++i) {
                const it = ctx.getChild(i);
                if (it instanceof antlr4ts_1.RuleContext) {
                    switch (it.invokingState) {
                        case 1004:
                            {
                                const results = this.flatten(this.visit(it));
                                if (Array.isArray(results)) {
                                    for (const result of results)
                                        add.push(result);
                                }
                                else
                                    add.push(results);
                            }
                            break;
                        case 1006:
                            {
                                const results = this.flatten(this.visit(it));
                                if (Array.isArray(results)) {
                                    for (const result of results)
                                        add.push(result);
                                }
                                else
                                    add.push(results);
                            }
                            break;
                        default:
                            {
                                none.push(this.visit(it));
                            }
                            break;
                    }
                }
                else if (it instanceof TerminalNode_1.TerminalNode) {
                    switch (it.symbol.type) {
                        default:
                            {
                                none.push(this.visit(it));
                            }
                            break;
                    }
                }
            }
        }
        const node = this.castToList(map, UniVariableDef_1.UniVariableDef);
        return node;
    }
    visitVariableDeclarator(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const name = [];
        map.set('name', name);
        const value = [];
        map.set('value', value);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 1012:
                        {
                            name.push(this.visit(it));
                        }
                        break;
                    case 1014:
                        {
                            value.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        const node = this.castTo(map, UniVariableDef_1.UniVariableDef);
        return node;
    }
    visitVariableDeclaratorId(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        const node = this.castTo(map, String);
        return node;
    }
    visitUnannType(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        const node = this.castTo(map, String);
        return node;
    }
    visitMethodDeclaration(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const block = [];
        map.set('block', block);
        const modifiers = [];
        map.set('modifiers', modifiers);
        const merge = [];
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 1101:
                        {
                            modifiers.push(this.visit(it));
                        }
                        break;
                    case 1107:
                        {
                            merge.push(this.visit(it));
                        }
                        break;
                    case 1108:
                        {
                            block.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        let node = this.castTo(map, UniFunctionDec_1.UniFunctionDec);
        if (typeof node === 'object' && 'merge' in node) {
            merge.forEach((it) => {
                node.merge(this.castTo(it, UniFunctionDec_1.UniFunctionDec));
            });
        }
        else {
            node = new UniFunctionDec_1.UniFunctionDec();
            merge.forEach((it) => {
                node.merge(this.castTo(it, UniFunctionDec_1.UniFunctionDec));
            });
        }
        return node;
    }
    visitMethodModifier(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        const node = this.castTo(map, String);
        return node;
    }
    visitMethodHeader(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const returnType = [];
        map.set('returnType', returnType);
        const merge = [];
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 1122:
                        {
                            returnType.push(this.visit(it));
                        }
                        break;
                    case 1123:
                        {
                            merge.push(this.visit(it));
                        }
                        break;
                    case 1134:
                        {
                            returnType.push(this.visit(it));
                        }
                        break;
                    case 1135:
                        {
                            merge.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        let node = this.castTo(map, UniFunctionDec_1.UniFunctionDec);
        if (typeof node === 'object' && 'merge' in node) {
            merge.forEach((it) => {
                node.merge(this.castTo(it, UniFunctionDec_1.UniFunctionDec));
            });
        }
        else {
            node = new UniFunctionDec_1.UniFunctionDec();
            merge.forEach((it) => {
                node.merge(this.castTo(it, UniFunctionDec_1.UniFunctionDec));
            });
        }
        return node;
    }
    visitResult(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        const node = this.castTo(map, String);
        return node;
    }
    visitMethodDeclarator(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const name = [];
        map.set('name', name);
        const params = [];
        map.set('params', params);
        const returnType = [];
        map.set('returnType', returnType);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 1145:
                        {
                            name.push(this.visit(it));
                        }
                        break;
                    case 1147:
                        {
                            params.push(this.visit(it));
                        }
                        break;
                    case 1151:
                        {
                            returnType.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        const node = this.castTo(map, UniFunctionDec_1.UniFunctionDec);
        return node;
    }
    visitMethodName(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        const node = this.castTo(map, String);
        return node;
    }
    visitFormalParameterList(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const add = [];
        map.set('add', add);
        const n = ctx.childCount;
        if (0 < n) {
            for (let i = 0; i < n; ++i) {
                const it = ctx.getChild(i);
                if (it instanceof antlr4ts_1.RuleContext) {
                    switch (it.invokingState) {
                        case 1156:
                            {
                                const results = this.flatten(this.visit(it));
                                if (Array.isArray(results)) {
                                    for (const result of results)
                                        add.push(result);
                                }
                                else
                                    add.push(results);
                            }
                            break;
                        case 1158:
                            {
                                const results = this.flatten(this.visit(it));
                                if (Array.isArray(results)) {
                                    for (const result of results)
                                        add.push(result);
                                }
                                else
                                    add.push(results);
                            }
                            break;
                        case 1160:
                            {
                                const results = this.flatten(this.visit(it));
                                if (Array.isArray(results)) {
                                    for (const result of results)
                                        add.push(result);
                                }
                                else
                                    add.push(results);
                            }
                            break;
                        default:
                            {
                                none.push(this.visit(it));
                            }
                            break;
                    }
                }
                else if (it instanceof TerminalNode_1.TerminalNode) {
                    switch (it.symbol.type) {
                        default:
                            {
                                none.push(this.visit(it));
                            }
                            break;
                    }
                }
            }
        }
        const node = this.castToList(map, UniParam_1.UniParam);
        return node;
    }
    visitFormalParameters(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const add = [];
        map.set('add', add);
        const n = ctx.childCount;
        if (0 < n) {
            for (let i = 0; i < n; ++i) {
                const it = ctx.getChild(i);
                if (it instanceof antlr4ts_1.RuleContext) {
                    switch (it.invokingState) {
                        case 1163:
                            {
                                const results = this.flatten(this.visit(it));
                                if (Array.isArray(results)) {
                                    for (const result of results)
                                        add.push(result);
                                }
                                else
                                    add.push(results);
                            }
                            break;
                        case 1165:
                            {
                                const results = this.flatten(this.visit(it));
                                if (Array.isArray(results)) {
                                    for (const result of results)
                                        add.push(result);
                                }
                                else
                                    add.push(results);
                            }
                            break;
                        default:
                            {
                                none.push(this.visit(it));
                            }
                            break;
                    }
                }
                else if (it instanceof TerminalNode_1.TerminalNode) {
                    switch (it.symbol.type) {
                        default:
                            {
                                none.push(this.visit(it));
                            }
                            break;
                    }
                }
            }
        }
        const node = this.castToList(map, UniParam_1.UniParam);
        return node;
    }
    visitFormalParameter(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const variables = [];
        map.set('variables', variables);
        const modifiers = [];
        map.set('modifiers', modifiers);
        const type = [];
        map.set('type', type);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 1181:
                        {
                            modifiers.push(this.visit(it));
                        }
                        break;
                    case 1187:
                        {
                            type.push(this.visit(it));
                        }
                        break;
                    case 1188:
                        {
                            variables.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        const node = this.castTo(map, UniParam_1.UniParam);
        return node;
    }
    visitParameterDeclaratorIds(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const add = [];
        map.set('add', add);
        const n = ctx.childCount;
        if (0 < n) {
            for (let i = 0; i < n; ++i) {
                const it = ctx.getChild(i);
                if (it instanceof antlr4ts_1.RuleContext) {
                    switch (it.invokingState) {
                        case 1190:
                            {
                                const results = this.flatten(this.visit(it));
                                if (Array.isArray(results)) {
                                    for (const result of results)
                                        add.push(result);
                                }
                                else
                                    add.push(results);
                            }
                            break;
                        default:
                            {
                                none.push(this.visit(it));
                            }
                            break;
                    }
                }
                else if (it instanceof TerminalNode_1.TerminalNode) {
                    switch (it.symbol.type) {
                        default:
                            {
                                none.push(this.visit(it));
                            }
                            break;
                    }
                }
            }
        }
        const node = this.castToList(map, UniVariableDef_1.UniVariableDef);
        return node;
    }
    visitParameterDeclaratorId(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const typeSuffix = [];
        map.set('typeSuffix', typeSuffix);
        const name = [];
        map.set('name', name);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 1192:
                        {
                            name.push(this.visit(it));
                        }
                        break;
                    case 1193:
                        {
                            typeSuffix.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        const node = this.castTo(map, UniVariableDef_1.UniVariableDef);
        return node;
    }
    visitParameterName(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        const node = this.castTo(map, String);
        return node;
    }
    visitMethodBody(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const merge = [];
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 1249:
                        {
                            merge.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        let node = this.castTo(map, UniBlock_1.UniBlock);
        if (typeof node === 'object' && 'merge' in node) {
            merge.forEach((it) => {
                node.merge(this.castTo(it, UniBlock_1.UniBlock));
            });
        }
        else {
            node = new UniBlock_1.UniBlock();
            merge.forEach((it) => {
                node.merge(this.castTo(it, UniBlock_1.UniBlock));
            });
        }
        return node;
    }
    visitConstructorDeclaration(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const block = [];
        map.set('block', block);
        const modifiers = [];
        map.set('modifiers', modifiers);
        const merge = [];
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 1258:
                        {
                            modifiers.push(this.visit(it));
                        }
                        break;
                    case 1264:
                        {
                            merge.push(this.visit(it));
                        }
                        break;
                    case 1268:
                        {
                            block.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        let node = this.castTo(map, UniFunctionDec_1.UniFunctionDec);
        if (typeof node === 'object' && 'merge' in node) {
            merge.forEach((it) => {
                node.merge(this.castTo(it, UniFunctionDec_1.UniFunctionDec));
            });
        }
        else {
            node = new UniFunctionDec_1.UniFunctionDec();
            merge.forEach((it) => {
                node.merge(this.castTo(it, UniFunctionDec_1.UniFunctionDec));
            });
        }
        return node;
    }
    visitConstructorModifier(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        const node = this.castTo(map, String);
        return node;
    }
    visitConstructorDeclarator(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const args = [];
        map.set('args', args);
        const name = [];
        map.set('name', name);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 1279:
                        {
                            name.push(this.visit(it));
                        }
                        break;
                    case 1281:
                        {
                            args.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        const node = this.castTo(map, UniFunctionDec_1.UniFunctionDec);
        return node;
    }
    visitSimpleTypeName(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        const node = this.castTo(map, String);
        return node;
    }
    visitInterfaceDeclaration(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const merge = [];
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 1404:
                        {
                            merge.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        let node = this.castTo(map, UniClassDec_1.UniClassDec);
        if (typeof node === 'object' && 'merge' in node) {
            merge.forEach((it) => {
                node.merge(this.castTo(it, UniClassDec_1.UniClassDec));
            });
        }
        else {
            node = new UniClassDec_1.UniClassDec();
            merge.forEach((it) => {
                node.merge(this.castTo(it, UniClassDec_1.UniClassDec));
            });
        }
        return node;
    }
    visitNormalInterfaceDeclaration(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const interfaces = [];
        map.set('interfaces', interfaces);
        const members = [];
        map.set('members', members);
        const className = [];
        map.set('className', className);
        const modifiers = [];
        map.set('modifiers', modifiers);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 1408:
                        {
                            modifiers.push(this.visit(it));
                        }
                        break;
                    case 1410:
                        {
                            className.push(this.visit(it));
                        }
                        break;
                    case 1414:
                        {
                            interfaces.push(this.visit(it));
                        }
                        break;
                    case 1417:
                        {
                            members.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        const node = this.castTo(map, UniClassDec_1.UniClassDec);
        return node;
    }
    visitInterfaceModifiers(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const add = [];
        map.set('add', add);
        const n = ctx.childCount;
        if (0 < n) {
            for (let i = 0; i < n; ++i) {
                const it = ctx.getChild(i);
                if (it instanceof antlr4ts_1.RuleContext) {
                    switch (it.invokingState) {
                        case 1419:
                            {
                                const results = this.flatten(this.visit(it));
                                if (Array.isArray(results)) {
                                    for (const result of results)
                                        add.push(result);
                                }
                                else
                                    add.push(results);
                            }
                            break;
                        default:
                            {
                                none.push(this.visit(it));
                            }
                            break;
                    }
                }
                else if (it instanceof TerminalNode_1.TerminalNode) {
                    switch (it.symbol.type) {
                        default:
                            {
                                none.push(this.visit(it));
                            }
                            break;
                    }
                }
            }
        }
        const node = this.castToList(map, String);
        return node;
    }
    visitInterfaceName(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        const node = this.castTo(map, String);
        return node;
    }
    visitInterfaceModifier(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        const node = this.castTo(map, String);
        return node;
    }
    visitExtendsInterfaces(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const add = [];
        map.set('add', add);
        const n = ctx.childCount;
        if (0 < n) {
            for (let i = 0; i < n; ++i) {
                const it = ctx.getChild(i);
                if (it instanceof antlr4ts_1.RuleContext) {
                    switch (it.invokingState) {
                        case 1437:
                            {
                                const results = this.flatten(this.visit(it));
                                if (Array.isArray(results)) {
                                    for (const result of results)
                                        add.push(result);
                                }
                                else
                                    add.push(results);
                            }
                            break;
                        default:
                            {
                                none.push(this.visit(it));
                            }
                            break;
                    }
                }
                else if (it instanceof TerminalNode_1.TerminalNode) {
                    switch (it.symbol.type) {
                        default:
                            {
                                none.push(this.visit(it));
                            }
                            break;
                    }
                }
            }
        }
        const node = this.castToList(map, String);
        return node;
    }
    visitInterfaceBody(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const add = [];
        map.set('add', add);
        const n = ctx.childCount;
        if (0 < n) {
            for (let i = 0; i < n; ++i) {
                const it = ctx.getChild(i);
                if (it instanceof antlr4ts_1.RuleContext) {
                    switch (it.invokingState) {
                        case 1440:
                            {
                                const results = this.flatten(this.visit(it));
                                if (Array.isArray(results)) {
                                    for (const result of results)
                                        add.push(result);
                                }
                                else
                                    add.push(results);
                            }
                            break;
                        default:
                            {
                                none.push(this.visit(it));
                            }
                            break;
                    }
                }
                else if (it instanceof TerminalNode_1.TerminalNode) {
                    switch (it.symbol.type) {
                        default:
                            {
                                none.push(this.visit(it));
                            }
                            break;
                    }
                }
            }
        }
        const node = this.castToList(map, UniDecralation_1.UniDecralation);
        return node;
    }
    visitInterfaceMemberDeclaration(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const add = [];
        map.set('add', add);
        const n = ctx.childCount;
        if (0 < n) {
            for (let i = 0; i < n; ++i) {
                const it = ctx.getChild(i);
                if (it instanceof antlr4ts_1.RuleContext) {
                    switch (it.invokingState) {
                        case 1448:
                            {
                                const results = this.flatten(this.visit(it));
                                if (Array.isArray(results)) {
                                    for (const result of results)
                                        add.push(result);
                                }
                                else
                                    add.push(results);
                            }
                            break;
                        case 1449:
                            {
                                const results = this.flatten(this.visit(it));
                                if (Array.isArray(results)) {
                                    for (const result of results)
                                        add.push(result);
                                }
                                else
                                    add.push(results);
                            }
                            break;
                        default:
                            {
                                none.push(this.visit(it));
                            }
                            break;
                    }
                }
                else if (it instanceof TerminalNode_1.TerminalNode) {
                    switch (it.symbol.type) {
                        default:
                            {
                                none.push(this.visit(it));
                            }
                            break;
                    }
                }
            }
        }
        const node = this.castToList(map, UniDecralation_1.UniDecralation);
        return node;
    }
    visitConstantDeclaration(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const add = [];
        map.set('add', add);
        const modifiers = [];
        map.set('modifiers', modifiers);
        const type = [];
        map.set('type', type);
        const n = ctx.childCount;
        if (0 < n) {
            for (let i = 0; i < n; ++i) {
                const it = ctx.getChild(i);
                if (it instanceof antlr4ts_1.RuleContext) {
                    switch (it.invokingState) {
                        case 1455:
                            {
                                modifiers.push(this.visit(it));
                            }
                            break;
                        case 1456:
                            {
                                type.push(this.visit(it));
                            }
                            break;
                        case 1457:
                            {
                                const results = this.flatten(this.visit(it));
                                if (Array.isArray(results)) {
                                    for (const result of results)
                                        add.push(result);
                                }
                                else
                                    add.push(results);
                            }
                            break;
                        default:
                            {
                                none.push(this.visit(it));
                            }
                            break;
                    }
                }
                else if (it instanceof TerminalNode_1.TerminalNode) {
                    switch (it.symbol.type) {
                        default:
                            {
                                none.push(this.visit(it));
                            }
                            break;
                    }
                }
            }
        }
        const node = this.castToList(map, UniVariableDec_1.UniVariableDec);
        return node;
    }
    visitConstantModifiers(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const add = [];
        map.set('add', add);
        const n = ctx.childCount;
        if (0 < n) {
            for (let i = 0; i < n; ++i) {
                const it = ctx.getChild(i);
                if (it instanceof antlr4ts_1.RuleContext) {
                    switch (it.invokingState) {
                        case 1460:
                            {
                                const results = this.flatten(this.visit(it));
                                if (Array.isArray(results)) {
                                    for (const result of results)
                                        add.push(result);
                                }
                                else
                                    add.push(results);
                            }
                            break;
                        default:
                            {
                                none.push(this.visit(it));
                            }
                            break;
                    }
                }
                else if (it instanceof TerminalNode_1.TerminalNode) {
                    switch (it.symbol.type) {
                        default:
                            {
                                none.push(this.visit(it));
                            }
                            break;
                    }
                }
            }
        }
        const node = this.castToList(map, String);
        return node;
    }
    visitConstantModifier(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        const node = this.castTo(map, String);
        return node;
    }
    visitInterfaceMethodDeclaration(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const block = [];
        map.set('block', block);
        const modifiers = [];
        map.set('modifiers', modifiers);
        const merge = [];
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 1472:
                        {
                            modifiers.push(this.visit(it));
                        }
                        break;
                    case 1473:
                        {
                            merge.push(this.visit(it));
                        }
                        break;
                    case 1474:
                        {
                            block.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        let node = this.castTo(map, UniFunctionDec_1.UniFunctionDec);
        if (typeof node === 'object' && 'merge' in node) {
            merge.forEach((it) => {
                node.merge(this.castTo(it, UniFunctionDec_1.UniFunctionDec));
            });
        }
        else {
            node = new UniFunctionDec_1.UniFunctionDec();
            merge.forEach((it) => {
                node.merge(this.castTo(it, UniFunctionDec_1.UniFunctionDec));
            });
        }
        return node;
    }
    visitInterfaceMethodModifiers(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const add = [];
        map.set('add', add);
        const n = ctx.childCount;
        if (0 < n) {
            for (let i = 0; i < n; ++i) {
                const it = ctx.getChild(i);
                if (it instanceof antlr4ts_1.RuleContext) {
                    switch (it.invokingState) {
                        case 1476:
                            {
                                const results = this.flatten(this.visit(it));
                                if (Array.isArray(results)) {
                                    for (const result of results)
                                        add.push(result);
                                }
                                else
                                    add.push(results);
                            }
                            break;
                        default:
                            {
                                none.push(this.visit(it));
                            }
                            break;
                    }
                }
                else if (it instanceof TerminalNode_1.TerminalNode) {
                    switch (it.symbol.type) {
                        default:
                            {
                                none.push(this.visit(it));
                            }
                            break;
                    }
                }
            }
        }
        const node = this.castToList(map, String);
        return node;
    }
    visitInterfaceMethodModifier(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        const node = this.castTo(map, String);
        return node;
    }
    visitArrayInitializer(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const items = [];
        map.set('items', items);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 1600:
                        {
                            items.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        const node = this.castTo(map, UniArray_1.UniArray);
        return node;
    }
    visitVariableInitializerList(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const add = [];
        map.set('add', add);
        const n = ctx.childCount;
        if (0 < n) {
            for (let i = 0; i < n; ++i) {
                const it = ctx.getChild(i);
                if (it instanceof antlr4ts_1.RuleContext) {
                    switch (it.invokingState) {
                        case 1608:
                            {
                                const results = this.flatten(this.visit(it));
                                if (Array.isArray(results)) {
                                    for (const result of results)
                                        add.push(result);
                                }
                                else
                                    add.push(results);
                            }
                            break;
                        case 1610:
                            {
                                const results = this.flatten(this.visit(it));
                                if (Array.isArray(results)) {
                                    for (const result of results)
                                        add.push(result);
                                }
                                else
                                    add.push(results);
                            }
                            break;
                        default:
                            {
                                none.push(this.visit(it));
                            }
                            break;
                    }
                }
                else if (it instanceof TerminalNode_1.TerminalNode) {
                    switch (it.symbol.type) {
                        default:
                            {
                                none.push(this.visit(it));
                            }
                            break;
                    }
                }
            }
        }
        const node = this.castToList(map, UniExpr_1.UniExpr);
        return node;
    }
    visitBlock(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const body = [];
        map.set('body', body);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 1617:
                        {
                            body.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        const node = this.castTo(map, UniBlock_1.UniBlock);
        return node;
    }
    visitBlockStatements(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const add = [];
        map.set('add', add);
        const n = ctx.childCount;
        if (0 < n) {
            for (let i = 0; i < n; ++i) {
                const it = ctx.getChild(i);
                if (it instanceof antlr4ts_1.RuleContext) {
                    switch (it.invokingState) {
                        case 1622:
                            {
                                const results = this.flatten(this.visit(it));
                                if (Array.isArray(results)) {
                                    for (const result of results)
                                        add.push(result);
                                }
                                else
                                    add.push(results);
                            }
                            break;
                        case 1623:
                            {
                                const results = this.flatten(this.visit(it));
                                if (Array.isArray(results)) {
                                    for (const result of results)
                                        add.push(result);
                                }
                                else
                                    add.push(results);
                            }
                            break;
                        default:
                            {
                                none.push(this.visit(it));
                            }
                            break;
                    }
                }
                else if (it instanceof TerminalNode_1.TerminalNode) {
                    switch (it.symbol.type) {
                        default:
                            {
                                none.push(this.visit(it));
                            }
                            break;
                    }
                }
            }
        }
        const node = this.castToList(map, UniStatement_1.UniStatement);
        return node;
    }
    visitLocalVariableDeclarationStatement(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const merge = [];
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 1634:
                        {
                            merge.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        let node = this.castTo(map, UniVariableDec_1.UniVariableDec);
        if (typeof node === 'object' && 'merge' in node) {
            merge.forEach((it) => {
                node.merge(this.castTo(it, UniVariableDec_1.UniVariableDec));
            });
        }
        else {
            node = new UniVariableDec_1.UniVariableDec();
            merge.forEach((it) => {
                node.merge(this.castTo(it, UniVariableDec_1.UniVariableDec));
            });
        }
        return node;
    }
    visitLocalVariableDeclaration(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const variables = [];
        map.set('variables', variables);
        const modifiers = [];
        map.set('modifiers', modifiers);
        const type = [];
        map.set('type', type);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 1637:
                        {
                            modifiers.push(this.visit(it));
                        }
                        break;
                    case 1643:
                        {
                            type.push(this.visit(it));
                        }
                        break;
                    case 1644:
                        {
                            variables.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        const node = this.castTo(map, UniVariableDec_1.UniVariableDec);
        return node;
    }
    visitExpressionStatement(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const ret = [];
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 1685:
                        {
                            ret.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        if (!ret.isEmpty()) {
            return ret;
        }
        const node = this.castTo(map, UniBinOp_1.UniBinOp);
        return node;
    }
    visitIfThenStatement(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const trueStatement = [];
        map.set('trueStatement', trueStatement);
        const cond = [];
        map.set('cond', cond);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 1699:
                        {
                            cond.push(this.visit(it));
                        }
                        break;
                    case 1701:
                        {
                            trueStatement.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        const node = this.castTo(map, UniIf_1.UniIf);
        return node;
    }
    visitIfThenElseStatement(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const trueStatement = [];
        map.set('trueStatement', trueStatement);
        const falseStatement = [];
        map.set('falseStatement', falseStatement);
        const cond = [];
        map.set('cond', cond);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 1705:
                        {
                            cond.push(this.visit(it));
                        }
                        break;
                    case 1707:
                        {
                            trueStatement.push(this.visit(it));
                        }
                        break;
                    case 1709:
                        {
                            falseStatement.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        const node = this.castTo(map, UniIf_1.UniIf);
        return node;
    }
    visitIfThenElseStatementNoShortIf(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const trueStatement = [];
        map.set('trueStatement', trueStatement);
        const falseStatement = [];
        map.set('falseStatement', falseStatement);
        const cond = [];
        map.set('cond', cond);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 1713:
                        {
                            cond.push(this.visit(it));
                        }
                        break;
                    case 1715:
                        {
                            trueStatement.push(this.visit(it));
                        }
                        break;
                    case 1717:
                        {
                            falseStatement.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        const node = this.castTo(map, UniIf_1.UniIf);
        return node;
    }
    visitWhileStatement(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const statement = [];
        map.set('statement', statement);
        const cond = [];
        map.set('cond', cond);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 1778:
                        {
                            cond.push(this.visit(it));
                        }
                        break;
                    case 1780:
                        {
                            statement.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        const node = this.castTo(map, UniWhile_1.UniWhile);
        return node;
    }
    visitWhileStatementNoShortIf(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const statement = [];
        map.set('statement', statement);
        const cond = [];
        map.set('cond', cond);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 1784:
                        {
                            cond.push(this.visit(it));
                        }
                        break;
                    case 1786:
                        {
                            statement.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        const node = this.castTo(map, UniWhile_1.UniWhile);
        return node;
    }
    visitBasicForStatement(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const init = [];
        map.set('init', init);
        const statement = [];
        map.set('statement', statement);
        const step = [];
        map.set('step', step);
        const cond = [];
        map.set('cond', cond);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 1806:
                        {
                            init.push(this.visit(it));
                        }
                        break;
                    case 1810:
                        {
                            cond.push(this.visit(it));
                        }
                        break;
                    case 1814:
                        {
                            step.push(this.visit(it));
                        }
                        break;
                    case 1818:
                        {
                            statement.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        const node = this.castTo(map, UniFor_1.UniFor);
        return node;
    }
    visitBasicForStatementNoShortIf(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const init = [];
        map.set('init', init);
        const statement = [];
        map.set('statement', statement);
        const step = [];
        map.set('step', step);
        const cond = [];
        map.set('cond', cond);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 1822:
                        {
                            init.push(this.visit(it));
                        }
                        break;
                    case 1826:
                        {
                            cond.push(this.visit(it));
                        }
                        break;
                    case 1830:
                        {
                            step.push(this.visit(it));
                        }
                        break;
                    case 1834:
                        {
                            statement.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        const node = this.castTo(map, UniFor_1.UniFor);
        return node;
    }
    visitBreakStatement(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        const node = this.castTo(map, UniBreak_1.UniBreak);
        return node;
    }
    visitContinueStatement(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        const node = this.castTo(map, UniContinue_1.UniContinue);
        return node;
    }
    visitReturnStatement(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const value = [];
        map.set('value', value);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 1893:
                        {
                            value.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        const node = this.castTo(map, UniReturn_1.UniReturn);
        return node;
    }
    visitClassInstanceCreationExpression_lfno_primary(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const args = [];
        map.set('args', args);
        const type = [];
        map.set('type', type);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 2299:
                        {
                            args.push(this.visit(it));
                        }
                        break;
                    case 2323:
                        {
                            args.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    case Java8Parser_1.Java8Parser.Identifier:
                        {
                            type.push(this.flatten(this.visit(it)));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        const node = this.castTo(map, UniNew_1.UniNew);
        return node;
    }
    visitArrayAccess(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const left = [];
        map.set('left', left);
        const right = [];
        map.set('right', right);
        const operator = [];
        map.set('operator', operator);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 2366:
                        {
                            left.push(this.visit(it));
                        }
                        break;
                    case 2368:
                        {
                            right.push(this.visit(it));
                        }
                        break;
                    case 2371:
                        {
                            left.push(this.visit(it));
                        }
                        break;
                    case 2373:
                        {
                            right.push(this.visit(it));
                        }
                        break;
                    case 2378:
                        {
                            left.push(this.visit(it));
                        }
                        break;
                    case 2380:
                        {
                            right.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    case Java8Parser_1.Java8Parser.LBRACK:
                        {
                            operator.push(this.flatten(this.visit(it)));
                        }
                        break;
                    case Java8Parser_1.Java8Parser.RBRACK:
                        {
                            operator.push(this.flatten(this.visit(it)));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        const node = this.castTo(map, UniBinOp_1.UniBinOp);
        return node;
    }
    visitArrayAccess_lf_primary(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const left = [];
        map.set('left', left);
        const right = [];
        map.set('right', right);
        const operator = [];
        map.set('operator', operator);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 2388:
                        {
                            left.push(this.visit(it));
                        }
                        break;
                    case 2390:
                        {
                            right.push(this.visit(it));
                        }
                        break;
                    case 2393:
                        {
                            left.push(this.visit(it));
                        }
                        break;
                    case 2395:
                        {
                            right.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    case Java8Parser_1.Java8Parser.LBRACK:
                        {
                            operator.push(this.flatten(this.visit(it)));
                        }
                        break;
                    case Java8Parser_1.Java8Parser.RBRACK:
                        {
                            operator.push(this.flatten(this.visit(it)));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        return map;
    }
    visitArrayAccess_lfno_primary(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const left = [];
        map.set('left', left);
        const right = [];
        map.set('right', right);
        const operator = [];
        map.set('operator', operator);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 2403:
                        {
                            left.push(this.visit(it));
                        }
                        break;
                    case 2405:
                        {
                            right.push(this.visit(it));
                        }
                        break;
                    case 2408:
                        {
                            left.push(this.visit(it));
                        }
                        break;
                    case 2410:
                        {
                            right.push(this.visit(it));
                        }
                        break;
                    case 2415:
                        {
                            left.push(this.visit(it));
                        }
                        break;
                    case 2417:
                        {
                            right.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    case Java8Parser_1.Java8Parser.LBRACK:
                        {
                            operator.push(this.flatten(this.visit(it)));
                        }
                        break;
                    case Java8Parser_1.Java8Parser.RBRACK:
                        {
                            operator.push(this.flatten(this.visit(it)));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        const node = this.castTo(map, UniBinOp_1.UniBinOp);
        return node;
    }
    visitMethodInvocation(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const args = [];
        map.set('args', args);
        const receiver = [];
        map.set('receiver', receiver);
        const methodName = [];
        map.set('methodName', methodName);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 2425:
                        {
                            methodName.push(this.visit(it));
                        }
                        break;
                    case 2427:
                        {
                            args.push(this.visit(it));
                        }
                        break;
                    case 2432:
                        {
                            receiver.push(this.visit(it));
                        }
                        break;
                    case 2437:
                        {
                            methodName.push(this.visit(it));
                        }
                        break;
                    case 2439:
                        {
                            args.push(this.visit(it));
                        }
                        break;
                    case 2444:
                        {
                            receiver.push(this.visit(it));
                        }
                        break;
                    case 2449:
                        {
                            methodName.push(this.visit(it));
                        }
                        break;
                    case 2451:
                        {
                            args.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        const node = this.castTo(map, UniMethodCall_1.UniMethodCall);
        return node;
    }
    visitReceivers(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const items = [];
        map.set('items', items);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 2495:
                        {
                            items.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        const node = this.castTo(map, UniArray_1.UniArray);
        return node;
    }
    visitReceiver(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const add = [];
        map.set('add', add);
        const n = ctx.childCount;
        if (0 < n) {
            for (let i = 0; i < n; ++i) {
                const it = ctx.getChild(i);
                if (it instanceof antlr4ts_1.RuleContext) {
                    switch (it.invokingState) {
                        case 2497:
                            {
                                const results = this.flatten(this.visit(it));
                                if (Array.isArray(results)) {
                                    for (const result of results)
                                        add.push(result);
                                }
                                else
                                    add.push(results);
                            }
                            break;
                        case 2499:
                            {
                                const results = this.flatten(this.visit(it));
                                if (Array.isArray(results)) {
                                    for (const result of results)
                                        add.push(result);
                                }
                                else
                                    add.push(results);
                            }
                            break;
                        default:
                            {
                                none.push(this.visit(it));
                            }
                            break;
                    }
                }
                else if (it instanceof TerminalNode_1.TerminalNode) {
                    switch (it.symbol.type) {
                        default:
                            {
                                none.push(this.visit(it));
                            }
                            break;
                    }
                }
            }
        }
        const node = this.castToList(map, UniIdent_1.UniIdent);
        return node;
    }
    visitIdent(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const name = [];
        map.set('name', name);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    case Java8Parser_1.Java8Parser.Identifier:
                        {
                            name.push(this.flatten(this.visit(it)));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        const node = this.castTo(map, UniIdent_1.UniIdent);
        return node;
    }
    visitMethodInvocation_lfno_primary(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const args = [];
        map.set('args', args);
        const receiver = [];
        map.set('receiver', receiver);
        const methodName = [];
        map.set('methodName', methodName);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 2518:
                        {
                            methodName.push(this.visit(it));
                        }
                        break;
                    case 2520:
                        {
                            args.push(this.visit(it));
                        }
                        break;
                    case 2525:
                        {
                            receiver.push(this.visit(it));
                        }
                        break;
                    case 2527:
                        {
                            receiver.push(this.visit(it));
                        }
                        break;
                    case 2530:
                        {
                            methodName.push(this.visit(it));
                        }
                        break;
                    case 2532:
                        {
                            args.push(this.visit(it));
                        }
                        break;
                    case 2537:
                        {
                            receiver.push(this.visit(it));
                        }
                        break;
                    case 2539:
                        {
                            receiver.push(this.visit(it));
                        }
                        break;
                    case 2542:
                        {
                            methodName.push(this.visit(it));
                        }
                        break;
                    case 2544:
                        {
                            args.push(this.visit(it));
                        }
                        break;
                    case 2551:
                        {
                            receiver.push(this.visit(it));
                        }
                        break;
                    case 2554:
                        {
                            methodName.push(this.visit(it));
                        }
                        break;
                    case 2556:
                        {
                            args.push(this.visit(it));
                        }
                        break;
                    case 2561:
                        {
                            receiver.push(this.visit(it));
                        }
                        break;
                    case 2568:
                        {
                            methodName.push(this.visit(it));
                        }
                        break;
                    case 2570:
                        {
                            args.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        const node = this.castTo(map, UniMethodCall_1.UniMethodCall);
        return node;
    }
    visitArgumentList(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const add = [];
        map.set('add', add);
        const n = ctx.childCount;
        if (0 < n) {
            for (let i = 0; i < n; ++i) {
                const it = ctx.getChild(i);
                if (it instanceof antlr4ts_1.RuleContext) {
                    switch (it.invokingState) {
                        case 2577:
                            {
                                const results = this.flatten(this.visit(it));
                                if (Array.isArray(results)) {
                                    for (const result of results)
                                        add.push(result);
                                }
                                else
                                    add.push(results);
                            }
                            break;
                        case 2579:
                            {
                                const results = this.flatten(this.visit(it));
                                if (Array.isArray(results)) {
                                    for (const result of results)
                                        add.push(result);
                                }
                                else
                                    add.push(results);
                            }
                            break;
                        default:
                            {
                                none.push(this.visit(it));
                            }
                            break;
                    }
                }
                else if (it instanceof TerminalNode_1.TerminalNode) {
                    switch (it.symbol.type) {
                        default:
                            {
                                none.push(this.visit(it));
                            }
                            break;
                    }
                }
            }
        }
        const node = this.castToList(map, UniExpr_1.UniExpr);
        return node;
    }
    visitArrayCreationExpression(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const elementsNum = [];
        map.set('elementsNum', elementsNum);
        const type = [];
        map.set('type', type);
        const value = [];
        map.set('value', value);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 2683:
                        {
                            type.push(this.visit(it));
                        }
                        break;
                    case 2684:
                        {
                            elementsNum.push(this.visit(it));
                        }
                        break;
                    case 2689:
                        {
                            type.push(this.visit(it));
                        }
                        break;
                    case 2690:
                        {
                            elementsNum.push(this.visit(it));
                        }
                        break;
                    case 2695:
                        {
                            type.push(this.visit(it));
                        }
                        break;
                    case 2697:
                        {
                            value.push(this.visit(it));
                        }
                        break;
                    case 2700:
                        {
                            type.push(this.visit(it));
                        }
                        break;
                    case 2702:
                        {
                            value.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        const node = this.castTo(map, UniNewArray_1.UniNewArray);
        return node;
    }
    visitDimExprs(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const add = [];
        map.set('add', add);
        const n = ctx.childCount;
        if (0 < n) {
            for (let i = 0; i < n; ++i) {
                const it = ctx.getChild(i);
                if (it instanceof antlr4ts_1.RuleContext) {
                    switch (it.invokingState) {
                        case 2706:
                            {
                                const results = this.flatten(this.visit(it));
                                if (Array.isArray(results)) {
                                    for (const result of results)
                                        add.push(result);
                                }
                                else
                                    add.push(results);
                            }
                            break;
                        case 2707:
                            {
                                const results = this.flatten(this.visit(it));
                                if (Array.isArray(results)) {
                                    for (const result of results)
                                        add.push(result);
                                }
                                else
                                    add.push(results);
                            }
                            break;
                        default:
                            {
                                none.push(this.visit(it));
                            }
                            break;
                    }
                }
                else if (it instanceof TerminalNode_1.TerminalNode) {
                    switch (it.symbol.type) {
                        default:
                            {
                                none.push(this.visit(it));
                            }
                            break;
                    }
                }
            }
        }
        const node = this.castToList(map, UniExpr_1.UniExpr);
        return node;
    }
    visitDimExpr(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const add = [];
        map.set('add', add);
        const n = ctx.childCount;
        if (0 < n) {
            for (let i = 0; i < n; ++i) {
                const it = ctx.getChild(i);
                if (it instanceof antlr4ts_1.RuleContext) {
                    switch (it.invokingState) {
                        case 2720:
                            {
                                const results = this.flatten(this.visit(it));
                                if (Array.isArray(results)) {
                                    for (const result of results)
                                        add.push(result);
                                }
                                else
                                    add.push(results);
                            }
                            break;
                        default:
                            {
                                none.push(this.visit(it));
                            }
                            break;
                    }
                }
                else if (it instanceof TerminalNode_1.TerminalNode) {
                    switch (it.symbol.type) {
                        default:
                            {
                                none.push(this.visit(it));
                            }
                            break;
                    }
                }
            }
        }
        const node = this.castToList(map, UniExpr_1.UniExpr);
        return node;
    }
    visitAssignment(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const left = [];
        map.set('left', left);
        const right = [];
        map.set('right', right);
        const operator = [];
        map.set('operator', operator);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 2761:
                        {
                            left.push(this.visit(it));
                        }
                        break;
                    case 2762:
                        {
                            operator.push(this.visit(it));
                        }
                        break;
                    case 2763:
                        {
                            right.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        const node = this.castTo(map, UniBinOp_1.UniBinOp);
        return node;
    }
    visitAssignmentOperator(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        const node = this.castTo(map, String);
        return node;
    }
    visitConditionalExpression(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const ret = [];
        const trueExpr = [];
        map.set('trueExpr', trueExpr);
        const cond = [];
        map.set('cond', cond);
        const falseExpr = [];
        map.set('falseExpr', falseExpr);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 2772:
                        {
                            ret.push(this.visit(it));
                        }
                        break;
                    case 2773:
                        {
                            cond.push(this.visit(it));
                        }
                        break;
                    case 2775:
                        {
                            trueExpr.push(this.visit(it));
                        }
                        break;
                    case 2777:
                        {
                            falseExpr.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        if (!ret.isEmpty()) {
            return ret;
        }
        const node = this.castTo(map, UniTernaryOp_1.UniTernaryOp);
        return node;
    }
    visitConditionalOrExpression(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const ret = [];
        const left = [];
        map.set('left', left);
        const right = [];
        map.set('right', right);
        const operator = [];
        map.set('operator', operator);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 2784:
                        {
                            ret.push(this.visit(it));
                        }
                        break;
                    case 478:
                        {
                            left.push(this.visit(it));
                        }
                        break;
                    case 2787:
                        {
                            operator.push(this.visit(it));
                        }
                        break;
                    case 2788:
                        {
                            right.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        if (!ret.isEmpty()) {
            return ret;
        }
        const node = this.castTo(map, UniBinOp_1.UniBinOp);
        return node;
    }
    visitConditionalAndExpression(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const ret = [];
        const left = [];
        map.set('left', left);
        const right = [];
        map.set('right', right);
        const operator = [];
        map.set('operator', operator);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 2798:
                        {
                            ret.push(this.visit(it));
                        }
                        break;
                    case 482:
                        {
                            left.push(this.visit(it));
                        }
                        break;
                    case 2801:
                        {
                            operator.push(this.visit(it));
                        }
                        break;
                    case 2802:
                        {
                            right.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        if (!ret.isEmpty()) {
            return ret;
        }
        const node = this.castTo(map, UniBinOp_1.UniBinOp);
        return node;
    }
    visitInclusiveOrExpression(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const ret = [];
        const left = [];
        map.set('left', left);
        const right = [];
        map.set('right', right);
        const operator = [];
        map.set('operator', operator);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 2812:
                        {
                            ret.push(this.visit(it));
                        }
                        break;
                    case 486:
                        {
                            left.push(this.visit(it));
                        }
                        break;
                    case 2815:
                        {
                            operator.push(this.visit(it));
                        }
                        break;
                    case 2816:
                        {
                            right.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        if (!ret.isEmpty()) {
            return ret;
        }
        const node = this.castTo(map, UniBinOp_1.UniBinOp);
        return node;
    }
    visitExclusiveOrExpression(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const ret = [];
        const left = [];
        map.set('left', left);
        const right = [];
        map.set('right', right);
        const operator = [];
        map.set('operator', operator);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 2826:
                        {
                            ret.push(this.visit(it));
                        }
                        break;
                    case 490:
                        {
                            left.push(this.visit(it));
                        }
                        break;
                    case 2829:
                        {
                            operator.push(this.visit(it));
                        }
                        break;
                    case 2830:
                        {
                            right.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        if (!ret.isEmpty()) {
            return ret;
        }
        const node = this.castTo(map, UniBinOp_1.UniBinOp);
        return node;
    }
    visitAndExpression(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const ret = [];
        const left = [];
        map.set('left', left);
        const right = [];
        map.set('right', right);
        const operator = [];
        map.set('operator', operator);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 2840:
                        {
                            ret.push(this.visit(it));
                        }
                        break;
                    case 494:
                        {
                            left.push(this.visit(it));
                        }
                        break;
                    case 2843:
                        {
                            operator.push(this.visit(it));
                        }
                        break;
                    case 2844:
                        {
                            right.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        if (!ret.isEmpty()) {
            return ret;
        }
        const node = this.castTo(map, UniBinOp_1.UniBinOp);
        return node;
    }
    visitEqualityExpression(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const ret = [];
        const left = [];
        map.set('left', left);
        const right = [];
        map.set('right', right);
        const operator = [];
        map.set('operator', operator);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 2856:
                        {
                            ret.push(this.visit(it));
                        }
                        break;
                    case 500:
                        {
                            left.push(this.visit(it));
                        }
                        break;
                    case 2859:
                        {
                            operator.push(this.visit(it));
                        }
                        break;
                    case 2860:
                        {
                            right.push(this.visit(it));
                        }
                        break;
                    case 2863:
                        {
                            operator.push(this.visit(it));
                        }
                        break;
                    case 2864:
                        {
                            right.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        if (!ret.isEmpty()) {
            return ret;
        }
        const node = this.castTo(map, UniBinOp_1.UniBinOp);
        return node;
    }
    visitRelationalExpression(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const ret = [];
        const left = [];
        map.set('left', left);
        const right = [];
        map.set('right', right);
        const operator = [];
        map.set('operator', operator);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 2882:
                        {
                            ret.push(this.visit(it));
                        }
                        break;
                    case 512:
                        {
                            left.push(this.visit(it));
                        }
                        break;
                    case 2885:
                        {
                            operator.push(this.visit(it));
                        }
                        break;
                    case 2886:
                        {
                            right.push(this.visit(it));
                        }
                        break;
                    case 2889:
                        {
                            operator.push(this.visit(it));
                        }
                        break;
                    case 2890:
                        {
                            right.push(this.visit(it));
                        }
                        break;
                    case 2893:
                        {
                            operator.push(this.visit(it));
                        }
                        break;
                    case 2894:
                        {
                            right.push(this.visit(it));
                        }
                        break;
                    case 2897:
                        {
                            operator.push(this.visit(it));
                        }
                        break;
                    case 2898:
                        {
                            right.push(this.visit(it));
                        }
                        break;
                    case 2901:
                        {
                            operator.push(this.visit(it));
                        }
                        break;
                    case 2902:
                        {
                            right.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        if (!ret.isEmpty()) {
            return ret;
        }
        const node = this.castTo(map, UniBinOp_1.UniBinOp);
        return node;
    }
    visitShiftExpression(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const ret = [];
        const left = [];
        map.set('left', left);
        const right = [];
        map.set('right', right);
        const operator = [];
        map.set('operator', operator);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 2920:
                        {
                            ret.push(this.visit(it));
                        }
                        break;
                    case 520:
                        {
                            left.push(this.visit(it));
                        }
                        break;
                    case 2923:
                        {
                            operator.push(this.visit(it));
                        }
                        break;
                    case 2924:
                        {
                            right.push(this.visit(it));
                        }
                        break;
                    case 2927:
                        {
                            operator.push(this.visit(it));
                        }
                        break;
                    case 2928:
                        {
                            right.push(this.visit(it));
                        }
                        break;
                    case 2931:
                        {
                            operator.push(this.visit(it));
                        }
                        break;
                    case 2932:
                        {
                            right.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        if (!ret.isEmpty()) {
            return ret;
        }
        const node = this.castTo(map, UniBinOp_1.UniBinOp);
        return node;
    }
    visitAdditiveExpression(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const ret = [];
        const left = [];
        map.set('left', left);
        const right = [];
        map.set('right', right);
        const operator = [];
        map.set('operator', operator);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 2940:
                        {
                            ret.push(this.visit(it));
                        }
                        break;
                    case 522:
                        {
                            left.push(this.visit(it));
                        }
                        break;
                    case 2943:
                        {
                            operator.push(this.visit(it));
                        }
                        break;
                    case 2944:
                        {
                            right.push(this.visit(it));
                        }
                        break;
                    case 2947:
                        {
                            operator.push(this.visit(it));
                        }
                        break;
                    case 2948:
                        {
                            right.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        if (!ret.isEmpty()) {
            return ret;
        }
        const node = this.castTo(map, UniBinOp_1.UniBinOp);
        return node;
    }
    visitMultiplicativeExpression(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const ret = [];
        const left = [];
        map.set('left', left);
        const right = [];
        map.set('right', right);
        const operator = [];
        map.set('operator', operator);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 2962:
                        {
                            ret.push(this.visit(it));
                        }
                        break;
                    case 530:
                        {
                            left.push(this.visit(it));
                        }
                        break;
                    case 2965:
                        {
                            operator.push(this.visit(it));
                        }
                        break;
                    case 2966:
                        {
                            right.push(this.visit(it));
                        }
                        break;
                    case 2969:
                        {
                            operator.push(this.visit(it));
                        }
                        break;
                    case 2970:
                        {
                            right.push(this.visit(it));
                        }
                        break;
                    case 2973:
                        {
                            operator.push(this.visit(it));
                        }
                        break;
                    case 2974:
                        {
                            right.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        if (!ret.isEmpty()) {
            return ret;
        }
        const node = this.castTo(map, UniBinOp_1.UniBinOp);
        return node;
    }
    visitUnaryExpression(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const ret = [];
        const expr = [];
        map.set('expr', expr);
        const operator = [];
        map.set('operator', operator);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 2985:
                        {
                            ret.push(this.visit(it));
                        }
                        break;
                    case 2986:
                        {
                            ret.push(this.visit(it));
                        }
                        break;
                    case 2987:
                        {
                            operator.push(this.visit(it));
                        }
                        break;
                    case 2988:
                        {
                            expr.push(this.visit(it));
                        }
                        break;
                    case 2990:
                        {
                            operator.push(this.visit(it));
                        }
                        break;
                    case 2991:
                        {
                            expr.push(this.visit(it));
                        }
                        break;
                    case 2993:
                        {
                            ret.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        if (!ret.isEmpty()) {
            return ret;
        }
        const node = this.castTo(map, UniUnaryOp_1.UniUnaryOp);
        return node;
    }
    visitPreIncrementExpression(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const expr = [];
        map.set('expr', expr);
        const operator = [];
        map.set('operator', operator);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 2998:
                        {
                            operator.push(this.visit(it));
                        }
                        break;
                    case 2999:
                        {
                            expr.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        const node = this.castTo(map, UniUnaryOp_1.UniUnaryOp);
        return node;
    }
    visitPreDecrementExpression(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const expr = [];
        map.set('expr', expr);
        const operator = [];
        map.set('operator', operator);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 3003:
                        {
                            operator.push(this.visit(it));
                        }
                        break;
                    case 3004:
                        {
                            expr.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        const node = this.castTo(map, UniUnaryOp_1.UniUnaryOp);
        return node;
    }
    visitUnaryExpressionNotPlusMinus(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const ret = [];
        const expr = [];
        map.set('expr', expr);
        const operator = [];
        map.set('operator', operator);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 3010:
                        {
                            ret.push(this.visit(it));
                        }
                        break;
                    case 3011:
                        {
                            operator.push(this.visit(it));
                        }
                        break;
                    case 3012:
                        {
                            expr.push(this.visit(it));
                        }
                        break;
                    case 3014:
                        {
                            operator.push(this.visit(it));
                        }
                        break;
                    case 3015:
                        {
                            expr.push(this.visit(it));
                        }
                        break;
                    case 3017:
                        {
                            ret.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        if (!ret.isEmpty()) {
            return ret;
        }
        const node = this.castTo(map, UniUnaryOp_1.UniUnaryOp);
        return node;
    }
    visitPostfixExpression(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const ret = [];
        const left = [];
        map.set('left', left);
        const operator = [];
        map.set('operator', operator);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 3020:
                        {
                            ret.push(this.visit(it));
                        }
                        break;
                    case 3021:
                        {
                            ret.push(this.visit(it));
                        }
                        break;
                    case 3022:
                        {
                            left.push(this.visit(it));
                        }
                        break;
                    case 3023:
                        {
                            left.push(this.visit(it));
                        }
                        break;
                    case 3026:
                        {
                            operator.push(this.visit(it));
                        }
                        break;
                    case 3027:
                        {
                            operator.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        if (!ret.isEmpty()) {
            return ret;
        }
        const node = this.castTo(map, UniBinOp_1.UniBinOp);
        return node;
    }
    visitPostIncrementExpression(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const expr = [];
        map.set('expr', expr);
        const operator = [];
        map.set('operator', operator);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 3035:
                        {
                            expr.push(this.visit(it));
                        }
                        break;
                    case 3036:
                        {
                            operator.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        const node = this.castTo(map, UniUnaryOp_1.UniUnaryOp);
        return node;
    }
    visitPostDecrementExpression(ctx) {
        const map = new Map();
        const none = [];
        map.set('none', none);
        const expr = [];
        map.set('expr', expr);
        const operator = [];
        map.set('operator', operator);
        const n = ctx.childCount;
        for (let i = 0; i < n; ++i) {
            const it = ctx.getChild(i);
            if (it instanceof antlr4ts_1.RuleContext) {
                switch (it.invokingState) {
                    case 3040:
                        {
                            expr.push(this.visit(it));
                        }
                        break;
                    case 3041:
                        {
                            operator.push(this.visit(it));
                        }
                        break;
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
            else if (it instanceof TerminalNode_1.TerminalNode) {
                switch (it.symbol.type) {
                    default:
                        {
                            none.push(this.visit(it));
                        }
                        break;
                }
            }
        }
        const node = this.castTo(map, UniUnaryOp_1.UniUnaryOp);
        return node;
    }
}
exports.Java8Mapper = Java8Mapper;
//# sourceMappingURL=Java8Mapper.js.map