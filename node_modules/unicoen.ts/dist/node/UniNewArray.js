"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UniNewArray = void 0;
const UniExpr_1 = require("./UniExpr");
const UniArray_1 = require("./UniArray");
class UniNewArray extends UniExpr_1.UniExpr {
    constructor(type, elementsNum, value) {
        super();
        if (type === undefined && elementsNum === undefined && value === undefined) {
            this.type = null;
            this.elementsNum = [];
            this.value = null;
        }
        else if (type === undefined || elementsNum === undefined || value === undefined) {
            throw new Error('invalid arguments');
        }
        else {
            this.type = type;
            this.elementsNum = elementsNum;
            this.value = value;
        }
        this.fields.set('type', String);
        this.fields.set('elementsNum', UniExpr_1.UniExpr);
        this.fields.set('value', UniArray_1.UniArray);
    }
    toString() {
        return 'NewArray(' + this.type + ')';
    }
    equals(obj) {
        if (obj == null || !(obj instanceof UniNewArray))
            return false;
        const that = obj;
        return super.equals(that)
            && (this.type == null ? that.type == null : this.type === that.type)
            && (this.elementsNum == null ? that.elementsNum == null : this.elementsNum.equals(that.elementsNum))
            && (this.value == null ? that.value == null : this.value.equals(that.value));
    }
    merge(that) {
        super.merge(that);
        if (that.type != null) {
            this.type = that.type;
        }
        if (that.elementsNum != null) {
            if (this.elementsNum == null) {
                this.elementsNum = that.elementsNum;
            }
            else {
                this.elementsNum.push(...that.elementsNum);
            }
        }
        if (that.value != null) {
            this.value = that.value;
        }
    }
}
exports.UniNewArray = UniNewArray;
//# sourceMappingURL=UniNewArray.js.map