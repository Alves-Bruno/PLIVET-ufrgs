"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UniIf = void 0;
const UniStatement_1 = require("./UniStatement");
const UniExpr_1 = require("./UniExpr");
class UniIf extends UniStatement_1.UniStatement {
    constructor(cond, trueStatement, falseStatement) {
        super();
        if (cond === undefined && trueStatement === undefined && falseStatement === undefined) {
            this.cond = null;
            this.trueStatement = null;
            this.falseStatement = null;
        }
        else if (cond === undefined || trueStatement === undefined || falseStatement === undefined) {
            throw new Error('invalid arguments');
        }
        else {
            this.cond = cond;
            this.trueStatement = trueStatement;
            this.falseStatement = falseStatement;
        }
        this.fields.set('cond', UniExpr_1.UniExpr);
        this.fields.set('trueStatement', UniStatement_1.UniStatement);
        this.fields.set('falseStatement', UniStatement_1.UniStatement);
    }
    toString() {
        return 'If(' + ')';
    }
    equals(obj) {
        if (obj == null || !(obj instanceof UniIf))
            return false;
        const that = obj;
        return super.equals(that)
            && (this.cond == null ? that.cond == null : this.cond.equals(that.cond))
            && (this.trueStatement == null ? that.trueStatement == null : this.trueStatement.equals(that.trueStatement))
            && (this.falseStatement == null ? that.falseStatement == null : this.falseStatement.equals(that.falseStatement));
    }
    merge(that) {
        super.merge(that);
        if (that.cond != null) {
            this.cond = that.cond;
        }
        if (that.trueStatement != null) {
            this.trueStatement = that.trueStatement;
        }
        if (that.falseStatement != null) {
            this.falseStatement = that.falseStatement;
        }
    }
}
exports.UniIf = UniIf;
//# sourceMappingURL=UniIf.js.map