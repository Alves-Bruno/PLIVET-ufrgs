"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UniNumberLiteral = void 0;
const UniExpr_1 = require("./UniExpr");
class UniNumberLiteral extends UniExpr_1.UniExpr {
    constructor(value, signed, bytes, isFloat, type, prefix, sufix) {
        super();
        if (value === undefined && signed === undefined && bytes === undefined && isFloat === undefined && type === undefined && prefix === undefined && sufix === undefined) {
            this.value = null;
            this.signed = null;
            this.bytes = null;
            this.isFloat = null;
            this.type = null;
            this.prefix = null;
            this.sufix = null;
        }
        else if (value === undefined || signed === undefined || bytes === undefined || isFloat === undefined || type === undefined || prefix === undefined || sufix === undefined) {
            throw new Error('invalid arguments');
        }
        else {
            this.value = value;
            this.signed = signed;
            this.bytes = bytes;
            this.isFloat = isFloat;
            this.type = type;
            this.prefix = prefix;
            this.sufix = sufix;
        }
        this.fields.set('value', Object);
        this.fields.set('signed', Boolean);
        this.fields.set('bytes', Number);
        this.fields.set('isFloat', Boolean);
        this.fields.set('type', String);
        this.fields.set('prefix', String);
        this.fields.set('sufix', String);
    }
    toString() {
        return 'NumberLiteral(' + this.type + ', ' + this.prefix + ', ' + this.sufix + ')';
    }
    equals(obj) {
        if (obj == null || !(obj instanceof UniNumberLiteral))
            return false;
        const that = obj;
        return super.equals(that)
            && (this.value == null ? that.value == null : this.value === that.value)
            && (this.signed == null ? that.signed == null : this.signed === that.signed)
            && (this.bytes == null ? that.bytes == null : this.bytes === that.bytes)
            && (this.isFloat == null ? that.isFloat == null : this.isFloat === that.isFloat)
            && (this.type == null ? that.type == null : this.type === that.type)
            && (this.prefix == null ? that.prefix == null : this.prefix === that.prefix)
            && (this.sufix == null ? that.sufix == null : this.sufix === that.sufix);
    }
    merge(that) {
        super.merge(that);
        if (that.value != null) {
            this.value = that.value;
        }
        if (that.signed != null) {
            this.signed = that.signed;
        }
        if (that.bytes != null) {
            this.bytes = that.bytes;
        }
        if (that.isFloat != null) {
            this.isFloat = that.isFloat;
        }
        if (that.type != null) {
            this.type = that.type;
        }
        if (that.prefix != null) {
            this.prefix = that.prefix;
        }
        if (that.sufix != null) {
            this.sufix = that.sufix;
        }
    }
}
exports.UniNumberLiteral = UniNumberLiteral;
//# sourceMappingURL=UniNumberLiteral.js.map