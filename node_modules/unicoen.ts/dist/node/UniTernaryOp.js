"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UniTernaryOp = void 0;
const UniExpr_1 = require("./UniExpr");
class UniTernaryOp extends UniExpr_1.UniExpr {
    constructor(cond, trueExpr, falseExpr) {
        super();
        if (cond === undefined && trueExpr === undefined && falseExpr === undefined) {
            this.cond = null;
            this.trueExpr = null;
            this.falseExpr = null;
        }
        else if (cond === undefined || trueExpr === undefined || falseExpr === undefined) {
            throw new Error('invalid arguments');
        }
        else {
            this.cond = cond;
            this.trueExpr = trueExpr;
            this.falseExpr = falseExpr;
        }
        this.fields.set('cond', UniExpr_1.UniExpr);
        this.fields.set('trueExpr', UniExpr_1.UniExpr);
        this.fields.set('falseExpr', UniExpr_1.UniExpr);
    }
    toString() {
        return 'TernaryOp(' + ')';
    }
    equals(obj) {
        if (obj == null || !(obj instanceof UniTernaryOp))
            return false;
        const that = obj;
        return super.equals(that)
            && (this.cond == null ? that.cond == null : this.cond.equals(that.cond))
            && (this.trueExpr == null ? that.trueExpr == null : this.trueExpr.equals(that.trueExpr))
            && (this.falseExpr == null ? that.falseExpr == null : this.falseExpr.equals(that.falseExpr));
    }
    merge(that) {
        super.merge(that);
        if (that.cond != null) {
            this.cond = that.cond;
        }
        if (that.trueExpr != null) {
            this.trueExpr = that.trueExpr;
        }
        if (that.falseExpr != null) {
            this.falseExpr = that.falseExpr;
        }
    }
}
exports.UniTernaryOp = UniTernaryOp;
//# sourceMappingURL=UniTernaryOp.js.map