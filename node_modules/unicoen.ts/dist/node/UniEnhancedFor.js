"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UniEnhancedFor = void 0;
const UniStatement_1 = require("./UniStatement");
const UniIdent_1 = require("./UniIdent");
const UniExpr_1 = require("./UniExpr");
class UniEnhancedFor extends UniStatement_1.UniStatement {
    constructor(modifiers, type, name, container, statement) {
        super();
        if (modifiers === undefined &&
            type === undefined &&
            name === undefined &&
            container === undefined &&
            statement === undefined) {
            this.modifiers = [];
            this.type = null;
            this.name = null;
            this.container = null;
            this.statement = null;
        }
        else if (modifiers === undefined ||
            type === undefined ||
            name === undefined ||
            container === undefined ||
            statement === undefined) {
            throw new Error('invalid arguments');
        }
        else {
            this.modifiers = modifiers;
            this.type = type;
            this.name = name;
            this.container = container;
            this.statement = statement;
        }
        this.fields.set('modifiers', String);
        this.fields.set('type', String);
        this.fields.set('name', UniIdent_1.UniIdent);
        this.fields.set('container', UniExpr_1.UniExpr);
        this.fields.set('statement', UniStatement_1.UniStatement);
    }
    toString() {
        return 'EnhancedFor(' + this.type + ')';
    }
    equals(obj) {
        if (obj == null || !(obj instanceof UniEnhancedFor))
            return false;
        const that = obj;
        return (super.equals(that) &&
            (this.modifiers == null ? that.modifiers == null : this.modifiers.equals(that.modifiers)) &&
            (this.type == null ? that.type == null : this.type === that.type) &&
            (this.name == null ? that.name == null : this.name.equals(that.name)) &&
            (this.container == null ? that.container == null : this.container.equals(that.container)) &&
            (this.statement == null ? that.statement == null : this.statement.equals(that.statement)));
    }
    merge(that) {
        super.merge(that);
        if (that.modifiers != null) {
            if (this.modifiers == null) {
                this.modifiers = that.modifiers;
            }
            else {
                this.modifiers.push(...that.modifiers);
            }
        }
        if (that.type != null) {
            this.type = that.type;
        }
        if (that.name != null) {
            this.name = that.name;
        }
        if (that.container != null) {
            this.container = that.container;
        }
        if (that.statement != null) {
            this.statement = that.statement;
        }
    }
}
exports.UniEnhancedFor = UniEnhancedFor;
//# sourceMappingURL=UniEnhancedFor.js.map