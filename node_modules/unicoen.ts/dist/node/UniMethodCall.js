"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UniMethodCall = void 0;
const UniExpr_1 = require("./UniExpr");
const UniIdent_1 = require("./UniIdent");
class UniMethodCall extends UniExpr_1.UniExpr {
    constructor(receiver, methodName, args) {
        super();
        if (receiver === undefined && methodName === undefined && args === undefined) {
            this.receiver = null;
            this.methodName = null;
            this.args = [];
        }
        else if (receiver === undefined || methodName === undefined || args === undefined) {
            throw new Error('invalid arguments');
        }
        else {
            this.receiver = receiver;
            this.methodName = methodName;
            this.args = args;
        }
        this.fields.set('receiver', UniExpr_1.UniExpr);
        this.fields.set('methodName', UniIdent_1.UniIdent);
        this.fields.set('args', UniExpr_1.UniExpr);
    }
    toString() {
        return 'MethodCall(' + ')';
    }
    equals(obj) {
        if (obj == null || !(obj instanceof UniMethodCall))
            return false;
        const that = obj;
        return super.equals(that)
            && (this.receiver == null ? that.receiver == null : this.receiver.equals(that.receiver))
            && (this.methodName == null ? that.methodName == null : this.methodName.equals(that.methodName))
            && (this.args == null ? that.args == null : this.args.equals(that.args));
    }
    merge(that) {
        super.merge(that);
        if (that.receiver != null) {
            this.receiver = that.receiver;
        }
        if (that.methodName != null) {
            this.methodName = that.methodName;
        }
        if (that.args != null) {
            if (this.args == null) {
                this.args = that.args;
            }
            else {
                this.args.push(...that.args);
            }
        }
    }
}
exports.UniMethodCall = UniMethodCall;
//# sourceMappingURL=UniMethodCall.js.map