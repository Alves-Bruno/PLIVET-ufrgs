"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UniVariableDef = void 0;
const UniDecralation_1 = require("./UniDecralation");
const UniExpr_1 = require("./UniExpr");
class UniVariableDef extends UniDecralation_1.UniDecralation {
    constructor(name, value, typeSuffix) {
        super();
        if (name === undefined && value === undefined && typeSuffix === undefined) {
            this.name = null;
            this.value = null;
            this.typeSuffix = null;
        }
        else if (name === undefined || value === undefined || typeSuffix === undefined) {
            throw new Error('invalid arguments');
        }
        else {
            this.name = name;
            this.value = value;
            this.typeSuffix = typeSuffix;
        }
        this.fields.set('name', String);
        this.fields.set('value', UniExpr_1.UniExpr);
        this.fields.set('typeSuffix', String);
    }
    toString() {
        return 'VariableDef(' + this.name + ', ' + this.typeSuffix + ')';
    }
    equals(obj) {
        if (obj == null || !(obj instanceof UniVariableDef))
            return false;
        const that = obj;
        return super.equals(that)
            && (this.name == null ? that.name == null : this.name === that.name)
            && (this.value == null ? that.value == null : this.value.equals(that.value))
            && (this.typeSuffix == null ? that.typeSuffix == null : this.typeSuffix === that.typeSuffix);
    }
    merge(that) {
        super.merge(that);
        if (that.name != null) {
            this.name = that.name;
        }
        if (that.value != null) {
            this.value = that.value;
        }
        if (that.typeSuffix != null) {
            this.typeSuffix = that.typeSuffix;
        }
    }
}
exports.UniVariableDef = UniVariableDef;
//# sourceMappingURL=UniVariableDef.js.map